local pairs         = pairs local isfunction    = isfunction local isstring      = isstring local isnumber      = isnumber   HOOK_MONITOR_HIGH = 2 HOOK_HIGH = 1 HOOK_NORMAL = 0 HOOK_LOW = -1 HOOK_MONITOR_LOW = -2   if hookIsLoaded then return end       hookIsLoaded = true  local OldHooks = hook.GetTable()  local Hooks = {} local HookData = {} local BackwardsHooks = {}   local PostHooks = {} local Fast_Call = {} local Fast_Call_Cache = {}   function hook.GetTable() return BackwardsHooks end function hook.GetRealTable() return Hooks end   function hook.Add(event_name, name, func, priority)     priority = priority or 0      if not (isfunction(func) or isstring(event_name) or isnumber(priority)) then return end         if not isstring(name) then         ErrorNoHalt("Non-string hook '"..tostring(name).."' - '"..event_name.."'\n")         return     end       local f = Hooks[event_name]     local d = HookData[event_name]     local data = {name,priority}     if not f then         f = {func}         d = {data}          Hooks[event_name] = f         HookData[event_name] = d         BackwardsHooks[event_name] = {}                 if Fast_Call[event_name] then             Fast_Call_Cache[event_name] = Fast_Call[event_name]             Fast_Call[event_name] = nil         end     else         for i=1, #f do             if d[i][1]==name then                 table.remove(f, i)                 table.remove(d, i)                  break             end         end          local best = -1         for i=1, #f do             if d[i][2]>priority then                 best = i                  break             end         end           if best==-1 then             table.insert(f, func)             table.insert(d, data)         else             table.insert(f, best, func)             table.insert(d, best, data)         end     end       BackwardsHooks[event_name][name] = func end  function hook.Remove(event_name, name)     if not isstring(event_name) then return end          local f = Hooks[event_name]     if not f then return end       local d = HookData[event_name]     for i=1, #f do         if d[i][1]==name then             table.remove(f,i)             table.remove(d,i)             BackwardsHooks[ event_name ][ name ] = nil             break         end     end               if #f==0 then         Hooks[event_name] = nil         HookData[event_name] = nil         BackwardsHooks[event_name] = nil                 if Fast_Call_Cache[event_name] then             Fast_Call[event_name] = Fast_Call_Cache[event_name]             Fast_Call_Cache[event_name] = nil         end     end end  function hook.Call(name, gm, ...)     local f = Fast_Call[name]     if f then         return f(...)     end      local HookTable = Hooks[name]     if HookTable then         for i=#HookTable, 1, -1 do             local a, b, c, d, e, f = HookTable[i](...)             if a~=nil then                 local PostHookTable = PostHooks[name]                 if PostHookTable then                     for j=#PostHookTable, 1, -1 do                         PostHookTable[j](a, b, c, d, e, f)                     end                 end                  return a, b, c, d, e, f             end         end     end       if not gm then return end       local GamemodeFunction = gm[name]     if not GamemodeFunction then return end       local PostHookTable = PostHooks[name]     if PostHookTable then         local a, b, c, d, e, f = GamemodeFunction(gm, ...)         for j=#PostHookTable, 1, -1 do             PostHookTable[j](a, b, c, d, e, f)         end          return a, b, c, d, e, f     else         return GamemodeFunction(gm, ...)     end end  local HookAdd = hook.Add local HookCall = hook.Call local HookRemove = hook.Remove  function hook.Run(name, ...)  return HookCall(name, GAMEMODE or GM, ...) end     for event_name, t in pairs(OldHooks) do     for name, func in pairs(t) do  HookAdd(event_name, name, func)     end end OldHooks = nil    local InitHooks = {  "Initialize",  "CreateTeams",  "PreGamemodeLoaded",  "PostGamemodeLoaded",  "OnGamemodeLoaded" } HookAdd("Tick", "RemoveUselessHook", function()     HookRemove("Tick","RemoveUselessHook")         for i=1, #InitHooks do         local n = InitHooks[i]         Hooks[n] = nil         HookData[n] = nil         BackwardsHooks[n] = nil     end end, 2)