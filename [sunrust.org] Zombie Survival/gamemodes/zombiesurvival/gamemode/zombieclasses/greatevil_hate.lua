CLASS.Name = "Hate" CLASS.TranslationName = "class_hate" CLASS.Description = "A menacing abomination that came from past, or perhaps, the other past?" CLASS.Help = "You're not getting any help with this one"  CLASS.Unlocked = true CLASS.Hidden = true  CLASS.GreatEvil = true  CLASS.KnockbackScale = 0  CLASS.FearPerInstance = 1 CLASS.Health = 15000    CLASS.Points = (CLASS.Health/GM.HumanoidZombiePointRatio)/1.5  CLASS.SWEP = "weapon_zs_hate"  CLASS.Model = Model("models/player/zombie_classic_hbfix.mdl")  CLASS.Speed = 95    CLASS.ModelScale = 2 CLASS.Hull = {Vector(-16, -16, 0), Vector(16, 16, 72)}   CLASS.HullDuck = {Vector(-16, -16, 0), Vector(16, 16, 36)}   CLASS.ViewOffset = DEFAULT_VIEW_OFFSET CLASS.ViewOffsetDucked = DEFAULT_VIEW_OFFSET_DUCKED CLASS.StepSize = 25 CLASS.Mass = DEFAULT_MASS * CLASS.ModelScale  CLASS.VoicePitch = 0.5  local math_random = math.random local math_min = math.min local CurTime = CurTime  function CLASS:Move(pl, move)  local wep = pl:GetActiveWeapon()  if not wep.GetEnraged then return end   local enrage = wep:GetEnraged()   if enrage then  move:SetMaxSpeed(255)  move:SetMaxClientSpeed(255)  end   if not enrage and move:GetForwardSpeed() <= 0 then  move:SetMaxSpeed(math_min(move:GetMaxSpeed(), 105))  move:SetMaxClientSpeed(math_min(move:GetMaxClientSpeed(), 105))  end  end  function CLASS:IgnoreLegDamage(pl, dmginfo)  return true end  function CLASS:PlayerStepSoundTime(pl, iType, bWalking)  local activ = pl:GetActiveWeapon()   if iType == STEPSOUNDTIME_NORMAL or iType == STEPSOUNDTIME_WATER_FOOT then  if activ and activ.GetEnraged and activ:GetEnraged() then  return 700 - pl:GetVelocity():Length()  end  return 900 - pl:GetVelocity():Length()*2  end   return 900 end local painsounds_zombie = {"vo/npc/vortigaunt/vortigese02.wav", "vo/npc/vortigaunt/vortigese03.wav", "vo/npc/vortigaunt/vortigese04.wav","vo/npc/vortigaunt/vortigese05.wav","vo/npc/vortigaunt/vortigese07.wav","vo/npc/vortigaunt/vortigese09.wav",} function CLASS:PlayPainSound(pl)  pl:EmitSound(table.Random(painsounds_zombie), 75, math_random(45, 60), 0.9)   pl.NextPainSound = CurTime() + 1.4   return true end   local StepSounds = {  "physics/concrete/boulder_impact_hard1.wav",  "physics/concrete/boulder_impact_hard2.wav",  "physics/concrete/boulder_impact_hard3.wav",  "physics/concrete/boulder_impact_hard4.wav", } function CLASS:PlayerFootstep(pl, vFootPos, iFoot, strSoundName, fVolume, pFilter)  if iFoot == 0 then  pl:EmitSound(StepSounds[math_random(1,2)], 77, math_random(95,100))  else  pl:EmitSound(StepSounds[math_random(3,4)], 77, math_random(95,100))  end   return true end  function CLASS:CalcMainActivity(pl, velocity)   local activ = pl:GetActiveWeapon()  if activ and activ.GetEnraged and activ:GetEnraged() and velocity:Length2DSqr() > 40000 then  return ACT_HL2MP_RUN_ZOMBIE_FAST, -1  end   return ACT_HL2MP_WALK_ZOMBIE_06, -1  end  function CLASS:DoAnimationEvent(pl, event, data)  local activ = pl:GetActiveWeapon()   if event == PLAYERANIMEVENT_ATTACK_PRIMARY then  if activ and activ.GetEnraged and activ:GetEnraged() then  pl:DoZombieAttackAnim(math_random(2))  else  pl:DoZombieAttackAnim(math_random(3,4))  end  return ACT_INVALID   elseif event == PLAYERANIMEVENT_RELOAD then  pl:AnimRestartGesture(GESTURE_SLOT_ATTACK_AND_RELOAD, ACT_GMOD_GESTURE_TAUNT_ZOMBIE, true)  return ACT_INVALID  end end  function CLASS:UpdateAnimation(pl, velocity, maxseqgroundspeed)  local len2d = velocity:Length2D()  local activ = pl:GetActiveWeapon()   if len2d > 1 then   if activ and activ.GetEnraged and activ:GetEnraged() and len2d > 200 then  pl:SetPlaybackRate(math_min(len2d / maxseqgroundspeed * 0.65 , 3))  else  pl:SetPlaybackRate(math_min(len2d / maxseqgroundspeed * 0.25 , 3))  end   else  pl:SetPlaybackRate(1 / self.ModelScale)  end   return true end  function CLASS:PlayDeathSound(pl)  for i=1, 2 do  pl:EmitSound("npc/antlion_guard/antlion_guard_die"..i..".wav", 75, math.random(70, 75), 1, CHAN_AUTO + i)  end   return true end  local function CreateFlesh(pl, damage, damagepos, damagedir)  damage = math.min(damage, 150)   pl:EmitSound(string.format("physics/body/body_medium_break%d.wav", math.random(2, 4)), 74, 125 - damage * 0.50)   if SERVER then  damagepos = pl:LocalToWorld(damagepos)   for i=1, math.max(1, math.floor(damage / 12)) do  local ent = ents.Create("projectile_darkflesh")  if ent:IsValid() then  local heading = (damagedir + VectorRand() * 0.3):GetNormalized()  ent:SetPos(damagepos + heading)  ent:SetOwner(pl)  ent:Spawn()   local phys = ent:GetPhysicsObject()  if phys:IsValid() then  phys:Wake()  phys:SetVelocityInstantaneous(math.min(405, 175 + damage ^ math.Rand(1.15, 1.25)) * heading)  end  end  end  end end  if SERVER then  function CLASS:OnSpawned(pl)  pl:CreateAmbience("hateambience")  end   function CLASS:ProcessDamage(pl, dmginfo)  local activ = pl:GetActiveWeapon()  if not activ.GetEnraged then return end   if not activ:GetEnraged() and pl:Health() <= pl:GetMaxHealth() * 0.8 then  activ:SetEnraged( true )  for i = 0, 2 do  timer.Simple(0.04 * i,  function() if pl:IsValidLivingZombie() then pl:EmitSound("npc/zombie_poison/pz_pain"..(i+1)..".wav", 75, 50 + i*5, 0.8, CHAN_WEAPON + i) end  end)  end  end   local attacker, damage = dmginfo:GetAttacker(), dmginfo:GetDamage()  if attacker ~= pl and damage >= 5 and damage < pl:Health() and CurTime() >= (pl.m_NextPukeEmit or 0) then  pl.m_NextPukeEmit = CurTime() + 1.5   local pos = pl:WorldToLocal(dmginfo:GetDamagePosition())  local norm = dmginfo:GetDamageForce():GetNormalized() * -1  timer.Simple(0, function()  if pl:IsValid() then  CreateFlesh(pl, damage, pos, norm)  end  end)  end  end   function CLASS:OnKilled(pl, attacker, inflictor, suicide, headshot, dmginfo)  local pos = pl:WorldSpaceCenter()   for i=1, 20 do  local ent = ents.CreateLimited("prop_playergib")  if ent:IsValid() then  ent:SetPos(pos + VectorRand() * 12)  ent:SetAngles(VectorRand():Angle())  ent:SetGibType(math.random(3, #GAMEMODE.HumanGibs))  ent:Spawn()   local phys = ent:GetPhysicsObject()  if phys and phys:IsValid() then  phys:ApplyForceOffset(VectorRand():GetNormalized() * math.Rand(8000, 13000), pos)  end  end  end   local effectdata = EffectData()  effectdata:SetOrigin(pos)  effectdata:SetNormal(pl:GetUp())  effectdata:SetEntity(pl)  util.Effect("death_extinctioncrab", effectdata, nil, true)   return true  end end  if not CLIENT then return end  function CLASS:ShouldDrawLocalPlayer()  return true end  function CLASS:PrePlayerDraw(pl)  render.SetBlend(0) end  function CLASS:PostPlayerDraw(pl)  render.SetBlend(1) end