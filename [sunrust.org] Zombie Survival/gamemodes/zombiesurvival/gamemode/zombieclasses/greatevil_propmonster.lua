CLASS.Name = "Corrupted Amalgam" CLASS.TranslationName = "class_propmonster" CLASS.Description = "description_propmonster" CLASS.Help = "controls_propmonster"  CLASS.GreatEvil = true  CLASS.Unlocked = true CLASS.Hidden = true  CLASS.KnockbackScale = 0  CLASS.Health = 11500 CLASS.Speed = 235  CLASS.FearPerInstance = 1  CLASS.Points = (CLASS.Health/GM.HumanoidZombiePointRatio)/1.5  CLASS.SWEP = "weapon_zs_propmonster"  CLASS.Model = Model("models/dog.mdl")  CLASS.VoicePitch = 0.8  CLASS.Hull = {Vector(-16, -16, 0), Vector(16, 16, 58)} CLASS.HullDuck = {Vector(-16, -16, 0), Vector(16, 16, 32)} CLASS.ViewOffset = Vector(0, 0, 50) CLASS.ViewOffsetDucked = Vector(0, 0, 24)  CLASS.BloodColor = BLOOD_COLOR_MECH  local math_random = math.random  local STEPSOUNDTIME_NORMAL = STEPSOUNDTIME_NORMAL local STEPSOUNDTIME_WATER_FOOT = STEPSOUNDTIME_WATER_FOOT local STEPSOUNDTIME_ON_LADDER = STEPSOUNDTIME_ON_LADDER local STEPSOUNDTIME_WATER_KNEE = STEPSOUNDTIME_WATER_KNEE  function CLASS:PlayPainSound(pl)  pl:EmitSound("ambient/levels/prison/radio_random"..math_random(15)..".wav", 75, math_random(45, 130), 1)   pl.NextPainSound = CurTime() + 1   return true end  function CLASS:PlayDeathSound(pl)  pl:EmitSound( "npc/dog/dog_drop_gate1.wav", 100, math.random(110, 115), 1, CHAN_AUTO )  return true end  function CLASS:PlayerFootstep(pl, vFootPos, iFoot, strSoundName, fVolume, pFilter)   if iFoot == 0 then  pl:EmitSound("^npc/strider/strider_step4.wav", 90, math_random(75, 90))  pl:EmitSound("npc/dog/dog_footstep_run"..math_random(4)..".wav", 75, math_random(105, 110))  else  pl:EmitSound("^npc/strider/strider_step5.wav", 90, math_random(75, 90))  pl:EmitSound("npc/dog/dog_footstep_run"..math_random(5,8)..".wav", 75, math_random(105, 110))  end   return true end  function CLASS:IgnoreLegDamage(pl, dmginfo)  return true end  if SERVER then  function CLASS:OnKilled(pl, attacker, inflictor, suicide, headshot, dmginfo)   pl:SetModel("models/player/breen.mdl")   local effectdata = EffectData()  effectdata:SetOrigin( pl:GetPos() )  effectdata:SetAngles( pl:GetAngles() )  effectdata:SetEntity( pl )  util.Effect("death_propmonster", effectdata, nil, true)   return true  end  end  function CLASS:PlayerStepSoundTime(pl, iType, bWalking)  if iType == STEPSOUNDTIME_NORMAL or iType == STEPSOUNDTIME_WATER_FOOT then  return 600 - pl:GetVelocity():Length()  elseif iType == STEPSOUNDTIME_ON_LADDER then  return 550  elseif iType == STEPSOUNDTIME_WATER_KNEE then  return 500  end   return 250 end  function CLASS:CalcMainActivity(pl, velocity)   if velocity:Length2DSqr() <= 1 then  return ACT_IDLE, -1  end   return ACT_RUN, -1 end  function CLASS:UpdateAnimation(pl, velocity, maxseqgroundspeed)  pl:SetPlaybackRate(0.7)  return true end  function CLASS:ScalePlayerDamage(pl, hitgroup, dmginfo)  return true end  function CLASS:IgnoreLegDamage(pl, dmginfo)  return true end  function CLASS:DoAnimationEvent(pl, event, data)  if event == PLAYERANIMEVENT_ATTACK_PRIMARY then  pl:AddVCDSequenceToGestureSlot(GESTURE_SLOT_ATTACK_AND_RELOAD, pl:LookupSequence( "throw" ), 0, true)  return ACT_INVALID  elseif event == PLAYERANIMEVENT_ATTACK_SECONDARY then  pl:AddVCDSequenceToGestureSlot(GESTURE_SLOT_ATTACK_AND_RELOAD, pl:LookupSequence( "pound" ), 0, true)  return ACT_INVALID  elseif event == PLAYERANIMEVENT_RELOAD then  pl:AddVCDSequenceToGestureSlot(GESTURE_SLOT_ATTACK_AND_RELOAD, pl:LookupSequence( "apc_throw" ), 0, true)  return ACT_INVALID  end end  if SERVER then  function CLASS:OnSpawned(pl)  pl:CreateAmbience("propmonsterambience")  end end  if not CLIENT then return end  function CLASS:PrePlayerDraw(pl)  render.SetBlend(0) end  function CLASS:PostPlayerDraw(pl)  render.SetBlend(1) end 