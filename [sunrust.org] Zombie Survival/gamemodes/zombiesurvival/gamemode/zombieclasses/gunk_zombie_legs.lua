CLASS.Name = "Gunk Zombie Legs" CLASS.TranslationName = "class_gunk_zombie_legs" CLASS.Description = "description_gunk_zombie_legs"  CLASS.Model = Model("models/player/zombie_classic.mdl") CLASS.OverrideModel = Model("models/Zombie/Classic_legs.mdl") CLASS.NoHead = true  CLASS.Wave = 0 CLASS.Threshold = 0 CLASS.Unlocked = true CLASS.Hidden = true  CLASS.Health = 100 CLASS.Speed = 160 CLASS.JumpPower = 250  CLASS.CanTaunt = true  CLASS.Points = CLASS.Health/GM.LegsZombiePointRatio  CLASS.Hull = {Vector(-16, -16, 0), Vector(16, 16, 32)} CLASS.HullDuck = {Vector(-16, -16, 0), Vector(16, 16, 32)} CLASS.ViewOffset = Vector(0, 0, 32) CLASS.ViewOffsetDucked = Vector(0, 0, 32) CLASS.Mass = DEFAULT_MASS * 0.5 CLASS.CrouchedWalkSpeed = 1  CLASS.CantDuck = true  CLASS.CanFeignDeath = true  CLASS.VoicePitch = 0.65  CLASS.SWEP = "weapon_zs_gunkzombielegs"  CLASS.BloodColor = -1  local math_random = math.random  function CLASS:DoesntGiveFear(pl)  return pl.FeignDeath and pl.FeignDeath:IsValid() end  local function CreateGunk(pl, damage, damagepos, damagedir)  damage = math.min(damage, 100)   pl:EmitSound("physics/flesh/flesh_squishy_impact_hard"..math.random(4)..".wav", 74, 125 - damage * 0.50)   if SERVER then  damagepos = pl:LocalToWorld(damagepos)   for i=1, math.max(1, math.floor(damage / 15)) do  local ent = ents.Create("projectile_gunk")  if ent:IsValid() then  local heading = (damagedir + VectorRand() * 0.3):GetNormalized()  ent:SetPos(damagepos + heading)  ent:SetOwner(pl)  ent:Spawn()   local phys = ent:GetPhysicsObject()  if phys:IsValid() then  phys:Wake()  phys:SetVelocityInstantaneous(math.min(300, 50 + damage ^ math.Rand(1.15, 1.25)) * heading)  end  end  end  end end  function CLASS:ProcessDamage(pl, dmginfo)  local attacker, damage = dmginfo:GetAttacker(), math.min(dmginfo:GetDamage(), pl:Health())  if attacker ~= pl and damage >= 5 and CurTime() >= (pl.m_NextPukeEmit or 0) then  pl.m_NextPukeEmit = CurTime() + 0.3   local pos = pl:WorldToLocal(dmginfo:GetDamagePosition())  local norm = dmginfo:GetDamageForce():GetNormalized() * -1  timer.Simple(0, function()  if pl:IsValid() then  CreateGunk(pl, damage, pos, norm)  end  end)  end end  if SERVER then  function CLASS:AltUse(pl)  pl:StartFeignDeath()  end    function CLASS:OnSpawned(pl)  pl:CreateAmbience("gunkambience")  end   function CLASS:IgnoreLegDamage(pl, dmginfo)  return true  end end  function CLASS:ScalePlayerDamage(pl, hitgroup, dmginfo)  if not dmginfo:IsBulletDamage() then return true end   if hitgroup ~= HITGROUP_LEFTLEG and hitgroup ~= HITGROUP_RIGHTLEG and hitgroup ~= HITGROUP_GEAR and hitgroup ~= HITGROUP_GENERIC and dmginfo:GetDamagePosition().z > pl:LocalToWorld(Vector(0, 0, self.Hull[2].z * 1.33)).z then  dmginfo:SetDamage(0)  dmginfo:ScaleDamage(0)  end   return true end     function CLASS:ShouldDrawLocalPlayer(pl)  return true end  local StepSounds = {  "npc/zombie/foot1.wav",  "npc/zombie/foot2.wav",  "npc/zombie/foot3.wav" } local ScuffSounds = {  "npc/zombie/foot_slide1.wav",  "npc/zombie/foot_slide2.wav",  "npc/zombie/foot_slide3.wav" } function CLASS:PlayerFootstep(pl, vFootPos, iFoot, strSoundName, fVolume, pFilter)  if math_random() < 0.15 then  pl:EmitSound(ScuffSounds[math_random(#ScuffSounds)], 70)  else  pl:EmitSound(StepSounds[math_random(#StepSounds)], 70)  end   return true end    function CLASS:PlayerStepSoundTime(pl, iType, bWalking)  if iType == STEPSOUNDTIME_NORMAL or iType == STEPSOUNDTIME_WATER_FOOT then  return 625 - pl:GetVelocity():Length()  elseif iType == STEPSOUNDTIME_ON_LADDER then  return 600  elseif iType == STEPSOUNDTIME_WATER_KNEE then  return 750  end   return 450 end  function CLASS:CalcMainActivity(pl, velocity)  local feign = pl.FeignDeath  if feign and feign:IsValid() then  if feign:GetDirection() == DIR_BACK then  return 1, pl:LookupSequence("zombie_slump_rise_02_fast")  end   return ACT_HL2MP_ZOMBIE_SLUMP_RISE, -1  end   if velocity:Length2DSqr() <= 1 then  return ACT_HL2MP_IDLE_ZOMBIE, -1  end   return ACT_HL2MP_RUN_ZOMBIE, -1 end  function CLASS:UpdateAnimation(pl, velocity, maxseqgroundspeed)  local feign = pl.FeignDeath  if feign and feign:IsValid() then  if feign:GetState() == 1 then  pl:SetCycle(1 - math.max(feign:GetStateEndTime() - CurTime(), 0) * 0.666)  else  pl:SetCycle(math.max(feign:GetStateEndTime() - CurTime(), 0) * 0.666)  end  pl:SetPlaybackRate(0)   return true  end   local len2d = velocity:Length2D()  if len2d > 1 then  pl:SetPlaybackRate(math.min(len2d / maxseqgroundspeed * 0.75, 3))  else  pl:SetPlaybackRate(1)  end   return true end  if not CLIENT then return end  local render_SetColorModulation = render.SetColorModulation local render_ModelMaterialOverride = render.ModelMaterialOverride  CLASS.Icon = "zombiesurvival/killicons/legs" CLASS.IconColor = Color(80, 80, 80) local matSkin = Material("models/flesh")   local undo = false function CLASS:PrePlayerDraw(pl)  local boneid = pl:LookupBone("ValveBiped.Bip01_Spine")  if boneid and boneid > 0 then  local pos, ang = pl:GetBonePosition(boneid)  if pos then  local normal = ang:Forward() * -1   render.EnableClipping(true)  render.PushCustomClipPlane(normal, normal:Dot(pos))  undo = true  end  end  end  function CLASS:PostPlayerDraw(pl)   if undo then  render.PopCustomClipPlane()  render.EnableClipping(false)  end end  function CLASS:PrePlayerDrawOverrideModel(pl)  render_ModelMaterialOverride(matSkin)  render_SetColorModulation(0.175, 0.125, 0.125) end  function CLASS:PostPlayerDrawOverrideModel(pl)  render_ModelMaterialOverride()  render_SetColorModulation(1, 1, 1) end  function CLASS:BuildBonePositions(pl)  local desired   local bone = "ValveBiped.Bip01_L_Thigh"   local wep = pl:GetActiveWeapon()  if wep:IsValid() then  if wep.GetSwingEndTime and wep:GetSwingEndTime() > 0 then  desired = 1 - math.Clamp((wep:GetSwingEndTime() - CurTime()) / wep.MeleeDelay, 0, 1)  end   if wep:GetDTBool(3) then  bone = "ValveBiped.Bip01_R_Thigh"  end  end   desired = desired or 0   if desired > 0 then  pl.m_KickDelta = CosineInterpolation(0, 1, desired)  else  pl.m_KickDelta = math.Approach(pl.m_KickDelta or 0, desired, FrameTime() * 4)  end   local boneid = pl:LookupBone(bone)  if boneid and boneid > 0 then  pl:ManipulateBoneAngles(boneid, pl.m_KickDelta * Angle(bone == "ValveBiped.Bip01_L_Thigh" and 0 or 20, -110, 30))  end end 