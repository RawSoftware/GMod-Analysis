CLASS.Name = "The Butcher" CLASS.TranslationName = "class_butcher" CLASS.Description = "description_butcher" CLASS.Help = "controls_butcher"  CLASS.Boss = true  CLASS.KnockbackScale = 0  CLASS.Health = 1500 CLASS.Speed = 240  CLASS.CanTaunt = true  CLASS.FearPerInstance = 1  CLASS.NoGibLimit = true  CLASS.Points = CLASS.Health/GM.HumanoidZombiePointRatio CLASS.Cat = ZCLASSCAT_ASSAULT  CLASS.SWEP = "weapon_zs_butcherknifez"  CLASS.Model = Model("models/player/corpse1.mdl")  CLASS.VoicePitch = 0.65  CLASS.PainSounds = {"npc/zombie/zombie_pain1.wav", "npc/zombie/zombie_pain2.wav", "npc/zombie/zombie_pain3.wav", "npc/zombie/zombie_pain4.wav", "npc/zombie/zombie_pain5.wav", "npc/zombie/zombie_pain6.wav"} CLASS.DeathSounds = {"npc/zombie/zombie_die1.wav", "npc/zombie/zombie_die2.wav", "npc/zombie/zombie_die3.wav"}  local math_random = math.random local math_min = math.min local CurTime = CurTime  local ACT_HL2MP_SWIM_MELEE = ACT_HL2MP_SWIM_MELEE local ACT_HL2MP_IDLE_CROUCH_MELEE = ACT_HL2MP_IDLE_CROUCH_MELEE local ACT_HL2MP_WALK_CROUCH_MELEE = ACT_HL2MP_WALK_CROUCH_MELEE local ACT_HL2MP_IDLE_MELEE = ACT_HL2MP_IDLE_MELEE local ACT_HL2MP_RUN_ZOMBIE = ACT_HL2MP_RUN_ZOMBIE local ACT_HL2MP_RUN_MELEE = ACT_HL2MP_RUN_MELEE  local StepLeftSounds = {  "npc/fast_zombie/foot1.wav",  "npc/fast_zombie/foot2.wav" } local StepRightSounds = {  "npc/fast_zombie/foot3.wav",  "npc/fast_zombie/foot4.wav" } function CLASS:PlayerFootstep(pl, vFootPos, iFoot, strSoundName, fVolume, pFilter)  if iFoot == 0 then  pl:EmitSound(StepLeftSounds[math_random(#StepLeftSounds)], 70)  else  pl:EmitSound(StepRightSounds[math_random(#StepRightSounds)], 70)  end   return true end  function CLASS:IgnoreLegDamage(pl, dmginfo)  return true end  function CLASS:CalcMainActivity(pl, velocity)  if pl:WaterLevel() >= 3 then  return ACT_HL2MP_SWIM_MELEE, -1  end   if pl:Crouching() then  if velocity:Length2DSqr() <= 1 then  return ACT_HL2MP_IDLE_CROUCH_MELEE, -1  end   return ACT_HL2MP_WALK_CROUCH_MELEE, -1  end   local swinging = false  local wep = pl:GetActiveWeapon()  if wep:IsValid() and CurTime() < wep:GetNextPrimaryFire() then  swinging = true  end   if velocity:Length2DSqr() <= 1 then  if swinging then  return ACT_HL2MP_IDLE_MELEE, -1  end   return ACT_HL2MP_RUN_ZOMBIE, -1  end   if swinging then  return ACT_HL2MP_RUN_MELEE, -1  end   return ACT_HL2MP_RUN_ZOMBIE, -1 end  function CLASS:UpdateAnimation(pl, velocity, maxseqgroundspeed)  local len2d = velocity:Length2D()  if len2d > 0.5 then  pl:SetPlaybackRate(math_min(len2d / maxseqgroundspeed, 3))  else  pl:SetPlaybackRate(1)  end   return true end  function CLASS:DoAnimationEvent(pl, event, data)  if event == PLAYERANIMEVENT_ATTACK_PRIMARY then  pl:AnimRestartGesture(GESTURE_SLOT_ATTACK_AND_RELOAD, ACT_HL2MP_GESTURE_RANGE_ATTACK_MELEE, true)  return ACT_INVALID  elseif event == PLAYERANIMEVENT_RELOAD then  pl:AnimRestartGesture(GESTURE_SLOT_ATTACK_AND_RELOAD, ACT_GMOD_GESTURE_TAUNT_ZOMBIE, true)  return ACT_INVALID  end end  if SERVER then  function CLASS:OnSpawned(pl)  pl:CreateAmbience("butcherambience")  end end  local function DoBones(pl)  if not pl.ButcherCallback then  local muscular_bones = {  ["ValveBiped.Bip01_R_Upperarm"] = Vector(1.4, 1.4, 1.4),  ["ValveBiped.Bip01_R_Forearm"] = Vector(1.4, 1.4, 1.4),  ["ValveBiped.Bip01_R_Clavicle"] = Vector(1.4, 1.4, 1.4),  ["ValveBiped.Bip01_R_Hand"] = Vector(1.4, 1.4, 1.4),  ["ValveBiped.Anim_Attachment_RH"] = Vector(1.4, 1.4, 1.4),  }   local size_downs = {  "ValveBiped.Bip01_L_Upperarm",  "ValveBiped.Bip01_L_Forearm",  "ValveBiped.Bip01_L_Hand",  "ValveBiped.Anim_Attachment_LH",  "ValveBiped.Bip01_L_Finger4",  "ValveBiped.Bip01_L_Finger41",  "ValveBiped.Bip01_L_Finger42",  "ValveBiped.Bip01_L_Finger3",  "ValveBiped.Bip01_L_Finger31",  "ValveBiped.Bip01_L_Finger32",  "ValveBiped.Bip01_L_Finger2",  "ValveBiped.Bip01_L_Finger21",  "ValveBiped.Bip01_L_Finger22",  "ValveBiped.Bip01_L_Finger1",  "ValveBiped.Bip01_L_Finger11",  "ValveBiped.Bip01_L_Finger12",  "ValveBiped.Bip01_L_Finger0",  "ValveBiped.Bip01_L_Finger01",  "ValveBiped.Bip01_L_Finger02"  }   local angular_bones = {  ["ValveBiped.Bip01_R_Upperarm"] = Angle(-10, 30, 30),  ["ValveBiped.Bip01_R_Forearm"] = Angle(0, 40, 0),  ["ValveBiped.Bip01_Spine4"] = Angle(-10, 10, 0)  }   pl.ButcherCallback = pl:AddCallback("BuildBonePositions", function(ent, bonecount)  for bonename, newscale in pairs(muscular_bones) do  local boneid = ent:LookupBone(bonename)  if boneid and boneid > 0 then  ent:ManipulateBoneScale(boneid, newscale)  end  end   local spine_bone = ent:LookupBone("ValveBiped.Bip01_L_Clavicle")  if spine_bone and spine_bone > 0 then  local spine_pos = ent:GetBonePositionMatrixed(spine_bone)  for _, v in pairs(size_downs) do  local boneid = ent:LookupBone(v)  if boneid and boneid > 0 then  ent:ManipulateBoneScale(boneid, vector_tiny)   local m = ent:GetBoneMatrix(boneid)  if m then  m:SetScale(vector_tiny)  m:SetTranslation(spine_pos)  ent:SetBoneMatrix(boneid, m)  end  end  end  end   for bonename, newang in pairs(angular_bones) do  local boneid = ent:LookupBone(bonename)  if boneid and boneid > 0 then  ent:ManipulateBoneAngles(boneid, newang)  end  end  end)  end end  function CLASS:BuildBonePositions(pl)  DoBones(pl) end  if not CLIENT then return end  CLASS.Icon = "zombiesurvival/killicons/butcher"  local render_SetMaterial = render.SetMaterial local render_DrawSprite = render.DrawSprite local angle_zero = angle_zero local LocalToWorld = LocalToWorld  local colGlow = Color(235, 50, 0) local matGlow = Material("sprites/glow04_noz") local vecEyeLeft = Vector(4, -4.6, -1) local vecEyeRight = Vector(4, -4.6, 1)  function CLASS:PrePlayerDraw(pl)  render.SetColorModulation(1, 0.5, 0.5) end  function CLASS:PostPlayerDraw(pl)  render.SetColorModulation(1, 1, 1)                        end 