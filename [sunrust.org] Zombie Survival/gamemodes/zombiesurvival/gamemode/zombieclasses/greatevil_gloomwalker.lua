CLASS.Name = "Gloom Walker" CLASS.TranslationName = "class_gloomwalker" CLASS.Description = "description_eradicator" CLASS.Help = "controls_eradicator"  CLASS.Wave = 6 / 6  CLASS.Health = 3850 CLASS.Speed = 145 CLASS.Unlocked = true CLASS.Hidden = true  CLASS.GreatEvil = true  CLASS.CanTaunt = true  CLASS.KnockbackScale = 0 CLASS.FearPerInstance = 1  CLASS.Points = (CLASS.Health/GM.HumanoidZombiePointRatio)/1.5  CLASS.IgnoreTargetAssist = true  CLASS.SWEP = "weapon_zs_gloomwalker"  CLASS.Model = Model("models/player/zelpa/stalker.mdl") CLASS.VoicePitch = 0.6  CLASS.NoHideMainModel = true CLASS.CanFeignDeath = true  local CurTime = CurTime local math_random = math.random local ACT_HL2MP_ZOMBIE_SLUMP_RISE = ACT_HL2MP_ZOMBIE_SLUMP_RISE local ACT_HL2MP_SWIM_PISTOL = ACT_HL2MP_SWIM_PISTOL local ACT_HL2MP_RUN_ZOMBIE = ACT_HL2MP_RUN_ZOMBIE local ACT_HL2MP_IDLE_CROUCH_ZOMBIE = ACT_HL2MP_IDLE_CROUCH_ZOMBIE local ACT_HL2MP_IDLE_ZOMBIE = ACT_HL2MP_IDLE_ZOMBIE local ACT_HL2MP_WALK_CROUCH_ZOMBIE_01 = ACT_HL2MP_WALK_CROUCH_ZOMBIE_01 local ACT_HL2MP_WALK_ZOMBIE_01 = ACT_HL2MP_WALK_ZOMBIE_01 local GESTURE_SLOT_ATTACK_AND_RELOAD = GESTURE_SLOT_ATTACK_AND_RELOAD local PLAYERANIMEVENT_ATTACK_PRIMARY = PLAYERANIMEVENT_ATTACK_PRIMARY local ACT_GMOD_GESTURE_RANGE_ZOMBIE = ACT_GMOD_GESTURE_RANGE_ZOMBIE local ACT_INVALID = ACT_INVALID local PLAYERANIMEVENT_RELOAD = PLAYERANIMEVENT_RELOAD local ACT_GMOD_GESTURE_TAUNT_ZOMBIE = ACT_GMOD_GESTURE_TAUNT_ZOMBIE local STEPSOUNDTIME_NORMAL = STEPSOUNDTIME_NORMAL local STEPSOUNDTIME_WATER_FOOT = STEPSOUNDTIME_WATER_FOOT local STEPSOUNDTIME_ON_LADDER = STEPSOUNDTIME_ON_LADDER local STEPSOUNDTIME_WATER_KNEE = STEPSOUNDTIME_WATER_FOOT local HITGROUP_HEAD = HITGROUP_HEAD local HITGROUP_LEFTLEG = HITGROUP_LEFTLEG local HITGROUP_RIGHTLEG = HITGROUP_RIGHTLEG local DMG_ALWAYSGIB = DMG_ALWAYSGIB local DMG_BURN = DMG_BURN local DMG_CRUSH = DMG_CRUSH  local StepLeftSounds = {  "npc/zombie/foot1.wav",  "npc/zombie/foot2.wav" } local StepRightSounds = {  "npc/zombie/foot2.wav",  "npc/zombie/foot3.wav" } function CLASS:PlayerFootstep(pl, vFootPos, iFoot, strSoundName, fVolume, pFilter)  if iFoot == 0 then  pl:EmitSound(StepLeftSounds[math_random(#StepLeftSounds)], 70)  else  pl:EmitSound(StepRightSounds[math_random(#StepRightSounds)], 70)  end   return true end  function CLASS:PlayPainSound(pl)  pl:EmitSound("npc/combine_soldier/pain"..math_random(3)..".wav", 75, math.Rand(60, 65))  pl.NextPainSound = CurTime() + 0.5   return true end  function CLASS:PlayDeathSound(pl)  pl:EmitSound("npc/combine_gunship/gunship_pain.wav", 75, math.Rand(70, 75))   return true end  function CLASS:PlayerStepSoundTime(pl, iType, bWalking)  if iType == STEPSOUNDTIME_NORMAL or iType == STEPSOUNDTIME_WATER_FOOT then  return 600 - pl:GetVelocity():Length()  elseif iType == STEPSOUNDTIME_ON_LADDER then  return 600  elseif iType == STEPSOUNDTIME_WATER_KNEE then  return 750  end   return 300 end  function CLASS:CalcMainActivity(pl, velocity)  if (pl.ShadeControl and pl.ShadeControl:IsValid()) or (pl.ShadeShield and pl.ShadeShield:IsValid()) then  if velocity:Length2DSqr() <= 1 then  return ACT_HL2MP_IDLE_MAGIC, -1  end   return ACT_HL2MP_RUN_MAGIC, -1  end   return ACT_HL2MP_RUN_ZOMBIE, -1 end  function CLASS:DoAnimationEvent(pl, event, data)  if event == PLAYERANIMEVENT_ATTACK_PRIMARY then  pl:AnimRestartGesture(GESTURE_SLOT_ATTACK_AND_RELOAD, ACT_HL2MP_GESTURE_RANGE_ATTACK_MELEE2, true)  return ACT_INVALID  elseif event == PLAYERANIMEVENT_RELOAD then  pl:AnimRestartGesture(GESTURE_SLOT_ATTACK_AND_RELOAD, ACT_GMOD_GESTURE_TAUNT_ZOMBIE, true)  return ACT_INVALID  end end  function CLASS:UpdateAnimation(pl, velocity, maxseqgroundspeed)  pl:SetPlaybackRate(1)  pl:SetCycle(0.35 + math.abs(math.sin(CurTime() * 1.5)) * 0.3)   return true end  if SERVER then  function CLASS:OnSpawned(pl)  pl:CreateAmbience("gloomwalkerambience")  end   function CLASS:OnKilled(pl, attacker, inflictor, suicide, headshot, dmginfo)  local pos = pl:WorldSpaceCenter()   for i=1, 20 do  local ent = ents.CreateLimited("prop_playergib")  if ent:IsValid() then  ent:SetPos(pos + VectorRand() * 12)  ent:SetAngles(VectorRand():Angle())  ent:SetGibType(math.random(3, #GAMEMODE.HumanGibs))  ent:Spawn()   local phys = ent:GetPhysicsObject()  if phys and phys:IsValid() then  phys:ApplyForceOffset(VectorRand():GetNormalized() * math.Rand(8000, 13000), pos)  end  end  end   local effectdata = EffectData()  effectdata:SetOrigin(pos)  effectdata:SetNormal(pl:GetUp())  effectdata:SetEntity(pl)  util.Effect("death_doomcrab", effectdata, nil, true)   return true  end end  local MuscularBones = {  ["ValveBiped.Bip01_R_Upperarm"] = Vector(2.3, 2.3, 2),  ["ValveBiped.Bip01_R_Shoulder"] = Vector(2.3, 2.3, 2),  ["ValveBiped.Bip01_R_Forearm"] = Vector(2.7, 2.6, 2.6),  ["ValveBiped.Bip01_L_Upperarm"] = Vector(2.3, 2.3, 2),  ["ValveBiped.Bip01_L_Shoulder"] = Vector(2.3, 2.3, 2),  ["ValveBiped.Bip01_L_Forearm"] = Vector(2.7, 2.3, 2.3),  ["ValveBiped.Bip01_L_Hand"] = Vector(2.1, 3.6, 3),  ["ValveBiped.Bip01_R_Hand"] = Vector(2.1, 3.6, 3),  ["ValveBiped.Bip01_Spine2"] = Vector(2.1, 2.0, 2.3),  ["ValveBiped.Bip01_Spine4"] = Vector(2.1, 2.0, 2.3),  ["ValveBiped.Bip01_Spine1"] = Vector(2.1, 2.0, 2.3) }  local ToZero = {  "ValveBiped.Bip01_L_Thigh",  "ValveBiped.Bip01_R_Thigh",  "ValveBiped.Bip01_L_Calf",  "ValveBiped.Bip01_R_Calf",  "ValveBiped.Bip01_L_Foot",  "ValveBiped.Bip01_R_Foot",  "ValveBiped.Bip01_Pelvis",  "ValveBiped.forward",  "ValveBiped.Bip01_Spine",  "ValveBiped.Bip01_L_Toe0",  "ValveBiped.Bip01_R_Toe0" }  local vecSpineOffset = Vector(6, 0, 0) local SpineBones = {"ValveBiped.Bip01_Spine2", "ValveBiped.Bip01_Spine4", "ValveBiped.Bip01_Spine1"}  function CLASS:BuildBonePositions(pl)  for bonename, newscale in pairs(MuscularBones) do  local boneid = pl:LookupBone(bonename)  if boneid and boneid > 0 then  pl:ManipulateBoneScale(boneid, newscale)  end  end   for _, bone in pairs(SpineBones) do  local spineid = pl:LookupBone(bone)  if spineid and spineid > 0 then  pl:ManipulateBonePosition(spineid, vecSpineOffset)  end  end   for _, bonename in pairs(ToZero) do  local boneid = pl:LookupBone(bonename)  if boneid and boneid > 0 then  pl:ManipulateBoneScale(boneid, vector_tiny)  end  end end  if not CLIENT then return end  CLASS.Icon = "zombiesurvival/killicons/poisonzombie" CLASS.IconColor = Color(66, 0, 0)  local matTar = CreateMaterial("gloomwalk", "VertexLitGeneric", {  ["$basetexture"] = "models/leech/leech.vtf",  ["$normalmapalphaenvmapmask"] = 1,  ["$bumpmap"] = "models/flesh_nrm",  ["$halflambert"] = 1,  ["$phong"] = 1,  ["$phongboost"] = 1,  ["$phongfresnelranges"] = "[1 2.5 5]",  ["$phongexponent"] = 50 })  function CLASS:GetAlpha(pl)  local eyepos = EyePos()  local nearest = pl:WorldSpaceCenter()   local dist_alpha = 1 - (eyepos:DistToSqr(nearest) / 129600)   return math.min(0.25, dist_alpha) end  function CLASS:PrePlayerDraw(pl)  local alpha = self:GetAlpha(pl)  if alpha == 0 then return true end   render.SetBlend(alpha)  render.SetColorModulation(0.2, 0.4, 0.3)  render.ModelMaterialOverride(matTar)   if render.SupportsVertexShaders_2_0() then  local normal = pl:GetUp()  render.EnableClipping(true)  render.PushCustomClipPlane(normal, normal:Dot(pl:GetPos() + normal * 16))  end end  function CLASS:PostPlayerDraw(pl)  render.SetColorModulation(1, 1, 1)  render.ModelMaterialOverride()  render.SetBlend(1)   if render.SupportsVertexShaders_2_0() then  render.PopCustomClipPlane()  render.EnableClipping(false)  end end