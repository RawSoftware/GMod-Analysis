CLASS.Name = "Heresiarch" CLASS.TranslationName = "class_heresiarch" CLASS.Description = "description_eradicator" CLASS.Help = "controls_eradicator"  CLASS.Wave = 6 / 6  CLASS.Health = 3900 CLASS.Speed = 150 CLASS.Unlocked = true CLASS.Hidden = true  CLASS.GreatEvil = true  CLASS.CanTaunt = true  CLASS.KnockbackScale = 0 CLASS.FearPerInstance = 1  CLASS.Points = (CLASS.Health/GM.HumanoidZombiePointRatio)/1.5  CLASS.SWEP = "weapon_zs_heresiarch"  CLASS.Model = Model("models/zombiesurvival/ticklemonster.mdl")    CLASS.VoicePitch = 0.6  CLASS.ModelScale = 1.1  CLASS.NoHideMainModel = true CLASS.CanFeignDeath = true  local CurTime = CurTime local math_random = math.random local math_ceil = math.ceil local math_Clamp = math.Clamp local math_min = math.min local math_max = math.max local ACT_HL2MP_ZOMBIE_SLUMP_RISE = ACT_HL2MP_ZOMBIE_SLUMP_RISE local ACT_HL2MP_SWIM_PISTOL = ACT_HL2MP_SWIM_PISTOL local ACT_HL2MP_RUN_ZOMBIE = ACT_HL2MP_RUN_ZOMBIE local ACT_HL2MP_IDLE_CROUCH_ZOMBIE = ACT_HL2MP_IDLE_CROUCH_ZOMBIE local ACT_HL2MP_IDLE_ZOMBIE = ACT_HL2MP_IDLE_ZOMBIE local ACT_HL2MP_WALK_CROUCH_ZOMBIE_01 = ACT_HL2MP_WALK_CROUCH_ZOMBIE_01 local ACT_HL2MP_WALK_ZOMBIE_01 = ACT_HL2MP_WALK_ZOMBIE_01 local GESTURE_SLOT_ATTACK_AND_RELOAD = GESTURE_SLOT_ATTACK_AND_RELOAD local PLAYERANIMEVENT_ATTACK_PRIMARY = PLAYERANIMEVENT_ATTACK_PRIMARY local ACT_GMOD_GESTURE_RANGE_ZOMBIE = ACT_GMOD_GESTURE_RANGE_ZOMBIE local ACT_INVALID = ACT_INVALID local PLAYERANIMEVENT_RELOAD = PLAYERANIMEVENT_RELOAD local ACT_GMOD_GESTURE_TAUNT_ZOMBIE = ACT_GMOD_GESTURE_TAUNT_ZOMBIE local STEPSOUNDTIME_NORMAL = STEPSOUNDTIME_NORMAL local STEPSOUNDTIME_WATER_FOOT = STEPSOUNDTIME_WATER_FOOT local STEPSOUNDTIME_ON_LADDER = STEPSOUNDTIME_ON_LADDER local STEPSOUNDTIME_WATER_KNEE = STEPSOUNDTIME_WATER_FOOT local HITGROUP_HEAD = HITGROUP_HEAD local HITGROUP_LEFTLEG = HITGROUP_LEFTLEG local HITGROUP_RIGHTLEG = HITGROUP_RIGHTLEG local DMG_ALWAYSGIB = DMG_ALWAYSGIB local DMG_BURN = DMG_BURN local DMG_CRUSH = DMG_CRUSH  function CLASS:KnockedDown(pl, status, exists)  pl:AnimResetGestureSlot(GESTURE_SLOT_ATTACK_AND_RELOAD) end  local StepLeftSounds = {  "npc/zombie/foot1.wav",  "npc/zombie/foot2.wav" } local StepRightSounds = {  "npc/zombie/foot2.wav",  "npc/zombie/foot3.wav" } function CLASS:PlayerFootstep(pl, vFootPos, iFoot, strSoundName, fVolume, pFilter)  if iFoot == 0 then  pl:EmitSound(StepLeftSounds[math_random(#StepLeftSounds)], 70)  else  pl:EmitSound(StepRightSounds[math_random(#StepRightSounds)], 70)  end   return true end  function CLASS:PlayPainSound(pl)  pl:EmitSound("npc/combine_soldier/pain"..math_random(3)..".wav", 75, math.Rand(60, 65))  pl.NextPainSound = CurTime() + 0.5   return true end  function CLASS:PlayDeathSound(pl)  pl:EmitSound("npc/combine_gunship/gunship_pain.wav", 75, math.Rand(70, 75))   return true end  function CLASS:PlayerStepSoundTime(pl, iType, bWalking)  if iType == STEPSOUNDTIME_NORMAL or iType == STEPSOUNDTIME_WATER_FOOT then  return 625 - pl:GetVelocity():Length()  elseif iType == STEPSOUNDTIME_ON_LADDER then  return 600  elseif iType == STEPSOUNDTIME_WATER_KNEE then  return 750  end   return 450 end  function CLASS:CalcMainActivity(pl, velocity)  local revive = pl.Revive  if revive and revive:IsValid() then  return ACT_HL2MP_ZOMBIE_SLUMP_RISE, -1  end   local feign = pl.FeignDeath  if feign and feign:IsValid() then  if feign:GetDirection() == DIR_BACK then  return 1, pl:LookupSequence("zombie_slump_rise_02_fast")  end   return ACT_HL2MP_ZOMBIE_SLUMP_RISE, -1  end   if pl:WaterLevel() >= 3 then  return ACT_HL2MP_SWIM_PISTOL, -1  end   local wep = pl:GetActiveWeapon()  if wep:IsValid() and wep.IsMoaning and wep:IsMoaning() then  return ACT_HL2MP_RUN_ZOMBIE, -1  end   if velocity:Length2DSqr() <= 1 then  if pl:Crouching() and pl:OnGround() then  return ACT_HL2MP_IDLE_CROUCH_ZOMBIE, -1  end   return ACT_HL2MP_IDLE_ZOMBIE, -1  end   if pl:Crouching() and pl:OnGround() then  return ACT_HL2MP_WALK_CROUCH_ZOMBIE_01 - 1 + math_ceil((CurTime() / 4 + pl:EntIndex()) % 3), -1  end   return ACT_HL2MP_WALK_ZOMBIE_01 - 1 + math_ceil((CurTime() / 3 + pl:EntIndex()) % 3), -1 end  function CLASS:UpdateAnimation(pl, velocity, maxseqgroundspeed)  local revive = pl.Revive  if revive and revive:IsValid() then  pl:SetCycle(0.4 + (1 - math_Clamp((revive:GetReviveTime() - CurTime()) / revive:GetReviveAnim(), 0, 1)) * 0.6)  pl:SetPlaybackRate(0)  return true  end   local feign = pl.FeignDeath  if feign and feign:IsValid() then  if feign:GetState() == 1 then  pl:SetCycle(1 - math_max(feign:GetStateEndTime() - CurTime(), 0) * 0.666)  else  pl:SetCycle(math_max(feign:GetStateEndTime() - CurTime(), 0) * 0.666)  end  pl:SetPlaybackRate(0)  return true  end   local len2d = velocity:Length()  if len2d > 1 then  local wep = pl:GetActiveWeapon()  if wep:IsValid() and wep.IsMoaning and wep:IsMoaning() then  pl:SetPlaybackRate(math_min(len2d / maxseqgroundspeed, 3))  else  pl:SetPlaybackRate(math_min(len2d / maxseqgroundspeed * 0.5, 3))  end  else  pl:SetPlaybackRate(1)  end   return true end  function CLASS:DoAnimationEvent(pl, event, data)  if event == PLAYERANIMEVENT_ATTACK_PRIMARY then  pl:DoZombieAttackAnim(data)  return ACT_INVALID  elseif event == PLAYERANIMEVENT_RELOAD then  pl:AnimRestartGesture(GESTURE_SLOT_ATTACK_AND_RELOAD, ACT_GMOD_GESTURE_TAUNT_ZOMBIE, true)  return ACT_INVALID  end end  if SERVER then  function CLASS:ProcessDamage(pl, dmginfo)  local dmg = dmginfo:GetDamage()  local attacker = dmginfo:GetAttacker()   if pl:GetStatus("redmarrow") and attacker:IsPlayer() and attacker:Team() == TEAM_HUMAN then  dmginfo:SetDamage(0)  dmginfo:ScaleDamage(0)  end   if pl.EradiVived then return end  if dmg < pl:Health() then return end   dmginfo:SetDamage(0)  pl:SetHealth(10)   local status = pl:GiveStatus("revive_slump")  if status then  status:SetReviveTime(CurTime() + 3)  status:SetReviveAnim(3.15)  status:SetReviveHeal(1200)   pl.EradiVived = true   pl:GiveStatus("redmarrow", 12)  pl:GiveStatus("zombie_battlecry", 12)  pl:GiveStatus("meta_patientzero")  pl:GiveStatus("meta_spittering")  pl:GiveStatus("meta_virulent")   local worldspace = pl:WorldSpaceCenter()   util.ScreenShake(worldspace, 5, 5, 1, 300)   local effectdata = EffectData()  effectdata:SetOrigin(worldspace)  util.Effect("explosion_bonemesh", effectdata)   pl:EmitSound("npc/fast_zombie/fz_scream1.wav", 75, math.random(60,70), 0.5)  pl:EmitSound("npc/fast_zombie/fz_scream1.wav", 75, math.random(70,80), 0.5)   pl:GetActiveWeapon():SetDTBool(10, true)  pl:GetActiveWeapon().HeresiarchCounter = 4   timer.Simple(3, function()  for i = 0, 6 do  local ent = ents.Create("projectile_darklightning")  if ent:IsValid() then  ent:SetPos(worldspace)  ent:SetOwner(pl)  ent:Spawn()   local phys = ent:GetPhysicsObject()  if phys:IsValid() then  local ang = pl:GetForward():Angle()  ang:RotateAroundAxis(ang:Right(), i * (360/6))   phys:SetVelocityInstantaneous(ang:Forward() * 90)  end  end  end  end)  end   return true  end   function CLASS:OnSpawned(pl)  pl:CreateAmbience("heresiarchambience")  pl.EradiVived = false  end   function CLASS:OnKilled(pl, attacker, inflictor, suicide, headshot, dmginfo)  local pos = pl:WorldSpaceCenter()   for i=1, 20 do  local ent = ents.CreateLimited("prop_playergib")  if ent:IsValid() then  ent:SetPos(pos + VectorRand() * 12)  ent:SetAngles(VectorRand():Angle())  ent:SetGibType(math.random(3, #GAMEMODE.HumanGibs))  ent:Spawn()   local phys = ent:GetPhysicsObject()  if phys and phys:IsValid() then  phys:ApplyForceOffset(VectorRand():GetNormalized() * math.Rand(8000, 13000), pos)  end  end  end   local effectdata = EffectData()  effectdata:SetOrigin(pos)  effectdata:SetNormal(pl:GetUp())  effectdata:SetEntity(pl)  util.Effect("death_doomcrab", effectdata, nil, true)   return true  end end  if not CLIENT then return end  CLASS.Icon = "zombiesurvival/killicons/poisonzombie" CLASS.IconColor = Color(66, 0, 0)  function CLASS:PrePlayerDraw(pl)  render.SetBlend(0) end  function CLASS:PostPlayerDraw(pl)  render.SetBlend(1) end 