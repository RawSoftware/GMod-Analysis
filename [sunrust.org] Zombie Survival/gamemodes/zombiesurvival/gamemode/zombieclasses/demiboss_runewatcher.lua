CLASS.Name = "Rune Watcher" CLASS.TranslationName = "class_rune_watcher" CLASS.Description = "description_rune_watcher" CLASS.Help = "controls_rune_watcher"  CLASS.Health = 600 CLASS.Wave = 0  CLASS.SWEP = "weapon_zs_runewatcher" CLASS.Model = Model("models/crow.mdl") CLASS.Speed = 150 CLASS.JumpPower = 230  CLASS.ModelScale = 1.5  CLASS.Demiboss = true CLASS.Hidden = true CLASS.Unlocked = false CLASS.NoPick = true  CLASS.Special = true  CLASS.PainSounds = {"NPC_Crow.Pain"} CLASS.DeathSounds = {"NPC_Crow.Die"}  CLASS.Hull = {Vector(-16, -16, 0), Vector(16, 16, 32)} CLASS.HullDuck = {Vector(-16, -16, 0), Vector(16, 16, 32)} CLASS.ViewOffset = Vector(0,0,8) CLASS.ViewOffsetDucked = Vector(0,0,8) CLASS.CrouchedWalkSpeed = 1 CLASS.StepSize = 8 CLASS.Mass = 2  CLASS.Demiboss = true CLASS.Wave = 0  CLASS.Points = CLASS.Health/GM.HumanoidZombiePointRatio CLASS.Cat = ZCLASSCAT_SUPPORT  CLASS.NoGibs = true CLASS.NoCollideAll = true CLASS.NoFallDamage = true CLASS.NoFallSlowdown = true  local ACT_RUN = ACT_RUN local ACT_IDLE = ACT_IDLE local ACT_FLY = ACT_FLY local IN_JUMP = IN_JUMP local IN_MOVELEFT = IN_MOVELEFT local IN_MOVERIGHT = IN_MOVERIGHT local IN_FORWARD = IN_FORWARD  function CLASS:ScalePlayerDamage(pl, hitgroup, dmginfo)  return true end  function CLASS:PlayerFootstep(pl, vFootPos, iFoot, strSoundName, fVolume, pFilter)  return true end  function CLASS:CalcMainActivity(pl, velocity)  if pl:OnGround() then  local wep = pl:GetActiveWeapon()  if wep:IsValid() and wep.IsPecking and wep:IsPecking() then  return 1, 5  end   if velocity:Length2DSqr() > 1 then  return ACT_RUN, -1  end   return ACT_IDLE, -1  end   if velocity:LengthSqr() > 40000 then  return ACT_FLY, -1  end   return 1, 7 end  function CLASS:UpdateAnimation(pl, velocity, maxseqgroundspeed)  pl:FixModelAngles(velocity)  pl:SetPlaybackRate(0.6)  return true end  function CLASS:DoAnimationEvent(pl, event, data)  if event == PLAYERANIMEVENT_ATTACK_PRIMARY then  pl:AnimRestartGesture(GESTURE_SLOT_ATTACK_AND_RELOAD, ACT_MELEE_ATTACK1, true)  return ACT_INVALID  end end  function CLASS:Move(pl, mv)  if not pl:GetActiveWeapon().IsCrow then return end   if not pl:IsOnGround() and pl:KeyDown(IN_JUMP) then  local dir = mv:GetAngles()    if pl:KeyDown(IN_MOVELEFT) then  dir:RotateAroundAxis(dir:Up(), 20)  elseif pl:KeyDown(IN_MOVERIGHT) then  dir:RotateAroundAxis(dir:Up(), -20)  end   if pl:KeyDown(IN_FORWARD) then  mv:SetVelocity(dir:Forward() * 350)  else  mv:SetVelocity(dir:Forward() * 150)  end   return true  end end  if SERVER then  function CLASS:SwitchedAway(pl)  pl:SetAllowFullRotation(false)  end   function CLASS:OnKilled(pl, attacker, inflictor, suicide, headshot, dmginfo)  pl:SetAllowFullRotation(false)   if pl:Health() < -45 then  local amount = pl:OBBMaxs():Length()  local vel = pl:GetVelocity()  util.Blood(pl:LocalToWorld(pl:OBBCenter()), math.Rand(amount * 0.25, amount * 0.5), vel:GetNormalized(), vel:Length() * 0.75)   return true  elseif not pl.KnockedDown then  pl:CreateRagdoll()  end  end end  if not CLIENT then return end  function CLASS:PrePlayerDraw(pl)  render.SetBlend(0) end  function CLASS:PostPlayerDraw(pl)  render.SetBlend(1) end  CLASS.Icon = "zombiesurvival/killicons/rune_watcher2"  function CLASS:CreateMove(pl, cmd)  local wep = pl:GetActiveWeapon()       if wep:IsValid() then         if wep.m_ViewAngles and not pl:IsOnGround() then             local maxdiff = FrameTime() * 150             local mindiff = -maxdiff             local originalangles = wep.m_ViewAngles             local viewangles = cmd:GetViewAngles()              local diff = math.AngleDifference(viewangles.yaw, originalangles.yaw)             if diff > maxdiff or diff < mindiff then                 viewangles.yaw = math.NormalizeAngle(originalangles.yaw + math.Clamp(diff, mindiff, maxdiff))             end              wep.m_ViewAngles = viewangles              cmd:SetViewAngles(viewangles)         elseif pl:IsOnGround() then             wep.m_ViewAngles = pl:EyeAngles()         end  end end 