CLASS.Name = "Skeleton Warrior" CLASS.TranslationName = "class_skeleton_warrior" CLASS.Description = "description_skeleton_warrior" CLASS.Help = "controls_skeleton_warrior"  CLASS.Health = 790 CLASS.Speed = 180  CLASS.Demiboss = true CLASS.Cat = ZCLASSCAT_ASSAULT  CLASS.CanTaunt = true  CLASS.Points = CLASS.Health/GM.HumanoidZombiePointRatio  CLASS.SWEP = "weapon_zs_skeletonwarrior"  CLASS.Model = Model("models/player/skeleton.mdl")  CLASS.VoicePitch = 0.8  CLASS.CanFeignDeath = false  CLASS.BloodColor = -1  CLASS.Skeletal = true CLASS.SkeletalRes = true  CLASS.KnockbackScale = 0.5  CLASS.FearPerInstance = 0.4  CLASS.CanFeignDeath = false  local math_random = math.random   local math_min = math.min local math_max = math.max local math_abs = math.abs local math_Clamp = math.Clamp local string_format = string.format local bit_band = bit.band local DMG_BULLET = DMG_BULLET local ACT_HL2MP_ZOMBIE_SLUMP_RISE = ACT_HL2MP_ZOMBIE_SLUMP_RISE local ACT_HL2MP_SWIM_PISTOL = ACT_HL2MP_SWIM_PISTOL local ACT_HL2MP_RUN_ZOMBIE = ACT_HL2MP_RUN_ZOMBIE local ACT_HL2MP_IDLE_CROUCH_ZOMBIE = ACT_HL2MP_IDLE_CROUCH_ZOMBIE local ACT_HL2MP_IDLE_ZOMBIE = ACT_HL2MP_IDLE_ZOMBIE local ACT_HL2MP_WALK_CROUCH_ZOMBIE_01 = ACT_HL2MP_WALK_CROUCH_ZOMBIE_01 local ACT_HL2MP_WALK_ZOMBIE_01 = ACT_HL2MP_WALK_ZOMBIE_01  function CLASS:KnockedDown(pl, status, exists)  pl:AnimResetGestureSlot(GESTURE_SLOT_ATTACK_AND_RELOAD) end  function CLASS:PlayerFootstep(pl, vFootPos, iFoot, strSoundName, fVolume, pFilter)  if math_random(2) == 1 then  pl:EmitSound("npc/barnacle/neck_snap1.wav", 65, math_random(135, 150), 0.27)  else  pl:EmitSound("npc/barnacle/neck_snap2.wav", 65, math_random(135, 150), 0.27)  end   return true end  function CLASS:PlayPainSound(pl)  pl:EmitSound(string_format("npc/metropolice/pain%d.wav", math_random(4)), 65, math_random(70, 75))   return true end  function CLASS:PlayDeathSound(pl)  pl:EmitSound(string_format("npc/zombie/zombie_die%d.wav", math_random(3)), 75, math_random(122, 128))   return true end  function CLASS:CalcMainActivity(pl, velocity)  local feign = pl.FeignDeath  if feign and feign:IsValid() then  if feign:GetDirection() == DIR_BACK then  return 1, pl:LookupSequence("zombie_slump_rise_02_fast")  end   return ACT_HL2MP_ZOMBIE_SLUMP_RISE, -1  end end  function CLASS:UpdateAnimation(pl, velocity, maxseqgroundspeed)  local feign = pl.FeignDeath  if feign and feign:IsValid() then  if feign:GetState() == 1 then  pl:SetCycle(1 - math_max(feign:GetStateEndTime() - CurTime(), 0) * 0.666)  else  pl:SetCycle(math_max(feign:GetStateEndTime() - CurTime(), 0) * 0.666)  end  pl:SetPlaybackRate(0)  return true  end   local len = velocity:Length()  if len > 1 then  pl:SetPlaybackRate(math_min(len / maxseqgroundspeed, 3))  else  pl:SetPlaybackRate(1)  end   return true end  if SERVER then  function CLASS:ProcessDamage(pl, dmginfo)  local attacker, inflictor, damage = dmginfo:GetAttacker(), dmginfo:GetInflictor(), dmginfo:GetDamage()  local dist_sqr = attacker:WorldSpaceCenter():DistToSqr(pl:WorldSpaceCenter())   dmginfo:SetDamage(dmginfo:GetDamage() * (dist_sqr >= 200000 and 0.1 or 1))   local wep, mywep = attacker:IsPlayer() and attacker:GetActiveWeapon(), pl:GetActiveWeapon()  if wep and wep:IsValid() and wep == inflictor then  local dif = math_abs(pl:GetForward():Angle().yaw - attacker:GetForward():Angle().yaw)  if mywep and mywep:IsValid() and mywep.IsBlocking and mywep:IsBlocking() and not util.AngleCompCheck(dif) then  dmginfo:SetDamage(0)    if wep.IsMelee then  if mywep.GetCounterEnd and mywep:GetCounterEnd() > 0 then  mywep:SetCounterEnd(CurTime())  end   local status = attacker:GiveStatus("debuff_enfeeble", math_Clamp(damage * 0.04, 2, 5), pl)  if status and status:IsValid() then  status.Applier = pl  end  attacker:AddLegDamage(20)  attacker:AddArmDamage(20)   pl:EmitSound("ambient/machines/floodgate_stop1.wav", 70, math_random(160, 170))  end  end  end  end   function CLASS:OnSpawned(pl)  local oldhands = pl:GetHands()  if IsValid(oldhands) then  oldhands:Remove()  end   local hands = ents.Create("zs_hands")  if hands:IsValid() then  hands:DoSetup(pl)  hands:Spawn()  end  end end  if CLIENT then  CLASS.Icon = "zombiesurvival/killicons/skeleton_warrior"   local render_ModelMaterialOverride = render.ModelMaterialOverride   local matSheet = Material("models/props_c17/doll01")  function CLASS:DrawHands(pl, hands)  render_ModelMaterialOverride(matSheet)   hands:DrawModel()   render_ModelMaterialOverride(nil)   return true  end end 