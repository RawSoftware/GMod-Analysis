CLASS.Name = "Blood Angel" CLASS.TranslationName = "class_bloodangel" CLASS.Description = "description_eradicator" CLASS.Help = "controls_eradicator"  CLASS.Wave = 6 / 6  CLASS.Health = 8000 CLASS.Speed = 205 CLASS.Unlocked = true CLASS.Hidden = true  CLASS.CanTaunt = true  CLASS.GreatEvil = true  CLASS.KnockbackScale = 0 CLASS.FearPerInstance = 1  CLASS.Points = (CLASS.Health/GM.HumanoidZombiePointRatio)/1.5  CLASS.SWEP = "weapon_zs_ba"  CLASS.Model = Model("models/player/charple.mdl") CLASS.OverrideModel = Model("models/player/skeleton.mdl")  CLASS.VoicePitch = 0.6  CLASS.NoHideMainModel = true  local CurTime = CurTime local math_random = math.random local math_ceil = math.ceil local math_Clamp = math.Clamp local math_min = math.min local math_max = math.max local ACT_HL2MP_ZOMBIE_SLUMP_RISE = ACT_HL2MP_ZOMBIE_SLUMP_RISE local ACT_HL2MP_SWIM_PISTOL = ACT_HL2MP_SWIM_PISTOL local ACT_HL2MP_RUN_ZOMBIE = ACT_HL2MP_RUN_ZOMBIE local ACT_HL2MP_IDLE_CROUCH_ZOMBIE = ACT_HL2MP_IDLE_CROUCH_ZOMBIE local ACT_HL2MP_IDLE_ZOMBIE = ACT_HL2MP_IDLE_ZOMBIE local ACT_HL2MP_WALK_CROUCH_ZOMBIE_01 = ACT_HL2MP_WALK_CROUCH_ZOMBIE_01 local ACT_HL2MP_WALK_ZOMBIE_01 = ACT_HL2MP_WALK_ZOMBIE_01 local GESTURE_SLOT_ATTACK_AND_RELOAD = GESTURE_SLOT_ATTACK_AND_RELOAD local PLAYERANIMEVENT_ATTACK_PRIMARY = PLAYERANIMEVENT_ATTACK_PRIMARY local ACT_GMOD_GESTURE_RANGE_ZOMBIE = ACT_GMOD_GESTURE_RANGE_ZOMBIE local ACT_INVALID = ACT_INVALID local PLAYERANIMEVENT_RELOAD = PLAYERANIMEVENT_RELOAD local ACT_GMOD_GESTURE_TAUNT_ZOMBIE = ACT_GMOD_GESTURE_TAUNT_ZOMBIE local STEPSOUNDTIME_NORMAL = STEPSOUNDTIME_NORMAL local STEPSOUNDTIME_WATER_FOOT = STEPSOUNDTIME_WATER_FOOT local STEPSOUNDTIME_ON_LADDER = STEPSOUNDTIME_ON_LADDER local STEPSOUNDTIME_WATER_KNEE = STEPSOUNDTIME_WATER_FOOT local HITGROUP_HEAD = HITGROUP_HEAD local HITGROUP_LEFTLEG = HITGROUP_LEFTLEG local HITGROUP_RIGHTLEG = HITGROUP_RIGHTLEG local DMG_ALWAYSGIB = DMG_ALWAYSGIB local DMG_BURN = DMG_BURN local DMG_CRUSH = DMG_CRUSH  function CLASS:KnockedDown(pl, status, exists)  pl:AnimResetGestureSlot(GESTURE_SLOT_ATTACK_AND_RELOAD) end  local StepSounds = {  "npc/zombie/foot1.wav",  "npc/zombie/foot2.wav",  "npc/zombie/foot3.wav" } function CLASS:PlayerFootstep(pl, vFootPos, iFoot, strSoundName, fVolume, pFilter)  pl:EmitSound(StepSounds[math_random(#StepSounds)], 77, 50)   if iFoot == 0 then  pl:EmitSound("^npc/strider/strider_step4.wav", 90, math_random(90, 110))  else  pl:EmitSound("^npc/strider/strider_step5.wav", 90, math_random(90, 110))  end   return true end  function CLASS:PlayPainSound(pl)  pl:EmitSound("npc/combine_soldier/pain"..math_random(3)..".wav", 75, math.Rand(60, 65))  pl.NextPainSound = CurTime() + 0.5   return true end  function CLASS:PlayDeathSound(pl)  pl:EmitSound("npc/stalker/go_alert2a.wav", 75, 75, 0.5)  pl:EmitSound("npc/stalker/go_alert2a.wav", 75, 85, 0.5)   return true end   function CLASS:PlayerStepSoundTime(pl, iType, bWalking)  if iType == STEPSOUNDTIME_NORMAL or iType == STEPSOUNDTIME_WATER_FOOT then  return 825 - pl:GetVelocity():Length()  elseif iType == STEPSOUNDTIME_ON_LADDER then  return 600  elseif iType == STEPSOUNDTIME_WATER_KNEE then  return 750  end   return 750 end  function CLASS:CalcMainActivity(pl, velocity)  local revive = pl.Revive  if revive and revive:IsValid() then  return ACT_HL2MP_ZOMBIE_SLUMP_RISE, -1  end   local feign = pl.FeignDeath  if feign and feign:IsValid() then  if feign:GetDirection() == DIR_BACK then  return 1, pl:LookupSequence("zombie_slump_rise_02_fast")  end   return ACT_HL2MP_ZOMBIE_SLUMP_RISE, -1  end   if pl:WaterLevel() >= 3 then  return ACT_HL2MP_SWIM_PISTOL, -1  end   local wep = pl:GetActiveWeapon()   if velocity:Length2DSqr() <= 1 then  if pl:Crouching() and pl:OnGround() then  return ACT_HL2MP_IDLE_CROUCH_ZOMBIE, -1  end   return ACT_HL2MP_IDLE_ZOMBIE, -1  end   return ACT_HL2MP_WALK_ZOMBIE_01 - 1 + math_ceil((CurTime() / 3 + pl:EntIndex()) % 3), -1 end  function CLASS:UpdateAnimation(pl, velocity, maxseqgroundspeed)  local revive = pl.Revive  if revive and revive:IsValid() then  pl:SetCycle(0.4 + (1 - math_Clamp((revive:GetReviveTime() - CurTime()) / revive:GetReviveAnim(), 0, 1)) * 0.6)  pl:SetPlaybackRate(0)  return true  end   local feign = pl.FeignDeath  if feign and feign:IsValid() then  if feign:GetState() == 1 then  pl:SetCycle(1 - math_max(feign:GetStateEndTime() - CurTime(), 0) * 0.666)  else  pl:SetCycle(math_max(feign:GetStateEndTime() - CurTime(), 0) * 0.666)  end  pl:SetPlaybackRate(0)  return true  end   local len2d = velocity:Length()  if len2d > 1 then  local wep = pl:GetActiveWeapon()  if wep:IsValid() and wep.IsMoaning and wep:IsMoaning() then  pl:SetPlaybackRate(math_min(len2d / maxseqgroundspeed, 3))  elseif wep.GetBlastTime and wep:GetBlastTime() ~= 0 then  pl:SetPlaybackRate(math_min(len2d / maxseqgroundspeed * 0.8, 3))  else  pl:SetPlaybackRate(math_min(len2d / maxseqgroundspeed * 0.4, 3))  end  else  pl:SetPlaybackRate(1)  end   pl:SetPlaybackRate(pl:GetPlaybackRate() * 0.75)   return true end  function CLASS:DoAnimationEvent(pl, event, data)  if event == PLAYERANIMEVENT_ATTACK_PRIMARY or event == PLAYERANIMEVENT_ATTACK_SECONDARY then  pl:DoZombieAttackAnim(data)  return ACT_INVALID  end end  if SERVER then  function CLASS:OnSpawned(pl)  pl:CreateAmbience("baambience")  end   function CLASS:OnKilled(pl, attacker, inflictor, suicide, headshot, dmginfo)  local pos = pl:WorldSpaceCenter()   for i=1, 20 do  local ent = ents.CreateLimited("prop_playergib")  if ent:IsValid() then  ent:SetPos(pos + VectorRand() * 12)  ent:SetAngles(VectorRand():Angle())  ent:SetGibType(math.random(3, #GAMEMODE.HumanGibs))  ent:Spawn()   local phys = ent:GetPhysicsObject()  if phys and phys:IsValid() then  phys:ApplyForceOffset(VectorRand():GetNormalized() * math.Rand(8000, 13000), pos)  end  end  end   local effectdata = EffectData()  effectdata:SetOrigin(pos)  effectdata:SetNormal(pl:GetUp())  effectdata:SetEntity(pl)  util.Effect("death_extinctioncrab", effectdata, nil, true)   return true  end   function CLASS:ProcessDamage(pl, dmginfo)  if dmginfo:GetDamage() >= 20 and pl:CooldownReady("BloodAngelExplosion") then  pl:AddNewCooldown("BloodAngelExplosion", 12)   local ent = ents.Create("projectile_vd")  if ent:IsValid() then  ent:SetPos(pl:WorldSpaceCenter())  ent:SetOwner(pl)  ent:Spawn()  end  end  end end  local MuscularBones = {  ["ValveBiped.Bip01_R_Upperarm"] = Vector(4, 0.6, 14),  ["ValveBiped.Bip01_R_Forearm"] = Vector(1.7, 1.6, 1.5),  ["ValveBiped.Bip01_L_Upperarm"] = Vector(4, 0.6, 14),  ["ValveBiped.Bip01_L_Forearm"] = Vector(1.7, 1.6, 1.5),  ["ValveBiped.Bip01_L_Hand"] = Vector(1.7, 1.6, 1.5),  ["ValveBiped.Bip01_R_Hand"] = Vector(1.7, 1.6, 1.5),  ["ValveBiped.Bip01_Head1"] = Vector(2.3, 1.3, 1.3),  ["ValveBiped.Bip01_L_Thigh"] = Vector(1, 2, 3),  ["ValveBiped.Bip01_R_Thigh"] = Vector(1, 2, 3),  ["ValveBiped.Bip01_L_Calf"] = Vector(1, 2, 3),  ["ValveBiped.Bip01_R_Calf"] = Vector(1, 2, 3),  ["ValveBiped.Bip01_L_Foot"] = Vector(1, 2, 3),  ["ValveBiped.Bip01_R_Foot"] = Vector(1, 2, 3),  ["ValveBiped.Bip01_L_Forearm"] = Vector(1, 2, 3), }  local vecSpineOffset = Vector(6, 0, 0) local SpineBones = {"ValveBiped.Bip01_Spine2", "ValveBiped.Bip01_Spine4", "ValveBiped.Bip01_Spine1"}  local vecArmOffset = Vector(6, 0, 0) local ArmBones = {"ValveBiped.Bip01_L_Upperarm", "ValveBiped.Bip01_R_Upperarm"}  function CLASS:BuildBonePositions(pl)  for bonename, newscale in pairs(MuscularBones) do  local boneid = pl:LookupBone(bonename)  if boneid and boneid > 0 then  pl:ManipulateBoneScale(boneid, newscale)  end  end   for _, bone in pairs(SpineBones) do  local spineid = pl:LookupBone(bone)  if spineid and spineid > 0 then  pl:ManipulateBonePosition(spineid, vecSpineOffset)  end  end   for _, bone in pairs(ArmBones) do  local spineid = pl:LookupBone(bone)  if spineid and spineid > 0 then  pl:ManipulateBonePosition(spineid, vecArmOffset)  end  end end  if not CLIENT then return end  CLASS.Icon = "zombiesurvival/killicons/poisonzombie" CLASS.IconColor = Color(66, 0, 0)  local matFlesh = Material("Models/Barnacle/barnacle_sheet") function CLASS:PrePlayerDraw(pl)  render.SetColorModulation(0.35, 0.15, 0.15)  render.ModelMaterialOverride(matFlesh) end  local colGlow = Color(115, 190, 30) local matGlow = Material("sprites/glow04_noz") local matGlow2 = Material("effects/yellowflare") local vecEyeLeft = Vector(11, 5.5, -1.5) local vecEyeRight = Vector(11, 5.5, 1.5)  function CLASS:PostPlayerDraw(pl)  render.SetColorModulation(1, 1, 1)  render.ModelMaterialOverride() end  local matSkin = Material("Models/charple/charple4_sheet.vtf") function CLASS:PrePlayerDrawOverrideModel(pl)  render.SetColorModulation(0.8, 0.4, 0.4)  render.ModelMaterialOverride(matSkin) end  function CLASS:PostPlayerDrawOverrideModel(pl)  render.ModelMaterialOverride(nil)   if pl == MySelf and not pl:ShouldDrawLocalPlayer() or pl.SpawnProtection then return end   local pos, ang = pl:GetBonePositionMatrixed(6)  if pos then  render.SetMaterial(matGlow)  render.DrawSprite(LocalToWorld(vecEyeLeft, angle_zero, pos, ang), 16, 1, colGlow)  render.DrawSprite(LocalToWorld(vecEyeRight, angle_zero, pos, ang), 16, 1, colGlow)  render.SetMaterial(matGlow2)  render.DrawSprite(LocalToWorld(vecEyeLeft, angle_zero, pos, ang), 6, 6, colGlow)  render.DrawSprite(LocalToWorld(vecEyeRight, angle_zero, pos, ang), 6, 6, colGlow)  end end 