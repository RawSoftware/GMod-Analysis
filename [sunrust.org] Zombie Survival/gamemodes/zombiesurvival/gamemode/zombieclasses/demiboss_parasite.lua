CLASS.Name = "Parasite" CLASS.TranslationName = "class_parasite" CLASS.Description = "description_parasite" CLASS.Help = "controls_fast_zombie"  CLASS.Demiboss = true  CLASS.KnockbackScale = 0.5  CLASS.Health = 660 CLASS.Speed = 210  CLASS.KnockbackScale = 0  CLASS.FearPerInstance = 0.4  CLASS.Wave = 0  CLASS.SWEP = "weapon_zs_parasite"  CLASS.Model = Model("models/player/zombie_classic_hbfix.mdl") CLASS.OverrideModel = Model("models/player/zombie_fast.mdl")  CLASS.VoicePitch = 1.0   CLASS.NoHideMainModel = true  CLASS.Cat = ZCLASSCAT_ASSAULT CLASS.Points = CLASS.Health/GM.NoHeadboxZombiePointRatio  CLASS.KnockbackMultiplier = -1  CLASS.Hull = {Vector(-16, -16, 0), Vector(16, 16, 72)} CLASS.HullDuck = {Vector(-16, -16, 0), Vector(16, 16, 36)} CLASS.ViewOffset = Vector(0, 0, 50) CLASS.ViewOffsetDucked = Vector(0, 0, 24)  CLASS.NoFallDamage = true CLASS.NoFallSlowdown = true  local math_random = math.random local math_min = math.min local math_Clamp = math.Clamp local CurTime = CurTime local STEPSOUNDTIME_NORMAL = STEPSOUNDTIME_NORMAL local STEPSOUNDTIME_WATER_FOOT = STEPSOUNDTIME_WATER_FOOT local STEPSOUNDTIME_ON_LADDER = STEPSOUNDTIME_ON_LADDER local STEPSOUNDTIME_WATER_KNEE = STEPSOUNDTIME_WATER_KNEE local ACT_ZOMBIE_CLIMB_UP = ACT_ZOMBIE_CLIMB_UP local ACT_ZOMBIE_LEAP_START = ACT_ZOMBIE_LEAP_START local ACT_ZOMBIE_LEAPING = ACT_ZOMBIE_LEAPING local ACT_HL2MP_RUN_ZOMBIE = ACT_HL2MP_RUN_ZOMBIE local ACT_HL2MP_RUN_ZOMBIE_FAST = ACT_HL2MP_RUN_ZOMBIE_FAST local ACT_HL2MP_IDLE_CROUCH_ZOMBIE = ACT_HL2MP_IDLE_CROUCH_ZOMBIE local ACT_HL2MP_WALK_CROUCH_ZOMBIE_01 = ACT_HL2MP_WALK_CROUCH_ZOMBIE_01  function CLASS:Move(pl, mv)     local wep = pl:GetActiveWeapon()     if wep.Move and wep:Move(mv) then         return true     end      if mv:GetForwardSpeed() <= 0 then         mv:SetMaxSpeed(math_min(mv:GetMaxSpeed(), 140))         mv:SetMaxClientSpeed(math_min(mv:GetMaxClientSpeed(), 140))     end end  function CLASS:PlayerFootstep(pl, vFootPos, iFoot, strSoundName, fVolume, pFilter)     if iFoot == 0 then         pl:EmitSound("npc/antlion_guard/foot_light1.wav", 70, math_random(115, 120))     else         pl:EmitSound("npc/antlion_guard/foot_light2.wav", 70, math_random(115, 120))     end      return true end  function CLASS:PlayerStepSoundTime(pl, iType, bWalking)     if iType == STEPSOUNDTIME_NORMAL or iType == STEPSOUNDTIME_WATER_FOOT then         return 550 - pl:GetVelocity():Length()     elseif iType == STEPSOUNDTIME_ON_LADDER then         return 600     elseif iType == STEPSOUNDTIME_WATER_KNEE then         return 650     end      return 600 end  function CLASS:PlayPainSound(pl)     pl:EmitSound("npc/fast_zombie/leap1.wav", 75, math_random(70, 80))      pl.NextPainSound = CurTime() + .5      return true end  function CLASS:PlayDeathSound(pl)     pl:EmitSound("npc/zombie/zombie_die"..math_random(3)..".wav",70, math_random(80,85))      return true end  function CLASS:ScalePlayerDamage(pl, hitgroup, dmginfo)     return true end  function CLASS:IgnoreLegDamage(pl, dmginfo)     return true end  function CLASS:CalcMainActivity(pl, velocity)     local wep = pl:GetActiveWeapon()     if not wep:IsValid() or not wep.GetClimbing or not wep.GetPounceTime then return end      if wep:GetClimbing() then         return ACT_ZOMBIE_CLIMB_UP, -1     end      if wep:GetPounceTime() > 0 then         return ACT_ZOMBIE_LEAP_START, -1     end      if not pl:OnGround() or pl:WaterLevel() >= 3 then         return ACT_ZOMBIE_LEAPING, -1     end      local speed = velocity:Length2DSqr()      if speed <= 1 and wep:IsRoaring() then         return 1, pl:LookupSequence("menu_zombie_01")     end      if speed > 256 and wep:GetSwinging() then           return ACT_HL2MP_RUN_ZOMBIE, -1     end      if pl:Crouching() then         return speed <= 1 and ACT_HL2MP_IDLE_CROUCH_ZOMBIE or ACT_HL2MP_WALK_CROUCH_ZOMBIE_01, -1     end      return ACT_HL2MP_RUN_ZOMBIE_FAST, -1 end  function CLASS:UpdateAnimation(pl, velocity, maxseqgroundspeed)     local wep = pl:GetActiveWeapon()     if not wep:IsValid() or not wep.GetClimbing or not wep.GetPounceTime then return end      if wep.GetSwinging and wep:GetSwinging() then         if not pl.PlayingFZSwing then             pl.PlayingFZSwing = true             pl:AnimRestartGesture(GESTURE_SLOT_ATTACK_AND_RELOAD, ACT_GMOD_GESTURE_RANGE_FRENZY)         end     elseif pl.PlayingFZSwing then         pl.PlayingFZSwing = false         pl:AnimResetGestureSlot(GESTURE_SLOT_ATTACK_AND_RELOAD)      end      if wep:GetClimbing() then         local vel = pl:GetVelocity()         local speed = vel:LengthSqr()         if speed > 64 then              pl:SetPlaybackRate(math_Clamp(speed / 25600, 0, 1) * (vel.z < 0 and -0.75 or 0.75))           else             pl:SetPlaybackRate(0)         end          return true     end      if wep.GetPounceTime and wep:GetPounceTime() > 0 then         pl:SetPlaybackRate(0.25)          if not pl.m_PrevFrameCycle then             pl.m_PrevFrameCycle = true             pl:SetCycle(0)         end          return true     elseif pl.m_PrevFrameCycle then         pl.m_PrevFrameCycle = nil     end      if not pl:OnGround() or pl:WaterLevel() >= 3 then         if pl:GetCycle() >= 1 then             pl:SetCycle(pl:GetCycle() - 1)         end          pl:SetPlaybackRate(0.5)          return true     end      if wep:IsRoaring() and velocity:Length2DSqr() <= 1 then         pl:SetPlaybackRate(0)         pl:SetCycle(math_Clamp(1 - (wep:GetRoarEndTime() - CurTime()) / wep.RoarTime, 0, 1) * 0.9)          return true     end      pl:SetPlaybackRate(0.75)      return true end  function CLASS:DoAnimationEvent(pl, event, data)     if event == PLAYERANIMEVENT_ATTACK_PRIMARY then         pl:AnimRestartGesture(GESTURE_SLOT_ATTACK_AND_RELOAD, ACT_GMOD_GESTURE_RANGE_ZOMBIE_SPECIAL, true)         return ACT_INVALID     elseif event == PLAYERANIMEVENT_RELOAD then         return ACT_INVALID     end end  function CLASS:DoesntGiveFear(pl)     return pl.FeignDeath and pl.FeignDeath:IsValid() end  function CLASS:CreateMove(pl, cmd)     local wep = pl:GetActiveWeapon()     if wep:IsValid() and wep.IsPouncing and wep.m_ViewAngles and wep:IsPouncing() then         local maxdiff = FrameTime() * 20         local mindiff = -maxdiff         local originalangles = wep.m_ViewAngles         local viewangles = cmd:GetViewAngles()          local diff = math.AngleDifference(viewangles.yaw, originalangles.yaw)         if diff > maxdiff or diff < mindiff then             viewangles.yaw = math.NormalizeAngle(originalangles.yaw + math.Clamp(diff, mindiff, maxdiff))         end          wep.m_ViewAngles = viewangles          cmd:SetViewAngles(viewangles)     end end  if SERVER then     function CLASS:OnSpawned(pl)         pl:CreateAmbience("parasiteambience")         for i=1, math.random(2,4) do             pl:SetBodygroup(i, 1)         end          pl:SetColor(Color(190, 115, 115))     end      function CLASS:SwitchedAway(pl)         for i=1, math.random(2,4) do             pl:SetBodygroup(i, 0)         end   pl:SetColor(Color(255, 255, 255))  end end  if not CLIENT then return end  CLASS.Icon = "zombiesurvival/killicons/parasite" CLASS.IconColor = Color(150, 75, 75)  local render_SetColorModulation = render.SetColorModulation local angle_zero = angle_zero local LocalToWorld = LocalToWorld  local matSkin = Material("models/zombie_fast/fast_zombie_sheet.vtf") local matCrab = Material("models/skeleton/skeleton_bloody.vtf")  function CLASS:PrePlayerDraw(pl)     render_SetColorModulation(0.85, 0.25, 0.25)     render.MaterialOverrideByIndex(0, matSkin)     render.MaterialOverrideByIndex(1, matCrab) end  function CLASS:PostPlayerDraw(pl)     render_SetColorModulation(1, 1, 1)     render.MaterialOverrideByIndex(0)     render.MaterialOverrideByIndex(1) end  local matSkinText = Material("Models/charple/charple1_sheet.vtf") function CLASS:PrePlayerDrawOverrideModel(pl)     render_SetColorModulation(0.6, 0.1, 0.1)     render.ModelMaterialOverride(matSkinText) end  function CLASS:PostPlayerDrawOverrideModel(pl)     render.ModelMaterialOverride(nil)     render_SetColorModulation(1, 1, 1) end 