CreateClientConVar("zs_bossclass", "", true, true)  GM.SelectedDemiClass = CreateClientConVar("zs_demiclass", "", true, true):GetString() cvars.AddChangeCallback("zs_demiclass", function(cvar, oldvalue, newvalue)  GAMEMODE.SelectedDemiClass = tostring(newvalue) end)  local Window local HoveredClassWindow  local function CreateHoveredClassWindow(classtable)  if HoveredClassWindow and HoveredClassWindow:IsValid() then  HoveredClassWindow:Remove()  end   HoveredClassWindow = vgui.Create("ClassInfo")  HoveredClassWindow:SetSize(ScrW() * 0.5, 128)  HoveredClassWindow:CenterHorizontal()  HoveredClassWindow:MoveBelow(Window, 32)  HoveredClassWindow:SetClassTable(classtable) end  function GM:OpenClassSelect()  if Window and Window:IsValid() then Window:Remove() end  local screenscale = BetterScreenScale()   Window = vgui.Create("ClassSelect")  Window:SetSize(ScrW(), 640 * screenscale)  Window:CenterHorizontal()  Window:CenterVertical(0.35)   Window:SetAlpha(0)  Window:AlphaTo(255, 0.1)   Window:MakePopup()   PlayMenuOpenSound() end  local PANEL = {}  local CLASS_MENU_NORMAL = 0 local CLASS_MENU_DEMI = 1 local CLASS_MENU_BOSS = 2  local cnt local bossmode = 0 local function BossTypeDoClick(self)  bossmode = bossmode == CLASS_MENU_BOSS and CLASS_MENU_NORMAL or CLASS_MENU_BOSS  GAMEMODE:OpenClassSelect() end local function DemibossTypeDoClick(self)  bossmode = bossmode == CLASS_MENU_DEMI and CLASS_MENU_NORMAL or CLASS_MENU_DEMI  GAMEMODE:OpenClassSelect() end  function PANEL:Init()  self.ClassGroups = {}  local subc  for i = 1, #GAMEMODE.ZClassCategories do  cnt = i   subc = vgui.Create("ClassSubSelect", self)  table.insert(self.ClassGroups, subc)  end   self.CloseButton = EasyButton(self, "Close", 8, 4)  self.CloseButton:SetFont("ZSHUDFontSmall")  self.CloseButton:SizeToContents()  self.CloseButton.DoClick = function() Window:Remove() end   local button = EasyButton(self, bossmode == CLASS_MENU_BOSS and "Open Normal Class Selection" or "Open Boss Class Selection", 8, 4)  button:SetFont("ZSHUDFontSmall")  button:SizeToContents()  self.ClassTypeButton = button  button.DoClick = BossTypeDoClick   button = EasyButton(self, bossmode == CLASS_MENU_DEMI and "Open Normal Class Selection" or "Open Demiboss Class Selection", 8, 4)  button:SetFont("ZSHUDFontSmall")  button:SizeToContents()  self.ClassTypeButtondDemi = button  button.DoClick = DemibossTypeDoClick   self:InvalidateLayout() end  function PANEL:PerformLayout()  local screenscale = BetterScreenScale()  for i, group in ipairs(self.ClassGroups) do  local rot = math.pi * 2 * (i + 1)/3   group:SetSize(self:GetWide()/2.25, 210 * screenscale)  group:SetPos(self:GetWide()/3.6 + math.sin(rot) * group:GetWide()/1.5, self:GetTall()/3 + math.cos(rot) * group:GetTall()/1.2)  end   self.ClassTypeButton:CenterHorizontal(0.3)  self.ClassTypeButton:AlignTop(32)   self.ClassTypeButtondDemi:CenterHorizontal(0.6)  self.ClassTypeButtondDemi:AlignTop(32)   self.CloseButton:CenterHorizontal(0.9)  self.CloseButton:AlignTop(32) end  vgui.Register("ClassSelect", PANEL, "Panel")  PANEL = {}  function PANEL:Init()  self.ClassButtons = {}  self.Cat = cnt   local already_added = {}   for i = 1, #GAMEMODE.ZombieClasses do  local classtab = GAMEMODE.ZombieClasses[GAMEMODE:GetBestAvailableZombieClass(i)]   local boss_logic =  bossmode == CLASS_MENU_BOSS and classtab.Boss or   bossmode == CLASS_MENU_DEMI and classtab.Demiboss or  bossmode == CLASS_MENU_NORMAL and not classtab.Boss and not classtab.Demiboss   local bossm =   boss_logic and   (not classtab.Hidden or classtab.CanUse and classtab:CanUse(MySelf)) and  (not GAMEMODE.ObjectiveMap or classtab.Unlocked or classtab.Demiboss) and (not GAMEMODE.ObjectiveMap or not GAMEMODE.NonObjDemis[classtab.Name])   if classtab and not classtab.Variant and classtab.Cat == self.Cat and bossm and not already_added[classtab.Index] then  already_added[classtab.Index] = true   if not classtab.BetterVersionOf or GAMEMODE:IsClassUnlocked(classtab.Index) then  local button = vgui.Create("ClassButton", self)  button:SetClassTable(classtab)  button.BaseClassTable = classtab   for j = 1, #GAMEMODE.ZombieClasses do  local vtab = GAMEMODE.ZombieClasses[j]  if vtab and vtab.Variant and (vtab.Boss or not vtab.Hidden) and classtab.Name == vtab.Variant and GAMEMODE:IsClassUnlocked(vtab.Index) then  button.Variants[#button.Variants + 1] = vtab.Name  end  end  button:MakeVariantDrop()   table.insert(self.ClassButtons, button)  end  end  end   local label = EasyLabel(self, GAMEMODE.ZClassCategories[self.Cat], "ZSHUDFontSmall")  self.Title = label   self:InvalidateLayout() end  function PANEL:PerformLayout()  local spacing = self:GetWide() / math.max(1, #self.ClassButtons)  local tall = self:GetTall()   for i, classbutton in ipairs(self.ClassButtons) do  classbutton:SetSize(math.min(self:GetWide() / 6, spacing) * 1.2, tall)  classbutton:SetPos((i - 1) * spacing + spacing * 0.5 - classbutton:GetWide() * 0.5, 0)  classbutton:CenterVertical()  end   self.Title:CenterVertical(0.05)  self.Title:CenterHorizontal() end  local texUpEdge = surface.GetTextureID("gui/gradient_up") local texDownEdge = surface.GetTextureID("gui/gradient_down") function PANEL:Paint()  local wid, hei = self:GetSize()  local edgesize = 16   DisableClipping(true)  surface.SetDrawColor(Color(0, 0, 0, 220))  surface.DrawRect(0, 0, wid, hei)  surface.SetTexture(texUpEdge)  surface.DrawTexturedRect(0, -edgesize, wid, edgesize)  surface.SetTexture(texDownEdge)  surface.DrawTexturedRect(0, hei, wid, edgesize)  DisableClipping(false)   return true end  vgui.Register("ClassSubSelect", PANEL, "Panel")  PANEL = {}  function PANEL:Init()  self:SetMouseInputEnabled(true)   self.NameLabel = vgui.Create("DLabel", self)  self.NameLabel:SetFont("ZSHUDFontSmaller")  self.NameLabel:SetAlpha(170)   self.Image = vgui.Create("DImage", self)   self.ImageButton = vgui.Create("DButton", self.Image)  self.ImageButton.Paint = function() end  self.ImageButton:SetText("")  self.ImageButton.DoClick = ClassImageDoClick   self.Variants = {}   self:InvalidateLayout() end  function PANEL:PerformLayout()  local imgsize = math.min(self:GetWide(), self:GetTall()) * 0.65  self.Image:SetSize(imgsize, imgsize)  self.Image:CenterHorizontal()  self.Image:CenterVertical(0.35)   self.ImageButton:SetSize(self.Image:GetSize())  self.ImageButton:Center()   local screenscale = math.max(1, BetterScreenScale())   self.NameLabel:SizeToContents()  self.NameLabel:CenterHorizontal()  self.NameLabel:AlignBottom(50 * screenscale)   if not self.VariantDrop then return end   self.VariantDrop:CenterHorizontal()  self.VariantDrop:AlignBottom() end  function PANEL:SetClassTable(classtable)  self.ClassTable = classtable   local len = #translate.Get(classtable.TranslationName)   self.NameLabel:SetText(translate.Get(classtable.TranslationName))  self.NameLabel:SetFont("ZSHUDFontTiny")   self.Image:SetImage(classtable.Icon)  self.Image:SetImageColor(classtable.IconColor or color_white)   self:InvalidateLayout() end  function PANEL:MakeVariantDrop()  if #self.Variants == 0 then return end   local screenscale = math.max(1, BetterScreenScale())   self.VariantDrop = vgui.Create("DButton", self)  local vardrop = self.VariantDrop   vardrop.Paint = function() end  vardrop:SetText("")  vardrop:SetSize(44 * screenscale, 44 * screenscale)  vardrop:AlignBottom()  vardrop:CenterHorizontal()   vardrop.Image = vgui.Create("DImage", vardrop)  local varimg = vardrop.Image   vardrop.Variants = {self.ClassTable.Name}  table.Add(vardrop.Variants, self.Variants)  vardrop.Procession = table.KeyFromValue(vardrop.Variants, self.ClassTable.Name) + 1   local proceclass = GAMEMODE.ZombieClasses[vardrop.Variants[vardrop.Procession]]  varimg:SetImage(proceclass.Icon)  varimg:SetImageColor(proceclass.IconColor or color_white)  varimg:SetSize(44 * screenscale, 44 * screenscale)  varimg.PaintOver = function(vd, w, h)  surface.SetDrawColor(0, 0, 0, 110)  surface.DrawOutlinedRect(0, 0, w, h)  end   vardrop.DoClick = function()  local bproclass = GAMEMODE.ZombieClasses[vardrop.Variants[vardrop.Procession]]   vardrop.Procession = vardrop.Procession + 1  if vardrop.Procession > #vardrop.Variants then  vardrop.Procession = 1  end   proceclass = GAMEMODE.ZombieClasses[vardrop.Variants[vardrop.Procession]]  timer.Simple(0.11, function()  self.Image:SlideDown(0.1)   varimg:SetImage(proceclass.Icon)  varimg:SetImageColor(proceclass.IconColor or color_white)   self.LastEnabledState = nil  self:SetClassTable(bproclass)  end)   self.Image:SlideUp(0.1)  end end  function PANEL:DoClick()  if self.ClassTable then  if self.ClassTable.Boss or self.ClassTable.Demiboss then  RunConsoleCommand(self.ClassTable.Boss and "zs_bossclass" or "zs_demiclass", self.ClassTable.Name)  GAMEMODE:CenterNotify(translate.Format(self.ClassTable.Boss and "boss_class_select" or "demi_class_select", self.ClassTable.Name))  else  net.Start("zs_changeclass")  net.WriteString(self.ClassTable.Name)  net.WriteBool(GAMEMODE.SuicideOnChangeClass)  net.SendToServer()  end  end   surface.PlaySound("buttons/button15.wav")   Window:Remove()  bossmode = CLASS_MENU_NORMAL end  function PANEL:Paint()  return true end  function PANEL:OnCursorEntered()  self.NameLabel:SetAlpha(230)   CreateHoveredClassWindow(self.ClassTable) end  function PANEL:OnCursorExited()  self.NameLabel:SetAlpha(170)   if HoveredClassWindow and HoveredClassWindow:IsValid() and HoveredClassWindow.ClassTable == self.ClassTable then  HoveredClassWindow:Remove()  end end  function PANEL:Think()  if not self.ClassTable then return end   local enabled = MySelf:GetZombieClass() == self.ClassTable.Index and 2 or gamemode.Call("IsClassUnlocked", self.ClassTable.Index) and 1 or 0  if enabled ~= self.LastEnabledState then  self.LastEnabledState = enabled   if enabled == 2 then  self.NameLabel:SetTextColor(COLOR_GREEN)  self.Image:SetImageColor(self.ClassTable.IconColor or color_white)  self.Image:SetAlpha(245)  elseif enabled == 1 then  self.NameLabel:SetTextColor(COLOR_GRAY)  self.Image:SetImageColor(self.ClassTable.IconColor or color_white)  self.Image:SetAlpha(245)  else  self.NameLabel:SetTextColor(COLOR_DARKRED)  self.Image:SetImageColor(COLOR_DARKRED)  self.Image:SetAlpha(170)  if self.VariantDrop then  self.VariantDrop.Image:SetImageColor(COLOR_DARKRED)  self.VariantDrop.Image:SetAlpha(170)  end  end  end end  vgui.Register("ClassButton", PANEL, "Button")  PANEL = {}  function PANEL:Init()  self.NameLabel = vgui.Create("DLabel", self)  self.NameLabel:SetFont("ZSHUDFontSmaller")   self.DescLabels = self.DescLabels or {}   self:InvalidateLayout() end  function PANEL:SetClassTable(classtable)  self.ClassTable = classtable   local name = translate.Get(classtable.TranslationName)   self.NameLabel:SetText(name)  self.NameLabel:SizeToContents()   self:CreateDescLabels()   self:InvalidateLayout() end  function PANEL:RemoveDescLabels()  for _, label in pairs(self.DescLabels) do  label:Remove()  end   self.DescLabels = {} end  function PANEL:CreateDescLabels()  self:RemoveDescLabels()   self.DescLabels = {}   local classtable = self.ClassTable  if not classtable or not classtable.Description then return end   local lines = {}   if classtable.Wave and classtable.Wave > 0 then  table.insert(lines, translate.Format("unlocked_on_wave_x", classtable.Wave))  end   if classtable.BetterVersion then  local betterclasstable = GAMEMODE.ZombieClasses[classtable.BetterVersion]  if betterclasstable then  table.insert(lines, translate.Format("evolves_in_to_x_on_wave_y", betterclasstable.Name, betterclasstable.Wave))  end  end   table.insert(lines, " ")  table.Add(lines, string.Explode("\n", translate.Get(classtable.Description)))   if classtable.Help then  table.insert(lines, " ")  table.Add(lines, string.Explode("\n", translate.Get(classtable.Help)))  end   for i, line in ipairs(lines) do  local label = vgui.Create("DLabel", self)  local notwaveone = classtable.Wave and classtable.Wave > 0   label:SetText(line)  if i == (notwaveone and 2 or 1) and classtable.BetterVersion then  label:SetColor(COLOR_RORANGE)  end  label:SetFont(i == 1 and notwaveone and "ZSBodyTextFontBig" or "ZSBodyTextFont")  label:SizeToContents()  table.insert(self.DescLabels, label)  end end  function PANEL:PerformLayout()  self.NameLabel:SizeToContents()  self.NameLabel:CenterHorizontal()   local maxw = self.NameLabel:GetWide()  for _, label in pairs(self.DescLabels) do  maxw = math.max(maxw, label:GetWide())  end  self:SetWide(maxw + 64)  self:CenterHorizontal()   for i, label in ipairs(self.DescLabels) do  label:MoveBelow(self.DescLabels[i - 1] or self.NameLabel)  label:CenterHorizontal()  end   local lastlabel = self.DescLabels[#self.DescLabels] or self.NameLabel  local _, y = lastlabel:GetPos()  self:SetTall(y + lastlabel:GetTall()) end  function PANEL:Think()  if not Window or not Window:IsValid() or not Window:IsVisible() then  self:Remove()  end end  function PANEL:Paint(w, h)  derma.SkinHook("Paint", "Frame", self, w, h)   return true end  vgui.Register("ClassInfo", PANEL, "Panel") 