local function HelpMenuPaint(self)  Derma_DrawBackgroundBlur(self, self.Created)  Derma_DrawBackgroundBlur(self, self.Created) end  local default_animations = { "idle_all_01", "menu_walk" }  function GM:MakePlayerCustomisation()  if self.PlayerCustomisation then  self.PlayerCustomisation:SetVisible(true)  self.PlayerCustomisation:MakePopup()   return  end   local window = vgui.Create("DFrame")  window:SetSize( math.min( ScrW() - 16, 960 ), math.min( ScrH() - 16, 700 ) )  window:Center()  window:SetTitle("")  window:SetDeleteOnClose(false)  window:MakePopup()   self.PlayerCustomisation = window   local mdl = window:Add( "DModelPanel" )  mdl:Dock( FILL )  mdl:SetFOV( 36 )  mdl:SetCamPos( Vector( 0, 0, 0 ) )  mdl:SetDirectionalLight( BOX_RIGHT, Color( 255, 160, 80, 255 ) )  mdl:SetDirectionalLight( BOX_LEFT, Color( 80, 160, 255, 255 ) )  mdl:SetAmbientLight( Vector( -64, -64, -64 ) )  mdl:SetAnimated( true )  mdl.Angles = Angle( 0, 0, 0 )  mdl:SetLookAt( Vector( -100, 0, -22 ) )   local sheet = window:Add( "DPropertySheet" )  sheet:Dock( RIGHT )  sheet:SetSize( 430, 0 )   local PanelSelect = sheet:Add( "DPanelSelect" )   for name, model in SortedPairs( player_manager.AllValidModels() ) do  if table.HasValue(self.RestrictedModels, string.lower(model)) then continue end   local icon = vgui.Create( "SpawnIcon" )  icon:SetModel( model )  icon:SetSize( 64, 64 )  icon:SetTooltip( name )  icon.playermodel = name   PanelSelect:AddPanel( icon, { cl_playermodel = name } )  end   sheet:AddSheet( "Model", PanelSelect, "icon16/user.png" )   local controls = window:Add( "DPanel" )  controls:DockPadding( 8, 8, 8, 8 )   local lbl = controls:Add( "DLabel" )  lbl:SetText( "Player color" )  lbl:SetTextColor( Color( 0, 0, 0, 255 ) )  lbl:Dock( TOP )   local plycol = controls:Add( "DColorMixer" )  plycol:SetAlphaBar( false )  plycol:SetPalette( false )  plycol:Dock( TOP )  plycol:SetSize( 200, math.min( window:GetTall() / 3, 260 ) )   lbl = controls:Add( "DLabel" )  lbl:SetText( "Physgun color" )  lbl:SetTextColor( Color( 0, 0, 0, 255 ) )  lbl:DockMargin( 0, 32, 0, 0 )  lbl:Dock( TOP )   local wepcol = controls:Add( "DColorMixer" )  wepcol:SetAlphaBar( false )  wepcol:SetPalette( false )  wepcol:Dock( TOP )  wepcol:SetSize( 200, math.min( window:GetTall() / 3, 260 ) )  wepcol:SetVector( Vector( GetConVarString( "cl_weaponcolor" ) ) );   sheet:AddSheet( "Colors", controls, "icon16/color_wheel.png" )   local bdcontrols = window:Add( "DPanel" )  bdcontrols:DockPadding( 8, 8, 8, 8 )   local bdcontrolspanel = bdcontrols:Add( "DPanelList" )  bdcontrolspanel:EnableVerticalScrollbar( true )  bdcontrolspanel:Dock( FILL )   local bgtab = sheet:AddSheet( "Bodygroups", bdcontrols, "icon16/cog.png" )       local function MakeNiceName( str )  local newname = {}   for _, s in pairs( string.Explode( "_", str ) ) do  if ( string.len( s ) == 1 ) then table.insert( newname, string.upper( s ) ) continue end  table.insert( newname, string.upper( string.Left( s, 1 ) ) .. string.Right( s, string.len( s ) - 1 ) )    end   return string.Implode( " ", newname )  end   local function PlayPreviewAnimation( panel, playermodel )   if ( !panel or !IsValid( panel.Entity ) ) then return end   local anims = list.Get( "PlayerOptionsAnimations" )   local anim = default_animations[ math.random( 1, #default_animations ) ]  if ( anims[ playermodel ] ) then  anims = anims[ playermodel ]  anim = anims[ math.random( 1, #anims ) ]  end   local iSeq = panel.Entity:LookupSequence( anim )  if ( iSeq > 0 ) then panel.Entity:ResetSequence( iSeq ) end   end      local function UpdateBodyGroups( pnl, val )  if ( pnl.type == "bgroup" ) then   mdl.Entity:SetBodygroup( pnl.typenum, math.Round( val ) )   local str = string.Explode( " ", GetConVarString( "cl_playerbodygroups" ) )  if ( #str < pnl.typenum + 1 ) then for i = 1, pnl.typenum + 1 do str[ i ] = str[ i ] or 0 end end  str[ pnl.typenum + 1 ] = math.Round( val )  RunConsoleCommand( "cl_playerbodygroups", table.concat( str, " " ) )   elseif ( pnl.type == "skin" ) then   mdl.Entity:SetSkin( math.Round( val ) )  RunConsoleCommand( "cl_playerskin", math.Round( val ) )   end  end   local function RebuildBodygroupTab()  bdcontrolspanel:Clear()   bgtab.Tab:SetVisible( false )   local nskins = mdl.Entity:SkinCount() - 1  if ( nskins > 0 ) then  local skins = vgui.Create( "DNumSlider" )  skins:Dock( TOP )  skins:SetText( "Skin" )  skins:SetDark( true )  skins:SetTall( 50 )  skins:SetDecimals( 0 )  skins:SetMax( nskins )  skins:SetValue( GetConVarNumber( "cl_playerskin" ) )  skins.type = "skin"  skins.OnValueChanged = UpdateBodyGroups   bdcontrolspanel:AddItem( skins )   mdl.Entity:SetSkin( GetConVarNumber( "cl_playerskin" ) )   bgtab.Tab:SetVisible( true )  end   local groups = string.Explode( " ", GetConVarString( "cl_playerbodygroups" ) )  for k = 0, mdl.Entity:GetNumBodyGroups() - 1 do  if ( mdl.Entity:GetBodygroupCount( k ) <= 1 ) then continue end   local bgroup = vgui.Create( "DNumSlider" )  bgroup:Dock( TOP )  bgroup:SetText( MakeNiceName( mdl.Entity:GetBodygroupName( k ) ) )  bgroup:SetDark( true )  bgroup:SetTall( 50 )  bgroup:SetDecimals( 0 )  bgroup.type = "bgroup"  bgroup.typenum = k  bgroup:SetMax( mdl.Entity:GetBodygroupCount( k ) - 1 )  bgroup:SetValue( groups[ k + 1 ] or 0 )  bgroup.OnValueChanged = UpdateBodyGroups   bdcontrolspanel:AddItem( bgroup )   PrintTable(groups)   mdl.Entity:SetBodygroup( k, groups[ k + 1 ] or 0 )   bgtab.Tab:SetVisible( true )  end  end   local function UpdateFromConvars()   local model = LocalPlayer():GetInfo( "cl_playermodel" )  local modelname = player_manager.TranslatePlayerModel( model )  util.PrecacheModel( modelname )  mdl:SetModel( modelname )  mdl.Entity.GetPlayerColor = function() return Vector( GetConVarString( "cl_playercolor" ) ) end  mdl.Entity:SetPos( Vector( -100, 0, -61 ) )   plycol:SetVector( Vector( GetConVarString( "cl_playercolor" ) ) )  wepcol:SetVector( Vector( GetConVarString( "cl_weaponcolor" ) ) )   PlayPreviewAnimation( mdl, model )  RebuildBodygroupTab()   end   local function UpdateFromControls()   RunConsoleCommand( "cl_playercolor", tostring( plycol:GetVector() ) )  RunConsoleCommand( "cl_weaponcolor", tostring( wepcol:GetVector() ) )   end   plycol.ValueChanged = UpdateFromControls  wepcol.ValueChanged = UpdateFromControls   UpdateFromConvars()   function PanelSelect:OnActivePanelChanged( old, new )   if ( old != new ) then    RunConsoleCommand( "cl_playerbodygroups", "0" )  RunConsoleCommand( "cl_playerskin", "0" )  end   timer.Simple( 0.1, function() UpdateFromConvars() end )   end       function mdl:DragMousePress()  self.PressX, self.PressY = gui.MousePos()  self.Pressed = true  end   function mdl:DragMouseRelease() self.Pressed = false end   function mdl:LayoutEntity( ent )  if ( self.bAnimated ) then self:RunAnimation() end   if ( self.Pressed ) then  local mx, _ = gui.MousePos()  self.Angles = self.Angles - Angle( 0, ( self.PressX or mx ) - mx, 0 )   self.PressX, self.PressY = gui.MousePos()  end   ent:SetAngles( self.Angles )  end end  function GM:ShowHelp()  if self.HelpMenu and self.HelpMenu:IsValid() then  self.HelpMenu:Remove()  end   PlayMenuOpenSound()   local screenscale = BetterScreenScale()  local menu = vgui.Create("Panel")  menu:SetSize(screenscale * 420, ScrH())  menu:Center()  menu.Paint = HelpMenuPaint  menu.Created = SysTime()   local header = EasyLabel(menu, self.Name, "ZSHUDFont")  header:SetContentAlignment(8)  header:DockMargin(0, ScrH() * 0.25, 0, 64)  header:Dock(TOP)   local buttonhei = 32 * screenscale   local but = vgui.Create("DButton", menu)  but:SetFont("ZSHUDFontSmaller")  but:SetText("Help")  but:SetTall(buttonhei)  but:DockMargin(0, 0, 0, 12)  but:DockPadding(0, 12, 0, 12)  but:Dock(TOP)  but.DoClick = function() MakepHelp() end   but = vgui.Create("DButton", menu)  but:SetFont("ZSHUDFontSmaller")  but:SetText("Player Model")  but:SetTall(buttonhei)  but:DockMargin(0, 0, 0, 12)  but:DockPadding(0, 12, 0, 12)  but:Dock(TOP)  but.DoClick = function() GAMEMODE:MakePlayerCustomisation(self) end   but = vgui.Create("DButton", menu)  but:SetFont("ZSHUDFontSmaller")  but:SetText("Options")  but:SetTall(buttonhei)  but:DockMargin(0, 0, 0, 12)  but:DockPadding(0, 12, 0, 12)  but:Dock(TOP)  but.DoClick = function() self:MakeOptionsMenu() end   but = vgui.Create("DButton", menu)  but:SetFont("ZSHUDFontSmaller")  but:SetText("Weapon Database")  but:SetTall(buttonhei)  but:DockMargin(0, 0, 0, 12)  but:DockPadding(0, 12, 0, 12)  but:Dock(TOP)  but.DoClick = function() MakepWeapons() end      but = vgui.Create("DButton", menu)     but:SetFont("ZSHUDFontSmaller")     but:SetText("Undead Bestiary")     but:SetTall(buttonhei)     but:DockMargin(0, 0, 0, 12)     but:DockPadding(0, 12, 0, 12)     but:Dock(TOP)     but.DoClick = function() MakepBestiary() end      but = vgui.Create("DButton", menu)     but:SetFont("ZSHUDFontSmaller")     but:SetText("Status Effects")     but:SetTall(buttonhei)     but:DockMargin(0, 0, 0, 12)     but:DockPadding(0, 12, 0, 12)     but:Dock(TOP)     but.DoClick = function() GAMEMODE:ShowStatusEffectsPanel() end   but = vgui.Create("DButton", menu)  but:SetFont("ZSHUDFontSmaller")  but:SetText("Skills")  but:SetTall(buttonhei)  but:DockMargin(0, 0, 0, 12)  but:DockPadding(0, 12, 0, 12)  but:Dock(TOP)  but.DoClick = function() GAMEMODE:ToggleSkillWeb() end   but = vgui.Create("DButton", menu)  but:SetFont("ZSHUDFontSmaller")  but:SetText("Credits")  but:SetTall(buttonhei)  but:DockMargin(0, 0, 0, 12)  but:DockPadding(0, 12, 0, 12)  but:Dock(TOP)  but.DoClick = function() MakepCredits() end   but = vgui.Create("DButton", menu)  but:SetFont("ZSHUDFontSmaller")  but:SetText("Close")  but:SetTall(buttonhei)  but:DockMargin(0, 24, 0, 0)  but:DockPadding(0, 12, 0, 12)  but:Dock(TOP)  but.DoClick = function() menu:Remove() end   menu:MakePopup() end 