local function ScrapLabelThink(self)  local scrap = MySelf:GetAmmoCount("scrap")  if self.m_LastScrap ~= scrap then  self.m_LastScrap = scrap   self:SetText("Scrap for usage: "..scrap)  self:SizeToContents()  end end  local function SelectedInv()  return GAMEMODE.InventoryMenu and GAMEMODE.InventoryMenu.SelInv end  local function DismantleClick()  Derma_Query("Dismantle weapon? This cannot be reversed.", "Confirm Dissassembling Weapon",  "Dismantle", function()  RunConsoleCommand("zs_dismantle", SelectedInv())   GAMEMODE.RemantlerInterface:Close()  GAMEMODE.RemantlerInterface = nil  end,  "Cancel", function()  end) end  hook.Add("Think", "RemantlerMenuThink", function()  local pan = GAMEMODE.RemantlerInterface  if pan and pan:IsValid() and pan:IsVisible() then  local mx, my = gui.MousePos()  local x, y = pan:GetPos()  if mx < x - 16 or my < y - 16 or mx > x + pan:GetWide() + 16 or my > y + pan:GetTall() + 16 then  pan:SetVisible(false)  end  end end)  local function RemantlerCenterMouse(self)  local x, y = self:GetPos()  local w, h = self:GetSize()  gui.SetMousePos(x + w / 2, y + h / 2) end    local PANEL = {} local hovquality local hovbranch  AccessorFunc( PANEL, "vCamPos", "CamPos" ) AccessorFunc( PANEL, "fFOV", "FOV" ) AccessorFunc( PANEL, "vLookatPos", "LookAt" ) AccessorFunc( PANEL, "aLookAngle", "LookAng" ) AccessorFunc( PANEL, "colAmbientLight", "AmbientLight" )  PANEL.CreationTime = 0  function PANEL:MakeRemantleNode(quality_tier, branch, branch_id, cur_branch, cur_quality, cur_branches)  local node = ClientsideModel("models/props/cs_italy/orange.mdl", RENDER_GROUP_OPAQUE_ENTITY)  if IsValid(node) then  node:SetNoDraw(true)  node:SetModelScale(1)   local overall_height = 12 + (cur_branches and #cur_branches or 0) * 8   local y_spacing = not cur_branches and 9 or (overall_height/#cur_branches)*branch_id   node:SetPos(Vector(0, -48 + quality_tier * 32, 3 - y_spacing))   cur_branch = cur_branch or 0   node.Unlocked = cur_branch == branch_id and quality_tier == 0 or  cur_quality and cur_quality >= quality_tier  or nil  if cur_quality and cur_quality >= 1 and cur_branch ~= branch_id then  node.Locked = true  end   local gtbl = self.GunTab  node.Name = branch and branch.NewNames and branch.NewNames[quality_tier] or  gtbl.RemantleNames and gtbl.RemantleNames[quality_tier] or  branch and quality_tier == 0 and branch.CollectiveName or  branch_id ~= 0 and quality_tier == 0 and "Altered" or  nil  self.RemantleNodes[branch_id][quality_tier] = node  end end  function PANEL:UpdateRemantleNodes(cur_quality, cur_branch)  for branch_id, branch_nodes in pairs(self.RemantleNodes) do  for quality_id, node in pairs(branch_nodes) do  cur_branch = cur_branch or 0   node.Unlocked = cur_branch == branch_id and quality_id == 0 or  cur_quality and cur_quality >= quality_id  or nil  if cur_quality and cur_quality >= 1 and cur_branch ~= branch_id then  node.Locked = true  end  end  end end  function PANEL:Init()  local screenscale = BetterScreenScale()   self.DirectionalLight = {}  self.FarZ = 32000   self.MainMenu = GAMEMODE.RemantlerInterface  self.RemantleNodes = {}  self.RemantleNodes[0] = {}   if not SelectedInv() and self.MainMenu.m_WepClass then  self.GunTab = weapons.Get(self.MainMenu.m_WepClass)  local gtbl = self.GunTab  local cur_quality = gtbl.QualityTier  local cur_branch = gtbl.Branch   self.CurBranch = cur_branch   if gtbl.AllowQualityWeapons then  local branches = not gtbl.HideVariants and gtbl.Branches   if branches then  for no, br in pairs(branches) do  self.RemantleNodes[no] = {}   self:MakeRemantleNode(0, br, no, cur_branch, cur_quality, branches)  end  end   self.OrigTab = gtbl.BaseQuality and weapons.Get(gtbl.BaseQuality) or gtbl   for i = 0, #GAMEMODE.WeaponQualities do  self:MakeRemantleNode(i, nil, 0, cur_branch, cur_quality, branches)   if i > 0 and branches then  for no, br in pairs(branches) do  self:MakeRemantleNode(i, br, no, cur_branch, cur_quality, branches)  end  end  end  end  end   self:SetCamPos( Vector( 20000, 0, 0 ) )  self:SetLookAt( Vector( 0, 0, 0 ) )  self:SetFOV( 5 )   self:SetAmbientLight( Color( 50, 50, 50 ) )   self:SetDirectionalLight( BOX_TOP, color_white )  self:SetDirectionalLight( BOX_FRONT, color_white )   local top = vgui.Create("Panel", self)  top:SetSize(ScrW(), 256)  top:SetMouseInputEnabled(false)   local qualityname = vgui.Create("DLabel", top)  qualityname:SetFont("ZSHUDFont")  qualityname:SetTextColor(COLOR_WHITE)  qualityname:SetContentAlignment(8)  qualityname:Dock(TOP)   local desc = {}  for i=1, 5 do  local qualityd = vgui.Create("DLabel", top)  qualityd:SetFont("ZSHUDFontSmallest")  qualityd:SetTextColor(COLOR_GRAY)  qualityd:SetContentAlignment(8)  qualityd:Dock(TOP)  table.insert(desc, qualityd)  end   local bottom = vgui.Create("Panel", self)  bottom:SetSize(ScrW(), 36 * screenscale)  bottom:SetMouseInputEnabled(false)   local scrapcost = vgui.Create("DLabel", bottom)  scrapcost:SetFont("ZSHUDFontSmaller")  scrapcost:SetTextColor(COLOR_WHITE)  scrapcost:SetContentAlignment(2)  scrapcost:Dock(TOP)   self.Top = top  self.QualityName = qualityname  self.QualityDesc = desc  self.Bottom = bottom  self.ScrapCost = scrapcost   top:SetAlpha(0)  bottom:SetAlpha(0)   self:DockMargin(0, 0, 0, 0)  self:DockPadding(0, 0, 0, 0)  self:Dock(FILL)  self:InvalidateLayout() end  function PANEL:PerformLayout()  local screenscale = BetterScreenScale()   self.Top:AlignTop(4)  self.Top:CenterHorizontal()   self.Bottom:AlignBottom(10 * screenscale)  self.Bottom:CenterHorizontal() end  function PANEL:SetDirectionalLight(iDirection, color)  self.DirectionalLight[iDirection] = color end  local matBeam = Material("trails/laser") local matGlow = Material("sprites/glow04_noz") local matWhite = Material("models/debug/debugwhite") local colBeam = Color(0, 0, 0) local colBeam2 = Color(255, 255, 255) local colGlow = Color(0, 0, 0) function PANEL:Paint(w, h)  local realtime = RealTime()  local nodepos, selected  local col, othernodepos  local add, pos_a, pos_b, sat  local size, ang   local campos = self.vCamPos  campos.x = 1600  campos.y = math.Clamp(campos.y, -262, 262)  campos.z = math.Clamp(campos.z, -262, 262)   self:SetCamPos(campos)  self.vLookatPos:Set(campos)  self.vLookatPos.x = 0   self:SetCamPos(campos)   surface.SetDrawColor(15, 20, 25, 230)  surface.DrawRect(0, 0, w, h)   ang = self.aLookAngle  if not ang then  ang = (self.vLookatPos - self.vCamPos):Angle()  end  local to_camera = ang:Forward() * -1   local x, y = self:LocalToScreen(0, 0)   local mx, my = gui.MousePos()  local aimvector = util.AimVector(ang, self.fFOV, mx - x, my - y, w, h)  local intersectpos = util.IntersectRayWithPlane(self.vCamPos, aimvector, self:GetLookAt(), Vector(-1, 0, 0))   cam.Start3D( self.vCamPos, ang, self.fFOV, x, y, w, h, 5, self.FarZ )  cam.IgnoreZ( true )   render.SuppressEngineLighting( true )  render.SetLightingOrigin( vector_origin )  render.ResetModelLighting( self.colAmbientLight.r / 255, self.colAmbientLight.g / 255, self.colAmbientLight.b / 255 )   for i=0, 6 do  col = self.DirectionalLight[ i ]  if col then  render.SetModelLighting( i, col.r / 255, col.g / 255, col.b / 255 )  end  end   render.SetMaterial(matBeam)  for branch, nodes in pairs(self.RemantleNodes) do  for id, node in pairs(nodes) do  if IsValid(node) then  nodepos = node:GetPos()  othernodes = {}  othernodes[#othernodes+1] = nodes[id + 1]   for _, othernode in pairs(othernodes) do  if IsValid(othernode) then  othernodepos = othernode:GetPos()   local beamsize = 4  if othernode.Unlocked then  colBeam.r = 32  colBeam.g = 128  colBeam.b = 255  elseif node.Unlocked then  colBeam.r = 255  colBeam.g = 192  colBeam.b = 0  else  colBeam.r = 128  colBeam.g = 40  colBeam.b = 40   beamsize = 2  end   if hovquality and hovquality >= id - 1 and hovquality <= id + 1 and hovbranch == branch then  add = math.abs(math.sin(realtime * math.pi)) * 120  colBeam.r = math.min(colBeam.r + add, 255)  colBeam.g = math.min(colBeam.g + add, 255)  colBeam.b = math.min(colBeam.b + add, 255)   colBeam.a = 180  colBeam2.a = 190  else  colBeam.a = 110  colBeam2.a = 110  end   pos_a = nodepos + Vector(-16, 0, 0)  pos_b = othernodepos + Vector(-16, 0, 0)   render.DrawBeam(pos_a, pos_b, beamsize, 0, 1, colBeam2)  render.DrawBeam(pos_a, pos_b, 8, 0, 1, colBeam)  end  end  end  end  end   local oldquality = hovquality  local oldbranch = hovbranch  hovquality = nil  hovbranch = nil   local angle = (realtime * 180) % 360   for branch, nodes in pairs(self.RemantleNodes) do  for id, node in pairs(nodes) do  if IsValid(node) then  nodepos = node:GetPos()  selected = intersectpos and nodepos:DistToSqr(intersectpos) <= 16   cam.Start3D2D(node:GetPos() - to_camera * 8, Angle(0, 90, 90), 0.12)  surface.DisableClipping(true)  DisableClipping(true)   if selected then  hovquality = id  hovbranch = branch   sat = 1 - math.abs(math.sin(realtime * math.pi)) * 0.25  else  sat = 1  end   local prevnode = nodes[id - 1] or {Unlocked = true}  if node.Locked then  render.SetColorModulation(sat / 4, sat / 4, sat / 4)  elseif node.Unlocked then  render.SetColorModulation(sat / 4, sat / 4, sat)  elseif prevnode.Unlocked and not node.Unlocked then  render.SetColorModulation(sat, sat / 2, 0)  else  render.SetColorModulation(sat / 2, 0, 0)  end  render.ModelMaterialOverride(matWhite)   node:DrawModel()   render.ModelMaterialOverride()  render.SetColorModulation(1, 1, 1)   local txt = "Standard"  local quals = GAMEMODE.WeaponQualities[id]     txt =  node.Name or  branch == 0 and quals and quals.Upg or  quals and quals.Ref or  "Standard"      draw.SimpleText(txt, "ZS3D2DFont2Small", -x, -y, selected and color_white or COLOR_GRAY, TEXT_ALIGN_CENTER)   DisableClipping(false)  surface.DisableClipping(false)  cam.End3D2D()   if not node.Locked then  render.SetMaterial(matGlow)  colGlow.r = sat * 255 colGlow.g = sat * 255 colGlow.b = sat * 255  if node.Unlocked then  colGlow.r = colGlow.r / 4  colGlow.g = colGlow.g / 4  elseif not node.Unlocked then  if prevnode.Unlocked then  colGlow.g = colGlow.g / 1.5  colGlow.b = 0  else  colGlow.r = colGlow.r / 1.5  colGlow.g = 0  colGlow.b = 0  end  end  size = selected and 30 or 20  render.DrawQuadEasy(nodepos, to_camera, size, size, colGlow, angle)  angle = angle + 45  end  end  end  end   if intersectpos then  intersectpos = intersectpos + Vector(16, 0, 0)  render.SetMaterial(matGlow)  render.DrawQuadEasy(intersectpos, to_camera, 12, 12, color_white, realtime * 90)  end   render.SuppressEngineLighting(false)   cam.IgnoreZ(false)  cam.End3D()   if oldquality ~= hovquality or oldbranch ~= hovbranch then  self.Top:Stop()  self.Bottom:Stop()   if hovquality and hovbranch then  local txt, scost = "Standard", ""  local quals = GAMEMODE.WeaponQualities[hovquality]  local node = self.RemantleNodes[hovbranch][hovquality]   txt =  node.Name or  hovbranch == 0 and quals and quals.Upg or  quals and quals.Ref or  "Standard"   scost = hovquality == 0 and 0 or  GAMEMODE:GetUpgradeScrap(self.GunTab, hovquality, MySelf)   self.QualityName:SetText(txt)  self.QualityName:SizeToContents()   self.ScrapCost:SetText(scost ~= "" and "Scrap Cost: " .. scost or "")  self.ScrapCost:SetTextColor(scost ~= "" and MySelf:GetAmmoCount("scrap") >= scost and COLOR_WHITE or COLOR_RED)  self.ScrapCost:SizeToContents()   local class =  (hovquality == 0 and hovbranch == 0) and self.GunTab.BaseQuality or  (hovquality ~= 0 or hovbranch ~= 0) and GAMEMODE:GetWeaponClassOfQuality(  self.GunTab.BaseQuality or self.GunTab.ClassName, hovquality, hovbranch  ) or self.MainMenu.m_WepClass              local weapon_table = weapons.Get(class)   GAMEMODE:SupplyItemViewerDetail(  self.MainMenu.RemantlingViewer,                 weapon_table,  {                     SWEP     =  class,                      Category =  self.GunTab.IsTool and ITEMCAT_TOOLS or                                 self.GunTab.IsMelee and ITEMCAT_MELEE or                                  ITEMCAT_GUNS                 }  )   local dtxt  local altdesc = self.OrigTab.RemantleDescs  local altdescs = altdesc and altdesc[hovbranch][hovquality]   for i=1, 5 do  dtxt = " "  if txt ~= "Standard" and altdesc and altdescs and altdescs[i] then  if i == 1 and hovbranch ~= 0 then  self.MainMenu.RemantlingViewer.ViewerDescription:SetText(altdescs[i])  dtxt = altdescs[i + 1] or ""  else  dtxt = altdescs[hovbranch ~= 0 and i + 1 or i] or ""  end  end   self.QualityDesc[i]:SetTextColor(COLOR_GREEN)  self.QualityDesc[i]:SetText(dtxt)  self.QualityDesc[i]:SizeToContents()  end   surface.PlaySound("zombiesurvival/ui/misc1.ogg")   self.Top:SetAlpha(0)  self.Top:AlphaTo(195, 0.1)   self.Bottom:SetAlpha(0)  self.Bottom:AlphaTo(140, 0.1)  else  self.Top:AlphaTo(0, 0.1)  self.Bottom:AlphaTo(0, 0.1)  end  end   return true end  net.Receive("zs_remantleconf", function()  if not (GAMEMODE.RemantlerInterface and GAMEMODE.RemantlerInterface:IsValid()) then return end   local new_weapon = net.ReadString()   local ri = GAMEMODE.RemantlerInterface  local path = ri.RemantlePath   local contentsqua = GAMEMODE.GunTab.QualityTier  local desiredqua = contentsqua and contentsqua + 1 or 1   GAMEMODE.GunTab = weapons.Get(new_weapon)  local gtbl = GAMEMODE.GunTab  local scost = GAMEMODE:GetUpgradeScrap(gtbl, desiredqua, MySelf)   path.GunTab = gtbl  path:UpdateRemantleNodes(GAMEMODE.GunTab.QualityTier, GAMEMODE.GunTab.Branch)  path.ScrapCost:SetTextColor((MySelf:GetAmmoCount("scrap") - scost) >= scost and COLOR_WHITE or COLOR_RED)   ri.m_WepClass = new_weapon  ri.CurBranch = gtbl.Branch   ri.m_ContentsLabel:SetText(gtbl.PrintName)  ri.m_ContentsLabel:SizeToContents()  ri.m_ContentsLabel:CenterHorizontal()   local retscrap = GAMEMODE:GetDismantleScrap(gtbl, nil, MySelf)  local disscraptxt = gtbl.NoDismantle and "Cannot Dismantle" or "Dismantle for " .. retscrap .. " Scrap"   ri.m_Dismantle:SetText(disscraptxt)  ri.m_Dismantle:SizeToContents()  ri.m_Dismantle:CenterHorizontal()   ri.m_DisaButton:SetDisabled(gtbl.NoDismantle)  ri.m_DisaButton:SetTextColor(gtbl.NoDismantle and COLOR_DARKGRAY or COLOR_WHITE) end)  function PANEL:OnMousePressed(mc)  if mc == MOUSE_LEFT and hovquality and hovbranch then  local gtbl = self.GunTab  local cur_quality = gtbl.QualityTier or 0  local cur_branch = gtbl.Branch or 0   local current_node = self.RemantleNodes[hovbranch][hovquality]  local previous_node = self.RemantleNodes[hovbranch][hovquality - 1]  local previous_unlocked = hovquality == 0 or previous_node and previous_node.Unlocked   local same_branch_higher_tier = hovquality > cur_quality and hovbranch == cur_branch  local diff_branch_same_tier = hovquality == cur_quality and hovbranch ~= cur_branch   if cur_quality and (same_branch_higher_tier or diff_branch_same_tier) and previous_unlocked and not current_node.Locked then             local has_ammo_of = MySelf:GetAmmoCount(self.GunTab.Primary.Ammo) > 0 or MySelf:GetActiveWeapon():Clip1() == 1   if self.GunTab.AmmoIfHas and not has_ammo_of then  GAMEMODE:CenterNotify(COLOR_RED, "You don't have the deployable ammo type for this!")  surface.PlaySound("buttons/button8.wav")   return  end   local scost = (diff_branch_same_tier and 0) or GAMEMODE:GetUpgradeScrap(self.GunTab, hovquality, MySelf)  if MySelf:GetAmmoCount("scrap") >= scost then  RunConsoleCommand(diff_branch_same_tier and "zs_remantleswap" or "zs_upgrade", hovbranch or 0)   return  else  GAMEMODE:CenterNotify(COLOR_RED, "You need enough scrap to upgrade this weapon!")  surface.PlaySound("buttons/button8.wav")   return  end  else  GAMEMODE:CenterNotify(COLOR_RED, "You must upgrade your weapon to the correct quality first!")  surface.PlaySound("buttons/button8.wav")   return  end  end end  vgui.Register("ZSRemantlePath", PANEL, "Panel")  function GM:ClearRemantlerMenu()  if self.RemantlerInterface and self.RemantlerInterface:IsValid() then  self.RemantlerInterface:SetVisible(false)  self.RemantlerInterface = nil  end end  function GM:OpenRemantlerMenu(remantler)  if not (remantler and remantler:IsValid()) or (self.RemantlerInterface and self.RemantlerInterface:IsVisible()) then return end  local mytarget = SelectedInv() or MySelf:GetActiveWeapon():GetClass()   if self.RemantlerInterface and self.RemantlerInterface:IsValid() and self.RemantlerInterface.m_WepClass == mytarget then  self.RemantlerInterface:SetVisible(true)  self.RemantlerInterface:CenterMouse()  return  end   local screenscale = BetterScreenScale()  local wid, hei = math.min(ScrW(), 960) * screenscale, math.min(ScrH(), 800) * screenscale  local tabhei = 24 * screenscale   local frame = vgui.Create("DFrame")  frame:SetSize(wid, hei)  frame:Center()  frame:SetDeleteOnClose(false)  frame:SetTitle(" ")  frame:SetDraggable(false)  if frame.btnClose and frame.btnClose:IsValid() then frame.btnClose:SetVisible(false) end  if frame.btnMinim and frame.btnMinim:IsValid() then frame.btnMinim:SetVisible(false) end  if frame.btnMaxim and frame.btnMaxim:IsValid() then frame.btnMaxim:SetVisible(false) end  frame.CenterMouse = RemantlerCenterMouse  self.RemantlerInterface = frame   frame.m_Remantler = remantler  frame.m_WepClass = mytarget   if not SelectedInv() then  self.GunTab = weapons.Get(frame.m_WepClass)  else  self.GunTab = GAMEMODE.ZSInventoryItemData[frame.m_WepClass]  end   local gtbl = self.GunTab  if not SelectedInv() and not (gtbl.AllowQualityWeapons or gtbl.PermitDismantle) then  frame.m_WepClass, gtbl = nil, nil  elseif SelectedInv() and ((gtbl.PermitDismantle ~= nil and not gtbl.PermitDismantle) or (self:GetInventoryItemType(mytarget) ~= INVCAT_TRINKETS)) then  frame.m_WepClass, gtbl = nil, nil  end   local topspace = vgui.Create("DPanel", frame)  topspace:SetWide(wid - 16)   local title = EasyLabel(topspace, "Weapon Remantler", "ZSHUDFontSmall", COLOR_WHITE)  title:CenterHorizontal()  local subtitle = EasyLabel(topspace, "Use scrap to upgrade weapons and buy trinkets!", "ZSHUDFontTiny", COLOR_WHITE)  subtitle:CenterHorizontal()  subtitle:MoveBelow(title, 4)   local check = vgui.Create("DEXCheckBoxLabel", topspace)  check:SetText("Quick Buy Mode")  check:SetConVar("zs_alwaysquickbuy")  check:SetFont("ZSHUDFontSmallest")  check:SizeToContents()  check:CenterHorizontal(0.15)  check:MoveBelow(title, -16 * screenscale)    local _, y = subtitle:GetPos()  topspace:SetTall(y + subtitle:GetTall() + 4)  topspace:AlignTop(8)  topspace:CenterHorizontal()   local bottomspace = vgui.Create("DPanel", frame)  bottomspace:SetWide(topspace:GetWide())   local pointslabel = EasyLabel(bottomspace, "Scrap for usage: 0", "ZSHUDFontTiny", COLOR_GREEN)  pointslabel:AlignTop(4)  pointslabel:AlignLeft(8)  pointslabel.Think = ScrapLabelThink   local lab = EasyLabel(bottomspace, "Disassembling your weapons cannot be reversed!", "ZSHUDFontTiny")  lab:AlignTop(4)  lab:AlignRight(4)  frame.m_AdviceLabel = lab   _, y = lab:GetPos()  bottomspace:SetTall(y + lab:GetTall() + 4)  bottomspace:AlignBottom(8)  bottomspace:CenterHorizontal()   local __, topy = topspace:GetPos()  local ___, boty = bottomspace:GetPos()   local remprop = vgui.Create("DPropertySheet", frame)  remprop:SetSize(wid - 8, boty - topy - 8 - topspace:GetTall())  remprop:MoveBelow(topspace, 4)  remprop:CenterHorizontal()  remprop.Paint = function() end  remprop:SetPadding(0)   local remantleframe = vgui.Create("DPanel", remprop)  local sheet = remprop:AddSheet("Remantling", remantleframe, "icon16/arrow_up.png", false, false)  sheet.Panel:SetPos(0, tabhei + 2)  remantleframe.Paint = function(me, w, h) surface.SetDrawColor(31, 33, 35, 113) surface.DrawRect(0, 0, w, h) end  remantleframe:SetSize(wid - 8, boty - topy - 8 - topspace:GetTall())   self:CreateItemInfoViewer(remantleframe, frame, topspace, bottomspace, MENU_REMANTLER, function(viewer)  frame.RemantlingViewer = viewer  end)  local rviewer = frame.RemantlingViewer   local trinketsframe = vgui.Create("DPanel")  sheet = remprop:AddSheet("Trinkets", trinketsframe, GAMEMODE.ItemCategoryIcons[ITEMCAT_TRINKETS], false, false)  sheet.Panel:SetPos(0, tabhei + 2)  trinketsframe:SetSize(wid - 8, boty - topy - 8 - topspace:GetTall())  trinketsframe.Paint = function(me, w, h) surface.SetDrawColor(31, 33, 35, 113) surface.DrawRect(0, 0, w, h) end  trinketsframe:SetPaintBackground(false)  frame.TrinketsFrame = trinketsframe   local ammoframe = vgui.Create("DPanel")  sheet = remprop:AddSheet("Ammunition", ammoframe, GAMEMODE.ItemCategoryIcons[ITEMCAT_AMMO], false, false)  sheet.Panel:SetPos(0, tabhei + 2)  ammoframe:SetSize(wid - 8, boty - topy - 8 - topspace:GetTall())  ammoframe.Paint = function(me, w, h) surface.SetDrawColor(31, 33, 35, 113) surface.DrawRect(0, 0, w, h) end  ammoframe:SetPaintBackground(true)  frame.m_AmmoFrame = ammoframe   local subpropertysheet  for frameindex = 0, 1 do  local curframe = frameindex == 0 and trinketsframe or ammoframe   if frameindex == 0 then  local tabpane = vgui.Create("DPanel", curframe)  tabpane.Paint = function() end  tabpane.Grids = {}  tabpane.Buttons = {}  tabpane:SetSize(curframe:GetWide(), curframe:GetTall())   local offset = 64 * screenscale  local itemframe = vgui.Create("DScrollPanel", tabpane)  itemframe:SetSize(curframe:GetWide(), curframe:GetTall() - offset - 32)  itemframe:SetPos(0, offset)   local mkgrid = function()  local list = vgui.Create("DGrid", itemframe)  list:SetPos(0, 0)  list:SetSize(curframe:GetWide() - 312, curframe:GetTall())  list:SetCols(2)  list:SetColWide(300 * screenscale)  list:SetRowHeight(64 * screenscale)   return list  end   local subcats = GAMEMODE.ItemSubCategories  local tbn  for j = 1, #subcats do  local ispacer = ((j-1) % 3)+1   tbn = EasyButton(tabpane, subcats[j], 8, 4)  tbn:SetFont("ZSHUDFontSmallest")  tbn:SetAlpha(j == 1 and 255 or 70)  tbn:AlignRight(800 * screenscale - (ispacer - 1) * 190 * screenscale)  tbn:AlignTop(j <= 3 and 0 or 28)  tbn:SizeToContents()  tbn.DoClick = function(me)  for k, v in pairs(tabpane.Grids) do  v:SetVisible(k == j)  tabpane.Buttons[k]:SetAlpha(k == j and 255 or 70)  end  end   tabpane.Grids[j] = mkgrid()  tabpane.Grids[j]:SetVisible(j == 1)  tabpane.Buttons[j] = tbn  end   for j, tab in ipairs(GAMEMODE.Items) do  if tab.PointShop and tab.Category == ITEMCAT_TRINKETS then  self:AddShopItem(tabpane.Grids[tab.SubCategory], j, tab, false, true)  end  end  else  local list = vgui.Create("DGrid", curframe)  list:SetPos(0, 0)  list:SetSize(curframe:GetWide() - 312, curframe:GetTall())  list:SetCols(3)  list:SetColWide(300 * screenscale)  list:SetRowHeight(100 * screenscale)   list:SetPos(8, 16)  list:SetWide(ammoframe:GetWide() - 16)  list:SetTall(ammoframe:GetTall() - 32)   for j, tab in ipairs(GAMEMODE.Items) do  if tab.PointShop and (tab.Category == ITEMCAT_AMMO or tab.CanMakeFromScrap) and not tab.CannotMakeFromScrap then  self:AddShopItem(list, j, tab, false, true)  end  end  end  end  frame.m_SubProp = subpropertysheet   self:CreateItemInfoViewer(trinketsframe, frame, topspace, bottomspace, MENU_REMANTLER)   local scroller = remprop:GetChildren()[1]  local dragbase = scroller:GetChildren()[1]  local tabs = dragbase:GetChildren()   self:ConfigureMenuTabs(tabs, tabhei)   local contents = EasyLabel(remantleframe, gtbl and gtbl.PrintName or "EMPTY", "ZSHUDFontSmall", COLOR_WHITE)  contents:AlignTop(16 * screenscale)  contents:CenterHorizontal()  frame.m_ContentsLabel = contents   local upgpathf = vgui.Create("DPanel", remantleframe)  upgpathf:SetSize(wid - (32 + 312) * screenscale, remantleframe:GetTall() / 1.6)  upgpathf:MoveBelow(contents, 20 * screenscale)      frame.RemantlePath = vgui.Create("ZSRemantlePath", upgpathf)   local disabtn = EasyButton(remantleframe, "Dismantle Weapon", 8, 4)  disabtn:SetFont("ZSHUDFont")  disabtn:SizeToContents()  disabtn:MoveBelow(upgpathf, 24 * screenscale)  disabtn:CenterHorizontal(0.3)  disabtn.DoClick = DismantleClick  if not gtbl then  disabtn:SetDisabled(true)  else  disabtn:SetDisabled(gtbl.NoDismantle)  end  disabtn:SetTextColor(gtbl and gtbl.NoDismantle and COLOR_DARKGRAY or gtbl and COLOR_WHITE or COLOR_DARKGRAY)  frame.m_DisaButton = disabtn   local disscraptxt = ""  if gtbl then  local retscrap = self:GetDismantleScrap(gtbl, SelectedInv(), MySelf)  disscraptxt = gtbl.NoDismantle and "Cannot Dismantle" or "Dismantle for " .. retscrap .. " Scrap"  end   local disscrap = EasyLabel(remantleframe, disscraptxt, "ZSHUDFontSmaller", COLOR_WHITE)  disscrap:MoveBelow(disabtn, 4 * screenscale)  disscrap:CenterHorizontal(0.3)  frame.m_Dismantle = disscrap   local breakdowns = self.Breakdowns[frame.m_WepClass]  local compdistxt = breakdowns and self.ZSInventoryItemData[breakdowns.Result].PrintName or ""   local compdisl = EasyLabel(remantleframe, compdistxt, "ZSHUDFontSmaller", COLOR_WHITE)  compdisl:MoveBelow(disscrap, 4 * screenscale)  compdisl:CenterHorizontal()  frame.m_ComponentDis = compdisl   frame:MakePopup()  frame:CenterMouse() end 