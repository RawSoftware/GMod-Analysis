local function pointslabelThink(self)  local points = MySelf:GetPoints()  if self.m_LastPoints ~= points then  self.m_LastPoints = points   self:SetText("Points to spend: "..points)  self:SizeToContents()  end end  GM.ArsenalFavorites = {} hook.Add("Initialize", "LoadArsenalFavorites", function()  if file.Exists(GAMEMODE.FavoritesFile, "DATA") then  GAMEMODE.ArsenalFavorites = Deserialize(file.Read(GAMEMODE.FavoritesFile)) or {}  end end)  local function RefreshArsenalFavorites()  local grid = GAMEMODE.ArsenalInterface.Favorites.Grid   for k, v in pairs(grid:GetChildren()) do  grid:RemoveItem(v)  end   for id, _ in pairs(GAMEMODE.ArsenalFavorites) do  local tab = GAMEMODE.Items[id]   if tab and tab.PointShop then  tab.Favorite = true   GAMEMODE:AddShopItem(  GAMEMODE.ArsenalInterface.Favorites.Grid,  id, tab  )  end  end end  local function SaveArsenalFavorites()  file.Write(GAMEMODE.FavoritesFile, Serialize(GAMEMODE.ArsenalFavorites)) end  local function AddArsenalFavorite(id)  GAMEMODE.ArsenalFavorites[id] = true   SaveArsenalFavorites() end  local function RemoveArsenalFavorite(id)  if GAMEMODE.ArsenalFavorites[id] then  GAMEMODE.ArsenalFavorites[id] = nil   SaveArsenalFavorites()  end end  hook.Add("Think", "ArsenalMenuThink", function()  local pan = GAMEMODE.ArsenalInterface  if pan and pan:IsValid() and pan:IsVisible() then  local mx, my = gui.MousePos()  local x, y = pan:GetPos()  if mx < x - 16 or my < y - 16 or mx > x + pan:GetWide() + 16 or my > y + pan:GetTall() + 16 then  pan:SetVisible(false)  end  end end)  local function ArsenalMenuCenterMouse(self)  local x, y = self:GetPos()  local w, h = self:GetSize()  gui.SetMousePos(x + w / 2, y + h / 2) end  local function worthmenuDoClick()  MakepWorth()  GAMEMODE.ArsenalInterface:Close() end  local function CanBuy(item, pan)  if item.NoClassicMode and GAMEMODE:IsClassicMode() then  return false  end   if item.Tier and GAMEMODE.LockItemTiers and not GAMEMODE.ZombieEscape and not GAMEMODE.ObjectiveMap and not GAMEMODE:IsClassicMode() then  if not GAMEMODE:GetWaveActive() then    if GAMEMODE:GetWave() + 1 < item.Tier then  return false  end  elseif GAMEMODE:GetWave() < item.Tier then  return false  end  end   if item.MaxStock and not GAMEMODE:HasItemStocks(item.Signature) then  return false  end      local scrap_value = item.Price == 8 and pan.Category == ITEMCAT_AMMO and (                             MySelf.ScrapDiscount < 1 and 5 or 6                         ) or math.ceil(GAMEMODE:PointsToScrap(item.Price) * (MySelf.ScrapDiscount or 1))   if not pan.NoPoints and MySelf:GetPoints() < math.floor(item.Price * (MySelf.ArsenalDiscount or 1)) then  return false  elseif pan.NoPoints and MySelf:GetAmmoCount("scrap") < scrap_value then  return false  end   return true end  local function ItemPanelThink(self)  local itemtab = FindItem(self.ID)  if itemtab then  local newstate = CanBuy(itemtab, self)  if newstate ~= self.m_LastAbleToBuy then  self.m_LastAbleToBuy = newstate  if newstate then  self.NameLabel:SetTextColor(COLOR_WHITE)  self.NameLabel:InvalidateLayout()  else  self.NameLabel:SetTextColor(COLOR_RED)  self.NameLabel:InvalidateLayout()  end  end   if self.StockLabel then  local stocks = GAMEMODE:GetItemStocks(self.ID)  if stocks ~= self.m_LastStocks then  self.m_LastStocks = stocks   self.StockLabel:SetText(stocks.." remaining")  self.StockLabel:SizeToContents()  self.StockLabel:AlignRight(10)  self.StockLabel:SetTextColor(stocks > 0 and COLOR_GRAY or COLOR_RED)  self.StockLabel:InvalidateLayout()  end  end  end end  local colBG = Color(20, 20, 20) local function ItemPanelPaint(self, w, h)  if self.Hovered or self.On then  local outline  if self.m_LastAbleToBuy then  outline = self.Depressed and COLOR_GREEN or COLOR_DARKGREEN  else  outline = self.Depressed and COLOR_RED or COLOR_DARKRED  end   draw.RoundedBox(8, 0, 0, w, h, outline)  end      local swep = self.ShopTabl.SWEP  if swep and MySelf:HasInventoryItem(swep) then         local level      = MySelf:GetTrinketItemLevel(swep)         local border_col = level == 0 and COLOR_RORANGE or GAMEMODE.WeaponQualityColors[level].Upg   draw.RoundedBox(8, 2, 2, w - 4, h - 4, border_col)  end   draw.RoundedBox(2, 4, 4, w - 8, h - 8, colBG)   return true end  function GM:HasPurchaseableAmmo(sweptable)  if sweptable.Primary and self.AmmoToPurchaseNames[sweptable.Primary.Ammo] then  return true  end end  local trinket_cdwn = 0 local function ItemPanelDoClick(self)  local shoptbl = self.ShopTabl  local viewer = self.NoPoints and GAMEMODE.RemantlerInterface.TrinketsFrame.Viewer or GAMEMODE.ArsenalInterface.Viewer   if not shoptbl then return end  local sweptable = GAMEMODE.ZSInventoryItemData[shoptbl.SWEP] or weapons.Get(shoptbl.SWEP)      local has_trinket = self.NoPoints and shoptbl.Category == ITEMCAT_TRINKETS and MySelf:HasInventoryItem(shoptbl.SWEP)   if not sweptable or GAMEMODE.AlwaysQuickBuy then         if has_trinket then             RunConsoleCommand("zs_upgraderemantle", shoptbl.SWEP)         else             if trinket_cdwn and trinket_cdwn > CurTime() then return end             if shoptbl.Category == ITEMCAT_TRINKETS then                 trinket_cdwn = CurTime() + 0.66             end              RunConsoleCommand("zs_pointsshopbuy", self.ID, self.NoPoints and "scrap")         end  return  end   for _, v in pairs(self:GetParent():GetChildren()) do  v.On = false  end  self.On = true   GAMEMODE:SupplyItemViewerDetail(viewer, sweptable, shoptbl)   local screenscale = BetterScreenScale()  local canammo = GAMEMODE:HasPurchaseableAmmo(sweptable)   local purb = viewer.m_PurchaseB  purb.ID = self.ID  purb.DoClick = function() RunConsoleCommand("zs_pointsshopbuy", self.ID, self.NoPoints and "scrap") end  purb:SetPos(canammo and viewer:GetWide() * 0.25 - viewer:GetWide() / 8 - 20 or viewer:GetWide() * 0.25, viewer:GetTall() - 128 * screenscale)  purb:SetVisible(not has_trinket)   local purl = viewer.m_PurchaseLabel  purl:SetPos(purb:GetWide() * 0.5 - purl:GetWide() * 0.5, purb:GetTall() * 0.35 - purl:GetTall() * 0.5)  purl:SetVisible(true)   local ppurbl = viewer.m_PurchasePrice  local price = self.NoPoints and math.ceil(GAMEMODE:PointsToScrap(shoptbl.Worth) * (MySelf.ScrapDiscount or 1)) or math.floor(shoptbl.Worth * (MySelf.ArsenalDiscount or 1))  ppurbl:SetText(price .. (self.NoPoints and " Scrap" or " Points"))  ppurbl:SizeToContents()  ppurbl:SetPos(purb:GetWide() * 0.5 - ppurbl:GetWide() * 0.5, purb:GetTall() * 0.75 - ppurbl:GetTall() * 0.5)  ppurbl:SetVisible(true)   GAMEMODE:AddViewerVariantList(viewer, sweptable, purb)   purb = viewer.m_AmmoB  if canammo then  purb.AmmoType = GAMEMODE.AmmoToPurchaseNames[sweptable.Primary.Ammo]  purb.DoClick = function() RunConsoleCommand("zs_pointsshopbuy", "ps_"..purb.AmmoType) end  end  purb:SetPos(viewer:GetWide() * (3/4) - purb:GetWide() * 0.5, viewer:GetTall() - 128 * screenscale)  purb:SetVisible(canammo)   purl = viewer.m_AmmoL  purl:SetPos(purb:GetWide() * 0.5 - purl:GetWide() * 0.5, purb:GetTall() * 0.35 - purl:GetTall() * 0.5)  purl:SetVisible(canammo)   ppurbl = viewer.m_AmmoPrice  price = math.floor(8 * (MySelf.ArsenalDiscount or 1))  ppurbl:SetText(price .. " Points")  ppurbl:SizeToContents()  ppurbl:SetPos(purb:GetWide() * 0.5 - ppurbl:GetWide() * 0.5, purb:GetTall() * 0.75 - ppurbl:GetTall() * 0.5)  ppurbl:SetVisible(canammo)   local fav = viewer.Favorite  local favtext = viewer.FavText  local id = self.ID  favtext:SetText(GAMEMODE.ArsenalFavorites[id] and "Unfavorite" or "Favorite")  favtext:SizeToContents()   fav:SetPos(viewer:GetWide() * 0.5 - fav:GetWide() * 0.5, viewer:GetTall() - 64 * screenscale)  fav:SetVisible(true)  fav.DoClick = function()  if GAMEMODE.ArsenalFavorites[id] then  RemoveArsenalFavorite(id)  favtext:SetText("Favorite")  else  AddArsenalFavorite(id)  favtext:SetText("Unfavorite")  end   favtext:SizeToContents()  favtext:SetPos(fav:GetWide() * 0.65 - favtext:GetWide() * 0.5, (fav:GetTall() * 0.5 - favtext:GetTall() * 0.5) + 2)   RefreshArsenalFavorites()  end   local favicon = viewer.FavoriteIcon  favicon:SetPos(fav:GetWide() * 0.25 - favicon:GetWide() * 0.5, fav:GetTall() * 0.5 - favicon:GetTall() * 0.5)  favicon:SetVisible(true)   favtext:SetPos(fav:GetWide() * 0.65 - favtext:GetWide() * 0.5, (fav:GetTall() * 0.5 - favtext:GetTall() * 0.5) + 2)  favtext:SetVisible(true) end  local function ArsenalMenuThink(self) end  function GM:AttachKillicon(kitbl, itempan, mdlframe, ammo, missing_skill, trinket)  local function imgAdj(img, maximgx, maximgy)  img:SizeToContents()  local iwidth, height = img:GetSize()  if height > maximgy then  img:SetSize(maximgy / height * img:GetWide(), maximgy)  iwidth, height = img:GetSize()  end  if iwidth > maximgx then  img:SetWidth(maximgx)  end   img:Center()  end   if #kitbl == 2 then  local img = vgui.Create("DImage", mdlframe)  img:SetImage(kitbl[1])  if kitbl[2] then  img:SetImageColor(kitbl[2])  end  if missing_skill then img:SetAlpha(50) end   imgAdj(img, mdlframe:GetWide() - 6, mdlframe:GetTall() - 3)  if ammo then img:SetSize(img:GetWide() + 3, img:GetTall() + 3) end  if trinket then img:SetSize(img:GetWide() + 10, img:GetTall() + 10) end   img:Center()         if itempan then      itempan.m_Icon = img         end  elseif #kitbl == 3 then  local label = vgui.Create("DLabel", mdlframe)  label:SetText(kitbl[2])  label:SetFont(kitbl[1] .. "pa" or DefaultFont)  label:SetTextColor(kitbl[3] or color_white)  label:SizeToContents()  label:SetContentAlignment(8)  label:DockMargin(0, label:GetTall() * 0.05, 0, 0)  label:Dock(FILL)         if itempan then      itempan.m_Icon = label         end  end   if missing_skill then  local img = vgui.Create("DImage", mdlframe)  img:SetImage("zombiesurvival/padlock.png")  img:SetImageColor(Color(255, 30, 30))  imgAdj(img, mdlframe:GetWide(), mdlframe:GetTall())   img:Center()  itempan.m_Padlock = img  end end  function GM:AddShopItem(list, i, tab, issub, nopointshop)  local screenscale = BetterScreenScale()   local nottrinkets = tab.Category ~= ITEMCAT_TRINKETS  local missing_skill = tab.SkillRequirement and not MySelf:IsSkillActive(tab.SkillRequirement)  local wid = 300   local itempan = vgui.Create("DButton")  itempan:SetText("")  itempan:SetSize(wid * screenscale, (((tab.Favorite and not nopointshop) or nottrinkets) and 100 or 60) * screenscale)  itempan.ID = tab.Signature or i  itempan.NoPoints = nopointshop  itempan.Cat = tab.Category  itempan.ShopTabl = tab  itempan.Think = ItemPanelThink  itempan.OnCursorEntered = function(me)  local shoptbl = FindItem(me.ID)  if not shoptbl then return end   local sweptable = GAMEMODE.ZSInventoryItemData[tab.SWEP] or weapons.Get(tab.SWEP)  if sweptable and GAMEMODE.AlwaysQuickBuy then             local viewer = nopointshop and self.RemantlerInterface.TrinketsFrame.Viewer or self.ArsenalInterface.Viewer  GAMEMODE:SupplyItemViewerDetail(viewer, sweptable, shoptbl)              local purb = viewer.m_PurchaseB             purb:SetPos(viewer:GetWide() * 0.25, viewer:GetTall() - 128 * screenscale)                               GAMEMODE:AddViewerVariantList(viewer, sweptable, purb)                       end  end  itempan.Paint = ItemPanelPaint  itempan.DoClick = ItemPanelDoClick  itempan.DoRightClick = function(me)         timer.Simple(0, function()             local menu = DermaMenu(itempan)             menu:AddOption("Buy", function() RunConsoleCommand("zs_pointsshopbuy", itempan.ID, itempan.NoPoints and "scrap") end)              local id = me.ID             if GAMEMODE.ArsenalFavorites[id] then                 menu:AddOption("Unfavorite", function() RemoveArsenalFavorite(id) RefreshArsenalFavorites() end)             else                 menu:AddOption("Favorite", function() AddArsenalFavorite(id) RefreshArsenalFavorites() end)             end       menu:Open()         end)  end  list:AddItem(itempan)      local item_name = tab.Name  if nottrinkets then  local mdlframe = vgui.Create("DPanel", itempan)  mdlframe:SetSize(wid/2 * screenscale, 100/2 * screenscale)  mdlframe:SetPos(wid/4 * screenscale, 100/5 * screenscale)  mdlframe:SetMouseInputEnabled(false)  mdlframe.Paint = function() end   local kitbl = killicon.Get(GAMEMODE.ZSInventoryItemData[tab.SWEP] and "weapon_zs_craftables" or tab.SWEP or tab.Model)  if kitbl then  self:AttachKillicon(kitbl, itempan, mdlframe, tab.Category == ITEMCAT_AMMO, missing_skill)  end  else         local item = tab.SWEP          local assoc_skill = self:GetItemAssociatedSkill(item, 0)         local skill       = assoc_skill.Skill         local item_data   = assoc_skill.ItemData          item_name = skill and skill.Name or item_data.PrintName     end   if tab.SWEP or tab.Countables then  local counter = vgui.Create("ItemAmountCounter", itempan)  counter:SetItemID(i)  end   local name = util.ClippedName(item_name, self:TypewriterFont() and 24 or 28) or ""  local namelab = EasyLabel(itempan, name, "ZSHUDFontSmaller", COLOR_WHITE)  namelab:SetPos(12 * screenscale, itempan:GetTall() * (nottrinkets and 0.8 or 0.7) - namelab:GetTall() * 0.5)  if missing_skill then  namelab:SetAlpha(30)  end  itempan.NameLabel = namelab   local alignri = (issub and (320 + 32) or (nopointshop and 32 or 20)) * screenscale   local pricelabel = EasyLabel(itempan, "", "ZSHUDFontTiny")  if missing_skill then  pricelabel:SetTextColor(COLOR_RED)  pricelabel:SetText(GAMEMODE.Skills[tab.SkillRequirement].Name)  else  local points = math.floor(tab.Price * (MySelf.ArsenalDiscount or 1))  local price = tostring(points)  if nopointshop then  price = tab.Price == 8 and tab.Category == ITEMCAT_AMMO and (                         MySelf.ScrapDiscount < 1 and 5 or 6                     ) or math.ceil(self:PointsToScrap(tab.Price) * (MySelf.ScrapDiscount or 1))             price = tostring(price)  end  pricelabel:SetText(price..(nopointshop and " Scrap" or " Points"))  end  pricelabel:SizeToContents()  pricelabel:AlignRight(alignri)   if tab.MaxStock then  local stocklabel = EasyLabel(itempan, tab.MaxStock.." remaining", "ZSHUDFontTiny")  stocklabel:SizeToContents()  stocklabel:AlignRight(alignri)  stocklabel:SetPos(itempan:GetWide() - stocklabel:GetWide(), itempan:GetTall() * 0.45 - stocklabel:GetTall() * 0.5)  itempan.StockLabel = stocklabel  end  pricelabel:SetPos(  itempan:GetWide() - pricelabel:GetWide() - 12 * screenscale,  itempan:GetTall() * (nottrinkets and 0.15 or 0.3) - pricelabel:GetTall() * 0.5  )   if missing_skill or tab.NoClassicMode and isclassic or tab.NoZombieEscape and GAMEMODE.ZombieEscape then  itempan:SetAlpha(160)  end   if not nottrinkets and tab.SubCategory then  local catlabel = EasyLabel(itempan, GAMEMODE.ItemSubCategories[tab.SubCategory], "ZSBodyTextFont")  catlabel:SizeToContents()  catlabel:SetPos(10, itempan:GetTall() * 0.3 - catlabel:GetTall() * 0.5)  end   return itempan end  function GM:ConfigureMenuTabs(tabs, tabhei, callback)  local screenscale = BetterScreenScale()   for _, tab in pairs(tabs) do  tab:SetFont(screenscale > 0.85 and "ZSHUDFontTiny" or "DefaultFontAA")  tab.GetTabHeight = function()  return tabhei  end  tab.PerformLayout = function(me)  me:ApplySchemeSettings()   if not me.Image then return end  me.Image:SetPos(7, me:GetTabHeight()/2 - me.Image:GetTall()/2 + 3)  me.Image:SetImageColor(Color(255, 255, 255, not me:IsActive() and 155 or 255))  end  tab.DoClick = function(me)  me:GetPropertySheet():SetActiveTab(me)   if callback then callback(tab) end  end  end end  function GM:ClearArsenalMenu()  if self.ArsenalInterface and self.ArsenalInterface:IsValid() then  self.ArsenalInterface:SetVisible(false)  self.ArsenalInterface = nil  end end  function GM:OpenArsenalMenu()  if self.ArsenalInterface and self.ArsenalInterface:IsValid() then  self.ArsenalInterface:SetVisible(true)  self.ArsenalInterface:CenterMouse()  return  end   local screenscale = BetterScreenScale()  local wid, hei = math.min(ScrW(), 960) * screenscale, math.min(ScrH(), 800) * screenscale  local tabhei = 24 * screenscale   local frame = vgui.Create("DFrame")  frame:SetSize(wid, hei)  frame:Center()  frame:SetDeleteOnClose(false)  frame:SetTitle(" ")  frame:SetDraggable(false)  if frame.btnClose and frame.btnClose:IsValid() then frame.btnClose:SetVisible(false) end  if frame.btnMinim and frame.btnMinim:IsValid() then frame.btnMinim:SetVisible(false) end  if frame.btnMaxim and frame.btnMaxim:IsValid() then frame.btnMaxim:SetVisible(false) end  frame.CenterMouse = ArsenalMenuCenterMouse  frame.Think = ArsenalMenuThink  self.ArsenalInterface = frame   local topspace = vgui.Create("DPanel", frame)  topspace:SetWide(wid - 16)   local title = EasyLabel(topspace, "The Points Shop", "ZSHUDFontSmall", COLOR_WHITE)  title:CenterHorizontal()  local subtitle = EasyLabel(topspace, "For all of your zombie apocalypse needs!", "ZSHUDFontTiny", COLOR_WHITE)  subtitle:CenterHorizontal()  subtitle:MoveBelow(title, 4)   local check = vgui.Create("DEXCheckBoxLabel", topspace)  check:SetText("Quick Buy Mode")  check:SetConVar("zs_alwaysquickbuy")  check:SetFont("ZSHUDFontSmallest")  check:SizeToContents()  check:CenterHorizontal(0.15)  check:MoveBelow(title, -4)   local _, y = subtitle:GetPos()  topspace:SetTall(y + subtitle:GetTall() + 4)  topspace:AlignTop(8)  topspace:CenterHorizontal()   local wsb = EasyButton(topspace, "Worth Menu", 8, 4)  wsb:SetFont("ZSHUDFontSmaller")  wsb:SizeToContents()  wsb:AlignRight(8)  wsb:AlignTop(8)  wsb.DoClick = worthmenuDoClick   local bottomspace = vgui.Create("DPanel", frame)  bottomspace:SetWide(topspace:GetWide())   local pointslabel = EasyLabel(bottomspace, "Points to spend: 0", "ZSHUDFontTiny", COLOR_GREEN)  pointslabel:AlignTop(4)  pointslabel:AlignLeft(8)  pointslabel.Think = pointslabelThink   local lab = EasyLabel(bottomspace, " ", "ZSHUDFontTiny")  lab:AlignTop(4)  lab:AlignRight(4)  frame.m_SpacerBottomLabel = lab   _, y = lab:GetPos()  bottomspace:SetTall(y + lab:GetTall() + 4)  bottomspace:AlignBottom(8)  bottomspace:CenterHorizontal()   local __, topy = topspace:GetPos()  local ___, boty = bottomspace:GetPos()   local propertysheet = vgui.Create("DPropertySheet", frame)  propertysheet:SetSize(wid - 340 * screenscale, boty - topy - 8 - topspace:GetTall())  propertysheet:MoveBelow(topspace, 4)  propertysheet:SetPadding(1)  propertysheet:CenterHorizontal(0.33)  frame.Property = propertysheet   local favpane = vgui.Create("DPanel", propertysheet)  favpane.Paint = function() end   frame.Favorites = favpane   local favscrollpane = vgui.Create("DScrollPanel", favpane)  favscrollpane:SetSize(propertysheet:GetWide(), propertysheet:GetTall() - 32)  favscrollpane:SetPos(0, 0)  favpane.Scroll = favscrollpane   local favgrid = vgui.Create("DGrid", favscrollpane)  favgrid:SetPos(0, 0)  favgrid:SetSize(propertysheet:GetWide() - 312, propertysheet:GetTall())  favgrid:SetCols(2)  favgrid:SetColWide(300 * screenscale)  favgrid:SetRowHeight(100 * screenscale)   favpane.Grid = favgrid   local sheet = propertysheet:AddSheet("Favorites", favpane, "icon16/heart.png", false, false)  sheet.Panel:SetPos(0, tabhei + 2)   local scroller = propertysheet:GetChildren()[1]  local dragbase = scroller:GetChildren()[1]  local tabs = dragbase:GetChildren()   self:ConfigureMenuTabs(tabs, tabhei)   for catid, catname in ipairs(GAMEMODE.ItemCategories) do  local hasitems = false  for i, tab in ipairs(GAMEMODE.Items) do  if tab.Category == catid and tab.PointShop then  hasitems = true  break  end  end   if hasitems then  local tabpane = vgui.Create("DPanel", propertysheet)  tabpane.Paint = function() end  tabpane.Grids = {}  tabpane.Buttons = {}   local usecats = catid == ITEMCAT_GUNS or catid == ITEMCAT_MELEE or catid == ITEMCAT_TRINKETS  local trinkets = catid == ITEMCAT_TRINKETS  local guns = catid == ITEMCAT_GUNS  local offset = 64 * screenscale   local itemframe = vgui.Create("DScrollPanel", tabpane)  itemframe:SetSize(propertysheet:GetWide(), propertysheet:GetTall() - (usecats and (32 + offset) or 32))  itemframe:SetPos(0, usecats and offset or 0)   local mkgrid = function()  local list = vgui.Create("DGrid", itemframe)  list:SetPos(0, 0)  list:SetSize(propertysheet:GetWide() - 312, propertysheet:GetTall())  list:SetCols(2)  list:SetColWide(300 * screenscale)  list:SetRowHeight((trinkets and 64 or 100) * screenscale)   return list  end   local subcats = GAMEMODE.ItemSubCategories  if usecats then  local ind, tbn = 1  for i = ind, (trinkets and #subcats or guns and 6 or 6) do  local ispacer = trinkets and ((i-1) % 3)+1 or i  local start = i == (catid == ITEMCAT_GUNS and 2 or ind)   tbn = EasyButton(tabpane, trinkets and subcats[i] or ("Tier " .. i), 2, 8)  tbn:SetFont("ZSHUDFontSmallest")  tbn:SetAlpha(start and 255 or 70)  tbn:AlignRight((trinkets and -35 or guns and -5 or -5) * screenscale -  (ispacer - ind) * (ind == 1 and (trinkets and 200 or guns and 100 or 90) or 145) * screenscale  )  tbn:AlignTop(trinkets and i <= 3 and 0 or trinkets and 28 or 16)  tbn:SetContentAlignment(5)  tbn:SizeToContents()  tbn.DoClick = function(me)  for k, v in pairs(tabpane.Grids) do  v:SetVisible(k == i)  tabpane.Buttons[k]:SetAlpha(k == i and 255 or 70)  end  end   tabpane.Grids[i] = mkgrid()  tabpane.Grids[i]:SetVisible(start)  tabpane.Buttons[i] = tbn  end  else  tabpane.Grid = mkgrid()  end   sheet = propertysheet:AddSheet(catname, tabpane, GAMEMODE.ItemCategoryIcons[catid], false, false)  sheet.Panel:SetPos(0, tabhei + 2)   for i, tab in ipairs(GAMEMODE.Items) do  if tab.PointShop and tab.Category == catid then  self:AddShopItem(  trinkets and tabpane.Grids[tab.SubCategory] or tabpane.Grid or tabpane.Grids[tab.Tier or 1],  i, tab  )  end  end   scroller = propertysheet:GetChildren()[1]  dragbase = scroller:GetChildren()[1]  tabs = dragbase:GetChildren()   self:ConfigureMenuTabs(tabs, tabhei)  end  end   for id, _ in pairs(GAMEMODE.ArsenalFavorites) do  local tab = GAMEMODE.Items[id]   if tab and tab.PointShop then  tab.Favorite = true   self:AddShopItem(favgrid, id, tab)  end  end   self:CreateItemInfoViewer(frame, propertysheet, topspace, bottomspace, MENU_POINTSHOP)   if table.Count(GAMEMODE.ArsenalFavorites) == 0 then  propertysheet:SetActiveTab(propertysheet.Items[math.min(2, #propertysheet.Items)].Tab)  else  propertysheet:SwitchToName("Favorites")  end   frame:MakePopup()  frame:CenterMouse() end 