local function BestiaryDoClick(self)  local undead = self.Undead  if undead then  pBestiary:SetBestiaryViewerUndead(self.Undead)  end end  local function SetBestiaryViewerUndead(self, undead)  if self.Viewer then  if self.Viewer:IsValid() then  self.Viewer:Remove()  end  self.Viewer = nil  end    if not undead then  return  end   local wid, hei = self:GetWide() * 0.6 - 16, self:GetTall() - self.ViewerY - 8  local screenscale = BetterScreenScale()   local viewer = vgui.Create("DPanel", self)  viewer:SetPaintBackground(false)  viewer:SetSize(wid, hei)  viewer:SetPos(self:GetWide() - viewer:GetWide() - 8, self.ViewerY)  self.Viewer = viewer   GAMEMODE:CreateBestiaryViewerGenericElems(viewer)    viewer.ViewerTitle:SetText(undead.Name)  viewer.ViewerTitle:PerformLayout()   local icon = undead.Icon or "models/player/zombie_classic.mdl"    viewer.m_IconImage:SetImage(icon)  viewer.m_IconImage:SetVisible(true)    local desctext = translate.Get(undead.Description) or ""   viewer.ViewerDescription:MoveBelow(viewer.m_IconImage, 8)  viewer.ViewerDescription:SetFont("ZSBodyTextFont")  viewer.ViewerDescription:SetText(desctext)   GAMEMODE:ViewerBestiaryStatBarUpdate(viewer, true, undead) end  function GM:CreateBestiaryViewerGenericElems(viewer)     local screenscale = BetterScreenScale()       local vtitle = EasyLabel(viewer, "", "ZSHUDFontSmaller", COLOR_GRAY)     vtitle:SetContentAlignment(8)     vtitle:SetSize(viewer:GetWide(), 24 * screenscale)     viewer.ViewerTitle = vtitle           local viconimage = vgui.Create("DImage", viewer)     viconimage:SetSize(128 * screenscale, 128 * screenscale)     viconimage:CenterHorizontal()     viconimage:MoveBelow(vtitle, 24)     viconimage:SetBackgroundColor(Color(0, 0, 0, 255))     viconimage:SetImageColor(color_white)     viconimage:SetMouseInputEnabled(false)     viconimage:SetVisible(false)     viewer.m_IconImage = viconimage         local vdescription = vgui.Create("DLabel", viewer)     vdescription:SetFont("ZSBodyTextFont")     vdescription:SetTextColor(COLOR_GRAY)     vdescription:SetMultiline(true)     vdescription:SetWrap(true)     vdescription:SetAutoStretchVertical(true)     vdescription:SetWide(viewer:GetWide() - 16)     vdescription:CenterHorizontal()     vdescription:SetText("")     vdescription:MoveBelow(viconimage, 24)     viewer.ViewerDescription = vdescription           local itemstats, itemsbs, itemsvs = {}, {}, {}     for i = 1, 11 do         local itemstat = vgui.Create("DLabel", viewer)         itemstat:SetFont("ZSBodyTextFont")         itemstat:SetTextColor(COLOR_GRAY)         itemstat:SetWide(viewer:GetWide() * 0.35)         itemstat:SetText("")         itemstat:CenterHorizontal(0.2)         itemstat:SetContentAlignment(8)         itemstat:MoveBelow(i == 1 and vdescription or itemstats[i-1], (i == 1 and 90 or 3) * screenscale)         table.insert(itemstats, itemstat)           local itemsb = vgui.Create("ZSItemStatBar", viewer)         itemsb:SetWide(viewer:GetWide() * 0.35)         itemsb:SetTall(8 * screenscale)         itemsb:CenterHorizontal(0.55)         itemsb:SetVisible(false)         itemsb:MoveBelow(i == 1 and vdescription or itemstats[i-1], ((i == 1 and 90 or 3) + 6) * screenscale)         table.insert(itemsbs, itemsb)           local itemsv = vgui.Create("DLabel", viewer)         itemsv:SetFont("ZSBodyTextFont")         itemsv:SetTextColor(COLOR_GRAY)         itemsv:SetWide(viewer:GetWide() * 0.3)         itemsv:SetText("")         itemsv:CenterHorizontal(0.85)         itemsv:SetContentAlignment(8)         itemsv:MoveBelow(i == 1 and vdescription or itemstats[i-1], (i == 1 and 90 or 3) * screenscale)         table.insert(itemsvs, itemsv)     end         viewer.ItemStats = itemstats     viewer.ItemStatValues = itemsvs     viewer.ItemStatBars = itemsbs   end   function GM:ViewerBestiaryStatBarUpdate(viewer, display, undead)     local done, statshow = {}     local speedtotext = GAMEMODE.SpeedToText             local sweptable = weapons.Get(undead.SWEP)     if not sweptable then return end         table.Merge(sweptable, undead)       display = false         for i = 1, 11 do         if display then             viewer.ItemStats[i]:SetText("")             viewer.ItemStatValues[i]:SetText("")             viewer.ItemStatBars[i]:SetVisible(false)             continue         end         local statshowbef = statshow         for k, stat in pairs(GAMEMODE.BestiaryStatBarVals) do             local statval = stat[6] and sweptable[stat[6]][stat[1]] or sweptable[stat[1]]             if not done[stat] and statval and statval ~= -1 then                 statshow = stat                 done[stat] = true                   break             end         end         if statshowbef and statshowbef[1] == statshow[1] then             viewer.ItemStats[i]:SetText("")             viewer.ItemStatValues[i]:SetText("")             viewer.ItemStatBars[i]:SetVisible(false)             continue         end           local statnum, stattext = statshow[6] and sweptable[statshow[6]][statshow[1]] or sweptable[statshow[1]]         if statshow[1] == "Damage" and sweptable.Primary.NumShots and sweptable.Primary.NumShots > 1 then             stattext = statnum .. " x " .. sweptable.Primary.NumShots          elseif statshow[1] == "WalkSpeed" then             stattext = speedtotext[SPEED_NORMAL]             if speedtotext[sweptable[statshow[1]]] then                 stattext = speedtotext[sweptable[statshow[1]]]             elseif sweptable[statshow[1]] < SPEED_SLOWEST then                 stattext = speedtotext[-1]             end         elseif statshow[1] == "ClipSize" then             stattext = statnum / sweptable.RequiredClip         elseif statshow[1] == "Points" then             stattext = math.Round(statnum,2)         else             stattext = statnum         end           viewer.ItemStats[i]:SetText(statshow[2])         viewer.ItemStatValues[i]:SetText(stattext)           if statshow[1] == "Damage" then             statnum = statnum * sweptable.Primary.NumShots         elseif statshow[1] == "ClipSize" then             statnum = statnum / sweptable.RequiredClip         end           viewer.ItemStatBars[i].Stat = statnum         viewer.ItemStatBars[i].StatMin = statshow[3]         viewer.ItemStatBars[i].StatMax = statshow[4]         viewer.ItemStatBars[i].BadHigh = statshow[5]         viewer.ItemStatBars[i]:SetVisible(true)     end     end  function MakepBestiary(silent)  if not silent then  PlayMenuOpenSound()  end   if pBestiary then  pBestiary:SetAlpha(0)  pBestiary:AlphaTo(255, 0.15, 0)  pBestiary:SetVisible(true)  pBestiary:MakePopup()  return  end   local added = {}    local common = {}  local demibosses = {}  local bosses = {}    for i=1, #GAMEMODE.ZombieClasses do  if not added[zombie] then  local tb = GAMEMODE.ZombieClasses[i]   if tb.Special then continue end   if tb.Boss then  bosses[i] = tb   elseif tb.Demiboss then  demibosses[i] = tb  elseif not tb.GreatEvil then  common[i] = tb  end  added[i] = true  end  end    local screenscale = BetterScreenScale()  local wid, hei = math.min(ScrW(), 700) * screenscale, math.min(ScrH(), 700) * screenscale  local tabhei = 24 * screenscale   local frame = vgui.Create("DFrame")  frame:SetDeleteOnClose(false)  frame:SetSize(wid, hei)  frame:SetTitle(" ")  frame:Center()  frame.SetBestiaryViewerUndead = SetBestiaryViewerUndead  pBestiary = frame   local y = 8   local title = EasyLabel(frame, "Undead Bestiary", "ZSHUDFont", color_white)  title:SetPos(wid * 0.5 - title:GetWide() * 0.5, y)  y = y + title:GetTall() + 8   local propertysheet = vgui.Create("DPropertySheet", frame)   propertysheet:SetSize(wid * 0.4 - 8, hei - title:GetTall() - 32 * screenscale)  propertysheet:MoveBelow(title, 16 * screenscale)  propertysheet:SetPadding(1)   local tree = vgui.Create("DTree", propertysheet)  tree:SetWide(propertysheet:GetWide() - 16)  local sheet = propertysheet:AddSheet("Common", tree, nil, false, false)  sheet.Panel:SetPos(0, tabhei + 2)  tree:SetIndentSize(4)  frame.CommonTree = tree    tree = vgui.Create("DTree", propertysheet)  tree:SetWide(propertysheet:GetWide() - 16)  sheet = propertysheet:AddSheet("Demi Bosses", tree, nil, false, false)  sheet.Panel:SetPos(0, tabhei + 2)  tree:SetIndentSize(4)  frame.DemibossesTree = tree    tree = vgui.Create("DTree", propertysheet)  tree:SetWide(propertysheet:GetWide() - 16)  sheet = propertysheet:AddSheet("Bosses", tree, nil, false, false)  sheet.Panel:SetPos(0, tabhei + 2)  tree:SetIndentSize(4)  frame.BossesTree = tree   local scroller = propertysheet:GetChildren()[1]  local dragbase = scroller:GetChildren()[1]  local tabs = dragbase:GetChildren()   GAMEMODE:ConfigureMenuTabs(tabs, tabhei)   frame.ViewerY = y      frame.CommonWaveNodes = {}     for i = 1, 6 do  local waveNode = frame.CommonTree:AddNode("Wave " .. i)         frame.CommonWaveNodes[i] = waveNode     end   for _, undead in pairs(common) do  local undeadNode         local wave = undead.Wave         wave = (not wave or wave == 0) and 1 or wave          local nodeToAddTo = frame.CommonWaveNodes[wave]   undeadNode = nodeToAddTo:AddNode(undead.Name)  undeadNode.Undead = undead  undeadNode.DoClick = BestiaryDoClick  end    for _, undead in pairs(demibosses) do  local undeadNode  undeadNode = frame.DemibossesTree:AddNode(undead.Name)  undeadNode.Undead = undead  undeadNode.DoClick = BestiaryDoClick  end    for _, undead in pairs(bosses) do  local undeadNode  undeadNode = frame.BossesTree:AddNode(undead.Name)  undeadNode.Undead = undead  undeadNode.DoClick = BestiaryDoClick  end    frame:SetBestiaryViewerUndead()   MakepBestiary(true) end