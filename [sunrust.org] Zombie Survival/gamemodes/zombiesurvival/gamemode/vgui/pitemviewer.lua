net.Receive("zs_remantleconf_trinket", function()     local inventory_menu = GAMEMODE.InventoryMenu     if inventory_menu and inventory_menu:IsVisible() and inventory_menu.LastClicked and inventory_menu.LastClicked.DoClick then         local btn = inventory_menu.LastClicked          btn:DoClick()         btn:DoClick()     end      local remantler_interface   = GAMEMODE.RemantlerInterface     if not remantler_interface then return end      local viewer    = remantler_interface.TrinketsFrame.Viewer     local conf      = viewer.RemantleConfirmation     if not conf then return end      GAMEMODE:SupplyItemViewerDetail(viewer, conf.SwepTable, conf.ShopTable)      viewer.m_PurchaseB:SetVisible(false) end)  function GM:ViewerStatBarUpdate(viewer, display, sweptable)  local done, statshow = {}   for i = 1, 11 do  if display or sweptable.Base == "weapon_zs_basethrown" then  viewer.ItemStats[i]:SetText("")  viewer.ItemStatValues[i]:SetText("")  viewer.ItemStatBars[i]:SetVisible(false)  continue  end  local statshowbef = statshow  for _, stat in ipairs(GAMEMODE.WeaponStatBarVals) do  local statval = stat.Pri and sweptable.Primary[stat.Var] or sweptable[stat.Var]   local skip =  (not stat.AmmoIfHasCheck and sweptable.AmmoIfHas or  sweptable.HideStat and sweptable.HideStat[stat.Var] or  stat.Var == "MeleeKnockBack" and sweptable.MeleeKnockBack == 0) and not sweptable.DisplayOnlyGunStats              local display_func = not stat.DisplayFunc or stat.DisplayFunc(sweptable)   if not done[stat.Var] and statval and statval ~= -1 and not skip and display_func then  statshow = stat  done[stat.Var] = true   break  end  end   if statshowbef and statshowbef.Var == statshow.Var then  viewer.ItemStats[i]:SetText("")  viewer.ItemStatValues[i]:SetText("")  viewer.ItemStatBars[i]:SetVisible(false)  continue  end   local statnum, stattext = statshow.Pri and sweptable.Primary[statshow.Var] or sweptable[statshow.Var]  if statshow.TextCbk then  stattext = statshow.TextCbk(statnum, sweptable)  else  stattext = statnum  end   viewer.ItemStats[i]:SetText(statshow.ColCbk and statshow.ColCbk(sweptable) or statshow.Name)  viewer.ItemStatValues[i]:SetText(stattext)   if statshow.NumCbk then  statnum = statshow.NumCbk(statnum, sweptable)  end   viewer.ItemStatBars[i].Stat = statnum  viewer.ItemStatBars[i].StatMin = statshow.Range[1]  viewer.ItemStatBars[i].StatMax = statshow.Range[2]  viewer.ItemStatBars[i].BadHigh = statshow.LessGood  viewer.ItemStatBars[i]:SetVisible(true)  end end  function GM:SupplyItemViewerDetail(viewer, sweptable, shoptbl)  viewer.ViewerTitle:SetText(sweptable.PrintName)  viewer.ViewerTitle:PerformLayout()   local desctext = sweptable.Description or ""  if not self.ZSInventoryItemData[shoptbl.SWEP] then  viewer.ModelPanel:SetModel(sweptable.WorldModel)          if sweptable and weapons.Get(shoptbl.SWEP) then             viewer.ModelPanel:SetupSCK(sweptable)             viewer.ModelPanel:SetUseAutoCam( true )         end   local mins, maxs = viewer.ModelPanel.Entity:GetRenderBounds()  viewer.ModelPanel:SetCamPos(mins:Distance(maxs) * Vector(1.15, 0.75, 0.5))  viewer.ModelPanel:SetLookAt((mins + maxs) / 2)  viewer.ModelBackground:SetVisible(true)   if sweptable.NoDismantle then  desctext = desctext .. "\nCannot be dismantled for scrap."  end          viewer.ViewerDescription:SetText(desctext)  viewer.ViewerDescription:MoveBelow(viewer.ModelBackground, 8)  viewer.ViewerDescription:SetFont("ZSBodyTextFont")  else         local item        = shoptbl.SWEP          local quality     = MySelf:GetTrinketItemLevel(item) or 0          local assoc_skill = self:GetItemAssociatedSkill(item, quality)         local skill       = assoc_skill.Skill         local item_data   = assoc_skill.ItemData   viewer.ModelPanel:SetModel("")  viewer.ModelBackground:SetVisible(false)          viewer.ViewerDescription:SetText(desctext)  viewer.ViewerDescription:MoveBelow(viewer.ViewerTitle, 20)  viewer.ViewerDescription:SetFont("ZSBodyTextFontBig")          viewer.ViewerTitle:SetText(skill and skill.Name or item_data.PrintName)         viewer.ViewerTitle:SetTextColor(quality == 0 and COLOR_WHITE or GAMEMODE.WeaponQualityColors[quality].Upg)         local desc_key = "Description" .. (skill and quality and self:GetAffixOfQuality(0, quality) or "")         desctext = sweptable[desc_key] or ""         viewer.ViewerDescription:SetText(desctext)          viewer.RemantleConfirmation = {             SwepTable = sweptable,             ShopTable = shoptbl         }          if viewer.ViewerTitleNext then             local next_trinket = skill and quality <= 2 and MySelf:HasInventoryItem(item)              viewer.NextTrinketButton.DoClick = function() RunConsoleCommand("zs_upgraderemantle", item) end              viewer.ViewerTitleNext:SetVisible(next_trinket)             viewer.ViewerDescriptionNext:SetText("")              viewer.NextTrinketUpg:SetVisible(next_trinket)             viewer.NextTrinketCost:SetVisible(next_trinket)             viewer.NextTrinketButton:SetVisible(next_trinket)              if next_trinket then                 self:ShowNextTrinketInventoryInfo(viewer, sweptable, item, quality)             end         end  end   local withdamage = sweptable.Primary and sweptable.Primary.Damage  local statcats = shoptbl.Category ~= ITEMCAT_GUNS and shoptbl.Category ~= ITEMCAT_MELEE   self:ViewerStatBarUpdate(viewer, statcats and not withdamage, sweptable)   if self:HasPurchaseableAmmo(sweptable) and self.AmmoNames[string.lower(sweptable.Primary.Ammo)] then  local lower = string.lower(sweptable.Primary.Ammo)   viewer.ViewerAmmoType:SetText(self.AmmoNames[lower])  viewer.ViewerAmmoType:PerformLayout()   local ki = killicon.Get(self.AmmoIcons[lower])   viewer.ViewerAmmoIcon:SetImage(ki[1])  if ki[2] then viewer.ViewerAmmoIcon:SetImageColor(ki[2]) end   viewer.ViewerAmmoIcon:SetVisible(true)  else  viewer.ViewerAmmoType:SetText("")  viewer.ViewerAmmoIcon:SetVisible(false)  end end  function GM:AddViewerVariantList(viewer, sweptable, purb)  local screenscale = BetterScreenScale()   local var_count, var_listing = viewer.VariantsCount, viewer.VariantsListing  local branches = sweptable.Branches   if branches then  local add = purb == viewer and -500 * screenscale or 0  local num_branches = #branches   var_count:SetText(#branches .. (num_branches == 1 and " Variant" or " Variants"))  var_count:SizeToContents()  var_count:CenterHorizontal()  var_count:MoveAbove(purb, 34 * screenscale + add)   local str = ""  for _, branch_detail in ipairs(branches) do  local col_name = branch_detail.CollectiveName or "Variant"  str = str == "" and str .. col_name or str .. ", " .. col_name  end   var_listing:SetText(str)  var_listing:SizeToContents()  var_listing:CenterHorizontal()  var_listing:MoveAbove(purb, 16 * screenscale + add)  end  var_count:SetVisible(branches)  var_listing:SetVisible(branches) end local PANEL = {}  PANEL.Stat = 50 PANEL.StatMin = 0 PANEL.StatMax = 100 PANEL.BadHigh = false PANEL.LerpStat = 50 function PANEL:Init()  self:SetMouseInputEnabled(false)  self:SetKeyboardInputEnabled(false) end  local matGradientLeft = CreateMaterial("gradient-l", "UnlitGeneric", {["$basetexture"] = "vgui/gradient-l", ["$vertexalpha"] = "1", ["$vertexcolor"] = "1", ["$ignorez"] = "1", ["$nomip"] = "1"}) function PANEL:Paint(w, h)  self.LerpStat = Lerp(FrameTime() * 4, self.LerpStat, self.Stat)  local progress = math.Clamp((self.StatMax - self.LerpStat)/(self.StatMax - self.StatMin), 0, 1)  if not self.BadHigh then  progress = 1 - progress  end   surface.SetDrawColor(0, 0, 0, 220)  surface.DrawRect(0, 0, w, 5)  surface.SetDrawColor(250, 250, 250, 20)  surface.DrawRect(math.min(w * 0.95, w * progress), 0, 1, 5)  surface.SetDrawColor(200 * (1 - progress), 200 * progress, 10, 160)  surface.SetMaterial(matGradientLeft)  surface.DrawTexturedRect(0, 0, w * progress, 4) end vgui.Register("ZSItemStatBar", PANEL, "Panel")  function GM:CreateItemViewerGenericElems(viewer)  local screenscale = BetterScreenScale()   local vtitle = EasyLabel(viewer, "", "ZSHUDFontSmaller", COLOR_GRAY)  vtitle:SetContentAlignment(8)  vtitle:SetSize(viewer:GetWide(), 24 * screenscale)  viewer.ViewerTitle = vtitle   local vammot = EasyLabel(viewer, "", "ZSBodyTextFontBig", COLOR_GRAY)  vammot:SetContentAlignment(8)  vammot:SetSize(viewer:GetWide(), 16 * screenscale)  vammot:MoveBelow(vtitle, 20)  vammot:CenterHorizontal(0.35)  viewer.ViewerAmmoType = vammot   local vammoi = vgui.Create("DImage", viewer)  vammoi:SetSize(40, 40)  vammoi:MoveBelow(vtitle, 8)  vammoi:CenterHorizontal(0.7)  viewer.ViewerAmmoIcon = vammoi   local vbg = vgui.Create("DPanel", viewer)  vbg:SetSize(200 * screenscale, 100 * screenscale)  vbg:CenterHorizontal()  vbg:MoveBelow(vammot, 24)  vbg:SetBackgroundColor(Color(0, 0, 0, 255))  vbg:SetVisible(false)  viewer.ModelBackground = vbg   local modelpanel = vgui.Create("DModelPanelEx", vbg)  modelpanel:SetModel("")  modelpanel:AutoCam()  modelpanel:Dock(FILL)  modelpanel:SetDirectionalLight(BOX_TOP, Color(100, 255, 100))  modelpanel:SetDirectionalLight(BOX_FRONT, Color(255, 100, 100))  viewer.ModelPanel = modelpanel   local itemdesc = vgui.Create("DLabel", viewer)  itemdesc:SetFont("ZSBodyTextFont")  itemdesc:SetTextColor(COLOR_GRAY)  itemdesc:SetMultiline(true)  itemdesc:SetWrap(true)  itemdesc:SetAutoStretchVertical(true)  itemdesc:SetWide(viewer:GetWide() - 16)  itemdesc:CenterHorizontal()  itemdesc:SetText("")  itemdesc:MoveBelow(vbg, 8)  viewer.ViewerDescription = itemdesc   local itemstats, itemsbs, itemsvs = {}, {}, {}  for i = 1, 11 do  local itemstat = vgui.Create("DLabel", viewer)  itemstat:SetFont("ZSBodyTextFont")  itemstat:SetTextColor(COLOR_GRAY)  itemstat:SetWide(viewer:GetWide() * 0.35)  itemstat:SetText("")  itemstat:CenterHorizontal(0.2)  itemstat:SetContentAlignment(8)  itemstat:MoveBelow(i == 1 and vbg or itemstats[i-1], (i == 1 and 100 or 5) * screenscale)  table.insert(itemstats, itemstat)   local itemsb = vgui.Create("ZSItemStatBar", viewer)  itemsb:SetWide(viewer:GetWide() * 0.35)  itemsb:SetTall(8 * screenscale)  itemsb:CenterHorizontal(0.55)  itemsb:SetVisible(false)  itemsb:MoveBelow(i == 1 and vbg or itemstats[i-1], ((i == 1 and 100 or 8) + 3) * screenscale)  table.insert(itemsbs, itemsb)   local itemsv = vgui.Create("DLabel", viewer)  itemsv:SetFont("ZSBodyTextFont")  itemsv:SetTextColor(COLOR_GRAY)  itemsv:SetWide(viewer:GetWide() * 0.3)  itemsv:SetText("")  itemsv:CenterHorizontal(0.85)  itemsv:SetContentAlignment(8)  itemsv:MoveBelow(i == 1 and vbg or itemstats[i-1], (i == 1 and 100 or 5) * screenscale)  table.insert(itemsvs, itemsv)  end  viewer.ItemStats = itemstats  viewer.ItemStatValues = itemsvs  viewer.ItemStatBars = itemsbs end  MENU_POINTSHOP = 1 MENU_WORTH = 2 MENU_REMANTLER = 3  function GM:CreateNextTrinketElements(viewer)     local screenscale = BetterScreenScale()      local next_trinket = EasyLabel(viewer, "", "ZSHUDFontSmaller", COLOR_GRAY)     next_trinket:SetVisible(false)          local next_trinket_desc = EasyLabel(viewer, "", "ZSHUDFontSmaller", COLOR_GRAY)     next_trinket_desc:SetFont("ZSBodyTextFontBig")     next_trinket_desc:SetTextColor(COLOR_GRAY)     next_trinket_desc:SetMultiline(true)     next_trinket_desc:SetWrap(true)     next_trinket_desc:SetAutoStretchVertical(true)     next_trinket_desc:SetWide(viewer:GetWide() - 16)     next_trinket_desc:CenterHorizontal()     next_trinket_desc:SetText("")          local next_trinket_upg_img = vgui.Create("DImage", viewer)     next_trinket_upg_img:SetImage("zombiesurvival/down.png")     next_trinket_upg_img:SetSize(64 * screenscale, 64 * screenscale)     next_trinket_upg_img:SetVisible(false)          local next_trinket_upg_btn = vgui.Create("DButton", viewer)     next_trinket_upg_btn:SetText("Upgrade Trinket")     next_trinket_upg_btn:SetVisible(false)     next_trinket_upg_btn:SetFont("ZSHUDFontSmaller")     next_trinket_upg_btn:SizeToContents()      local next_trinket_upg_cost = EasyLabel(viewer, "", "ZSBodyTextFont", COLOR_GRAY)     next_trinket_upg_cost:SetVisible(false)      viewer.ViewerTitleNext          = next_trinket     viewer.ViewerDescriptionNext    = next_trinket_desc     viewer.NextTrinketUpg           = next_trinket_upg_img     viewer.NextTrinketButton        = next_trinket_upg_btn     viewer.NextTrinketCost          = next_trinket_upg_cost end  function GM:CreateItemInfoViewer(frame, propertysheet, topspace, bottomspace, menutype, cbk)  local __, topy = topspace:GetPos()  local ___, boty = bottomspace:GetPos()  local screenscale = BetterScreenScale()   local worthmenu = menutype == MENU_WORTH  local remantler = menutype == MENU_REMANTLER   local viewer = vgui.Create("DPanel", frame)   viewer:SetPaintBackground(false)  viewer:SetSize(  remantler and 320 * screenscale  or frame:GetWide() - propertysheet:GetWide() + (worthmenu and 312 or -16) * screenscale,  boty - topy - 8 - topspace:GetTall() - (worthmenu and 32 or 0)  )   viewer:MoveBelow(topspace, 4 + (worthmenu and 32 or 0))  if menutype == MENU_POINTSHOP or worthmenu then  viewer:MoveRightOf(propertysheet, 8 - (worthmenu and 328 or 0) * screenscale)  else  if cbk then  viewer:SetPos(frame:GetWide() - viewer:GetWide(), 64 * screenscale)  else  viewer:Dock(RIGHT)  end  end   if cbk then  cbk(viewer)  else  frame.Viewer = viewer  end   self:CreateItemViewerGenericElems(viewer)      if remantler then         self:CreateNextTrinketElements(viewer)     end   local variants_count = EasyLabel(viewer, "", "ZSBodyTextFontBig", COLOR_WHITE)  variants_count:SetVisible(false)  viewer.VariantsCount = variants_count   local variants_listing = EasyLabel(viewer, "", "ZSBodyTextFont", COLOR_WHITE)  variants_listing:SetVisible(false)  viewer.VariantsListing = variants_listing   local purchaseb = vgui.Create("DButton", viewer)  purchaseb:SetText("")  purchaseb:SetSize(viewer:GetWide() / 2, 54 * screenscale)  purchaseb:SetVisible(false)  viewer.m_PurchaseB = purchaseb   local namelab = EasyLabel(purchaseb, "Purchase", "ZSBodyTextFontBig", COLOR_WHITE)  namelab:SetVisible(false)  viewer.m_PurchaseLabel = namelab   local pricelab = EasyLabel(purchaseb, "", "ZSBodyTextFont", COLOR_WHITE)  pricelab:SetVisible(false)  viewer.m_PurchasePrice = pricelab   local ammopb = vgui.Create("DButton", viewer)  ammopb:SetText("")  ammopb:SetSize(viewer:GetWide() / 4, 54 * screenscale)  ammopb:SetVisible(false)  viewer.m_AmmoB = ammopb   namelab = EasyLabel(ammopb, "Ammo", "ZSBodyTextFontBig", COLOR_WHITE)  namelab:SetVisible(false)  viewer.m_AmmoL = namelab   pricelab = EasyLabel(ammopb, "", "ZSBodyTextFont", COLOR_WHITE)  pricelab:SetVisible(false)  viewer.m_AmmoPrice = pricelab   local favourite = vgui.Create("DButton", viewer)  favourite:SetText("")  favourite:SetSize(viewer:GetWide() * 0.75, 40 * screenscale)  favourite:SetVisible(false)  viewer.Favorite = favourite   local favicon = vgui.Create("DImage", favourite)  favicon:SetImage("zombiesurvival/killicons/heart_icon.png")  favicon:SetSize(32 * screenscale, 32 * screenscale)  favicon:SetVisible(false)  viewer.FavoriteIcon = favicon   local favtext = EasyLabel(favourite, "Favorite", "ZSBodyTextFont", COLOR_WHITE)  favtext:SetVisible(false)  viewer.FavText = favtext end