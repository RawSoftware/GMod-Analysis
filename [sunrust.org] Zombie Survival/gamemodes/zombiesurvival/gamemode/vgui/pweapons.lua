local function WeaponButtonDoClick(self)  local swep = self.SWEP  if swep then  pWeapons:SetWeaponViewerSWEP(self.SWEP, self.Category, self.Comps, self.Branches)  end end  local function SetWeaponViewerSWEP(self, swep, category, comps, branches)  if self.Viewer then  if self.Viewer:IsValid() then  self.Viewer:Remove()  end  self.Viewer = nil  end   local wid, hei = self:GetWide() * 0.6 - 16, self:GetTall() - self.ViewerY - 8  local screenscale = BetterScreenScale()   local viewer = vgui.Create("DPanel", self)  viewer:SetPaintBackground(false)  viewer:SetSize(wid, hei)  viewer:SetPos(self:GetWide() - viewer:GetWide() - 8, self.ViewerY)  self.Viewer = viewer   if not swep then return end  local sweptable = weapons.Get(swep)  if not sweptable then return end   GAMEMODE:CreateItemViewerGenericElems(viewer)   viewer.ViewerTitle:SetText(sweptable.PrintName)  viewer.ViewerTitle:PerformLayout()   local desctext = sweptable.Description or ""   viewer.ModelPanel:SetModel(sweptable.WorldModel)  viewer.ModelPanel:SetupSCK(sweptable)  viewer.ModelPanel:SetUseAutoCam(true)   viewer.ModelBackground:SetVisible(true)   if sweptable.NoDismantle then  desctext = desctext .. "\nCannot be dismantled for scrap."  end   viewer.ViewerDescription:MoveBelow(viewer.ModelBackground, 8)  viewer.ViewerDescription:SetFont("ZSBodyTextFont")  viewer.ViewerDescription:SetText(desctext)   GAMEMODE:ViewerStatBarUpdate(viewer, category ~= ITEMCAT_GUNS and category ~= ITEMCAT_MELEE, sweptable)  if GAMEMODE:HasPurchaseableAmmo(sweptable) and GAMEMODE.AmmoNames[string.lower(sweptable.Primary.Ammo)] then  local lower = string.lower(sweptable.Primary.Ammo)   viewer.ViewerAmmoType:SetText(GAMEMODE.AmmoNames[lower])  viewer.ViewerAmmoType:PerformLayout()   local ki = killicon.Get(GAMEMODE.AmmoIcons[lower])   viewer.ViewerAmmoIcon:SetImage(ki[1])  if ki[2] then viewer.ViewerAmmoIcon:SetImageColor(ki[2]) end   viewer.ViewerAmmoIcon:SetVisible(true)  else  viewer.ViewerAmmoType:SetText("")  viewer.ViewerAmmoIcon:SetVisible(false)  end   if not viewer.m_Recipe1 then  local recipe = EasyLabel(viewer, "", "ZSBodyTextFont", COLOR_TAN)  recipe:SetContentAlignment(8)  recipe:SetSize(viewer:GetWide(), 16 * screenscale)  recipe:MoveBelow(viewer.ItemStatBars[6], 10)  viewer.m_Recipe1 = recipe  end   if not viewer.m_Recipe2 then  local recipe = EasyLabel(viewer, "", "ZSBodyTextFont", COLOR_TAN)  recipe:SetContentAlignment(8)  recipe:SetSize(viewer:GetWide(), 16 * screenscale)  recipe:MoveBelow(viewer.m_Recipe1, 10)  viewer.m_Recipe2 = recipe  end   viewer.m_Recipe1:SetText(comps and GAMEMODE.ZSInventoryItemData[comps[1]].PrintName or "")  viewer.m_Recipe2:SetText(comps and weapons.Get(comps[2]).PrintName or "")   viewer.Branches = {}  for i = 1, 3 do  local lbl = EasyLabel(viewer, "", "ZSBodyTextFont", COLOR_SOFTRED)  lbl:SetContentAlignment(8)  lbl:SetSize(viewer:GetWide(), 16 * screenscale)  lbl:MoveBelow(viewer.Branches[i-1] or viewer.m_Recipe2, i == 1 and 25 or 10)    viewer.Branches[i] = lbl   if branches and branches[i] and branches[i].PrintName then  lbl:SetText("Branch " .. i .. " : " .. branches[i].PrintName)  end  end end  function MakepWeapons(silent)  if not silent then  PlayMenuOpenSound()  end   if pWeapons then  pWeapons:SetAlpha(0)  pWeapons:AlphaTo(255, 0.15, 0)  pWeapons:SetVisible(true)  pWeapons:MakePopup()  return  end   local added = {}  local addedcat = {}   local weps = {}  local tools = {}  local crafts = {}  local special = {}   for _, tab in ipairs(GAMEMODE.Items) do  if tab.SWEP and not added[tab.SWEP] and weapons.Get(tab.SWEP) then  if tab.Category == ITEMCAT_TOOLS then  tools[#tools + 1] = tab.SWEP  else  weps[#weps + 1] = tab.SWEP  end   added[tab.SWEP] = true  addedcat[tab.SWEP] = tab.Category  end  end   for wep, comps in pairs(GAMEMODE.Assemblies) do  if not added[wep] and weapons.Get(wep) then  crafts[#crafts + 1] = wep  added[wep] = true  end  end   for _, wep in pairs(GAMEMODE.Flasks) do  if not added[wep] and weapons.Get(wep) then  special[#special + 1] = wep  added[wep] = true  end  end   local screenscale = BetterScreenScale()  local wid, hei = math.min(ScrW(), 700) * screenscale, math.min(ScrH(), 700) * screenscale  local tabhei = 24 * screenscale   local frame = vgui.Create("DFrame")  frame:SetDeleteOnClose(false)  frame:SetSize(wid, hei)  frame:SetTitle(" ")  frame:Center()  frame.SetWeaponViewerSWEP = SetWeaponViewerSWEP  pWeapons = frame   local y = 8   local title = EasyLabel(frame, "Weapon Database", "ZSHUDFont", color_white)  title:SetPos(wid * 0.5 - title:GetWide() * 0.5, y)  y = y + title:GetTall() + 8   local propertysheet = vgui.Create("DPropertySheet", frame)   propertysheet:SetSize(wid * 0.4 - 8, hei - title:GetTall() - 32 * screenscale)  propertysheet:MoveBelow(title, 16 * screenscale)  propertysheet:SetPadding(1)   local tree = vgui.Create("DTree", propertysheet)  tree:SetWide(propertysheet:GetWide() - 16)  local sheet = propertysheet:AddSheet("Weapons", tree, nil, false, false)  sheet.Panel:SetPos(0, tabhei + 2)  tree:SetIndentSize(4)  frame.WeaponsTree = tree   tree = vgui.Create("DTree", propertysheet)  tree:SetWide(propertysheet:GetWide() - 16)  local sheet = propertysheet:AddSheet("Tools", tree, nil, false, false)  sheet.Panel:SetPos(0, tabhei + 2)  tree:SetIndentSize(4)  frame.ToolsTree = tree   tree = vgui.Create("DTree", propertysheet)  tree:SetWide(propertysheet:GetWide() - 16)  sheet = propertysheet:AddSheet("Crafts", tree, nil, false, false)  sheet.Panel:SetPos(0, tabhei + 2)  tree:SetIndentSize(4)  frame.CraftsTree = tree   tree = vgui.Create("DTree", propertysheet)  tree:SetWide(propertysheet:GetWide() - 16)  sheet = propertysheet:AddSheet("Special", tree, nil, false, false)  sheet.Panel:SetPos(0, tabhei + 2)  tree:SetIndentSize(4)  frame.SpecialTree = tree   local scroller = propertysheet:GetChildren()[1]  local dragbase = scroller:GetChildren()[1]  local tabs = dragbase:GetChildren()   GAMEMODE:ConfigureMenuTabs(tabs, tabhei)   frame.ViewerY = y   local craft_tier_nodes = {}  local tool_tier_nodes = {}  local wep_tier_nodes = {}  local special_tier_nodes = {}   local nodes = {}  for i = 1, 6 do  nodes[i] = {}  craft_tier_nodes[i] = frame.CraftsTree:AddNode("Tier " .. i)  wep_tier_nodes[i] = frame.WeaponsTree:AddNode("Tier " .. i)  tool_tier_nodes[i] = frame.ToolsTree:AddNode("Tier " .. i)  special_tier_nodes[i] = frame.SpecialTree:AddNode("Tier " .. i)  end   local function AddNewWep(wep, type)  local enttab = weapons.Get(wep)   local node_branches  if enttab.Branches then  node_branches = {}   for k, v in pairs(enttab.Branches) do  local branch_class = GAMEMODE:GetWeaponClassOfQuality(wep, 0, k)  local branch_get = weapons.Get(branch_class)   if not branch_get then continue end  node_branches[k] = {  NodeName = branch_get and branch_get.PrintName or wep,  SortName = string.Replace(branch_get and branch_get.PrintName or wep, "'", ""),  Category = addedcat[wep] or ITEMCAT_GUNS,  SWEP = branch_class,  Type = type  }  end  end   nodes[enttab.Tier or 1][#nodes[enttab.Tier or 1] + 1] = {  NodeName = enttab and enttab.PrintName or wep,  SortName = string.Replace(enttab and enttab.PrintName or wep, "'", ""),  Category = addedcat[wep] or ITEMCAT_GUNS,  SWEP = wep,  NodeBranches = node_branches,  Type = type  }  end   for _, wep in pairs(weps) do  AddNewWep(wep, "weapon")  end   for _, wep in pairs(tools) do  AddNewWep(wep, "tool")  end   for _, wep in pairs(crafts) do  local enttab = weapons.Get(wep)   local node_branches  if enttab.Branches then  node_branches = {}   for k, v in pairs(enttab.Branches) do  local branch_class = GAMEMODE:GetWeaponClassOfQuality(wep, 0, k)  local branch_get = weapons.Get(branch_class)   if not branch_get then continue end  node_branches[k] = {  NodeName = branch_get and branch_get.PrintName or wep,  SortName = string.Replace(branch_get and branch_get.PrintName or wep, "'", ""),  Category = addedcat[wep] or ITEMCAT_GUNS,  SWEP = branch_class  }  end  end   nodes[enttab.Tier or 1][#nodes[enttab.Tier or 1] + 1] = {  NodeName = enttab and enttab.PrintName or wep,  SortName = string.Replace(enttab and enttab.PrintName or wep, "'", ""),  Category = enttab.RequiredClip and ITEMCAT_GUNS or (enttab.Primary.Ammo == "none" and enttab.MeleeRange) and ITEMCAT_MELEE or ITEMCAT_TOOLS,  Assemblies = GAMEMODE.Assemblies[wep],  SWEP = wep,  NodeBranches = node_branches  }  end   for _, wep in pairs(special) do  local enttab = weapons.Get(wep)   nodes[enttab.Tier or 1][#nodes[enttab.Tier or 1] + 1] = {  NodeName = enttab and enttab.PrintName or wep,  SortName = string.Replace(enttab and enttab.PrintName or wep, "'", ""),  Category = ITEMCAT_TOOLS,  SWEP = wep,             Special = true  }  end   for i = 1, 6 do  table.SortByMember(nodes[i], "SortName", true)  end   for tier, tiernodes in ipairs(nodes) do  for _, node in pairs(tiernodes) do  local wepnode  if node.Assemblies then  wepnode = craft_tier_nodes[tier]:AddNode(node.NodeName)  elseif node.Special then                 wepnode = special_tier_nodes[tier]:AddNode(node.NodeName)             else  local tb = node.Type == "weapon" and wep_tier_nodes or tool_tier_nodes  wepnode = tb[tier]:AddNode(node.NodeName)  end   if node.NodeBranches then  for i = 1, #node.NodeBranches do  local sub_node = node.NodeBranches[i]  local new_sub_node = wepnode:AddNode(sub_node.NodeName)   new_sub_node.SWEP = sub_node.SWEP  new_sub_node.DoClick = WeaponButtonDoClick  new_sub_node.Category = sub_node.Category  end  end   wepnode.SWEP = node.SWEP  wepnode.Comps = node.Assemblies  wepnode.DoClick = WeaponButtonDoClick  wepnode.Category = node.Category  end  end   frame:SetWeaponViewerSWEP()   MakepWeapons(true) end 