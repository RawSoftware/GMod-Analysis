include("sh_zombieescape.lua")  if not GM.ZombieEscape then return end  hook.Add("HUDPaint", "zombieescape", function()  if not MySelf:IsValid() then return end   if GAMEMODE:GetWave() == 0 and not GAMEMODE:GetWaveActive() and (MySelf:Team() == TEAM_UNDEAD or CurTime() < GAMEMODE:GetWaveStart() - GAMEMODE.ZE_FreezeTime) then  draw.SimpleTextBlur(translate.Format("ze_humans_are_frozen_until_x", GAMEMODE.ZE_FreezeTime), "ZSHUDFontSmall", ScrW() / 2, ScrH() / 2, COLOR_DARKRED, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)  end end)  local function ToSeconds(seconds)  return string.format("%02d", math.floor(seconds)) end  local function DrawHUDPickUp()  if MySelf:Team() == TEAM_HUMAN then  local txth = draw.GetFontHeight("ZSHUDFontSmaller")  local x = ScrW() * 0.02  local y = ScrH() * 0.2   for _, h in pairs(team.GetPlayers(TEAM_HUMAN)) do  if h:GetPlayerMaterialName() ~= "" then  local txt = h:GetPlayerMaterialName() .. ": " .. h:Nick()  local t = h:GetDTFloat(DT_PLAYER_FLOAT_MATERIAL_TIMER)   if t > CurTime() then  txt = txt .. " : [" .. ToSeconds(math.max(t-CurTime(),0)) .. "]"  else  txt = txt .. " : [Ready!]"  end   draw.SimpleTextBlurry(txt, "ZSHUDFontSmaller", x, y, h:GetDTBool(DT_PLAYER_BOOL_MATERIAL_READY) and COLOR_RED or COLOR_GREEN, TEXT_ALIGN_LEFT)  y = y + txth  end  end  end end hook.Add("HUDPaint", "DrawHUDPickUp", DrawHUDPickUp)     function GM:OpenWeaponSelection()  if IsValid(self.WeaponMenu) then  self.WeaponMenu:Remove()  end   hook.Add("PlayerBindPress", "ZombieEscape.PlayerBindPress", function(ply, bind, pressed)  if string.find(bind, "slot") then return true end  end)   self.bSelectingWeapons = true  self.WeaponMenu = vgui.Create("WeaponSelection")  self.WeaponMenuType = 1 end  function GM:HideWeaponSelection()  if IsValid(self.WeaponMenu) then  self.WeaponMenu:Remove()  end   self.bSelectingWeapons = nil   hook.Remove("PlayerBindPress", "ZombieEscape.PlayerBindPress") end  function GM:ReceivedWeapon(type)  if not IsValid(self.WeaponMenu) then return end   if type == WEAPON_PRIMARY then  self.WeaponMenu:SetupWeapons(WEAPON_SECONDARY)  self.WeaponMenuType = 2  elseif type == WEAPON_SECONDARY then  self:HideWeaponSelection()  end end   net.Receive("ze_weaponsdata", function()  if net.ReadBool() then  GAMEMODE.Weapons = net.ReadTable()  end   if net.ReadBool() then  GAMEMODE:OpenWeaponSelection()  else  GAMEMODE:HideWeaponSelection()  end end)  net.Receive("ze_receiveweapon", function()  local type = net.ReadUInt(2)  if not type then return end   GAMEMODE:ReceivedWeapon(type) end)   surface.CreateFont("WeaponMenuText", {font = "Remington Noiseless", size = 18, weight = 450, antialias = true})  local PANEL = {} function PANEL:Init()  self:ParentToHUD()  self.Title = "Select A Weapon"  self.padding = 8  self:SetupWeapons(WEAPON_PRIMARY) end  function PANEL:SetupWeapons(type)  GAMEMODE.WeaponMenuType = type   self.WeaponList = {}  surface.SetFont("WeaponMenuText")   local w, h = 400, 0  for k, weapon in ipairs(GAMEMODE:GetWeaponsByType(type)) do  weapon.Slot = k   local ent = weapons.Get(weapon.class)  weapon.Name = (ent and ent.PrintName) and tostring(ent.PrintName) or "Unknown"   local w2, h2 = surface.GetTextSize(weapon.Name)   w = (w2 and w2 > w) and w2 or w  h = (h2 and h2 > h) and h2 or h   self.WeaponList[k] = weapon  end   local count = #self.WeaponList  self.WeaponList[count + 1] = {  Slot = count + 1,  Name = "Cancel"  }   self.tw = w    self.th = h    self:PerformLayout() end  function PANEL:OnSelectWeapon(slot)  if self.LastPress and self.LastPress + 0.3 > RealTime() then return end  self.LastPress = RealTime()   local weapon = self.WeaponList[slot]  if not weapon then return end   if weapon.Name ~= "Cancel" then  RunConsoleCommand("ze_selectweapon", weapon.class)  else      GAMEMODE:HideWeaponSelection()     end end  function PANEL:PerformLayout()  local w = self.tw + (self.padding * 2) + 20  local h = (self.padding + self.th) * (#self.WeaponList + 1) + self.padding + 65   self:SetPos(30, ScrH() * 0.2)  self:SetSize(w, h) end  function PANEL:Paint(w, h)     draw.RoundedBoxEx(4, 0, 0, w, h, Color(0, 0, 0, 180), true, true, true, true)  draw.SimpleText(translate.Get("ZE_WEP_TITLE"), "WeaponMenuText", self.padding, self.padding, COLOR_PURPLE, TEXT_ALIGN_LEFT, TEXT_ALIGN_TOP)   local x, y, text  for k, v in pairs(self.WeaponList) do     x = self.padding  y = self.padding + (self.padding + self.th) * k  text = tostring(v.Slot) .. ". " .. v.Name  draw.SimpleText(text, "WeaponMenuText", x, y, COLOR_YELLOW, TEXT_ALIGN_LEFT, TEXT_ALIGN_TOP)   if v.cost then  local cost = v.cost ~= 0 and v.cost or " FREE"   text2 = "COST : " .. cost .. ""  draw.SimpleText(text2, "WeaponMenuText", x + 310, y, COLOR_CYAN, TEXT_ALIGN_LEFT, TEXT_ALIGN_TOP)  end  end   text3 = GAMEMODE.WeaponMenuType == 1 and "0. >> MARKET WEAPON MENU" or "0. << FREE WEAPON MENU"  draw.SimpleText(text3, "WeaponMenuText", x, y + 25, COLOR_ORANGE, TEXT_ALIGN_LEFT, TEXT_ALIGN_TOP)   draw.SimpleText("SCRAP : ".. MySelf:GetAmmoCount("Scrap"), "WeaponMenuText", x, y + 50, COLOR_ORANGE, TEXT_ALIGN_LEFT, TEXT_ALIGN_TOP)   local wept = MySelf:GetActiveWeapon()  if wept and wept:IsValid() then  local contents = wept:GetClass()  local contentstbl = weapons.Get(contents)  local contentsqua = contentstbl.QualityTier  local desiredqua = contentsqua and contentsqua + 1 or 1   if contents and not string.match(tostring(contents), "_q3") then  local wtbl = weapons.Get(contents)  local scrapcost = math.floor(GAMEMODE:GetUpgradeScrap(wtbl, desiredqua, MySelf))  draw.SimpleText("Scrap Required For Upgrade: ".. scrapcost, "WeaponMenuText", x, y + 65, COLOR_ORANGE, TEXT_ALIGN_LEFT, TEXT_ALIGN_TOP)  else  draw.SimpleText("Fully Upgraded", "WeaponMenuText", x, y + 65, COLOR_ORANGE, TEXT_ALIGN_LEFT, TEXT_ALIGN_TOP)  end  end end  local KeyDelay = 0 function PANEL:Think()  if not MySelf:Alive() or MySelf:Team() ~= TEAM_HUMAN then  GAMEMODE:HideWeaponSelection()  return  end      for key = 2, 10 do  if input.IsKeyDown(key) then  self:OnSelectWeapon(key - 1)  end  end   if input.IsButtonDown(1) and KeyDelay < CurTime() then  if GAMEMODE.WeaponMenuType == 1 then  GAMEMODE.WeaponMenu:SetupWeapons(2)  else  GAMEMODE.WeaponMenu:SetupWeapons(1)  end  KeyDelay = CurTime() + 0.5  end end  vgui.Register("WeaponSelection", PANEL, "DPanel")     local OverlayMaterial = Material("sprites/grip")  local Buttons = {} local ButtonDistance = 1024    local pos, pos2d, dist local function DrawButtonOverlay()  if not MySelf:Alive() then return end   surface.SetMaterial(OverlayMaterial)   for _, ent in pairs(ents.FindInSphere(MySelf:GetPos(), ButtonDistance)) do  if IsValid(ent) and ent:GetClass() == "class C_BaseEntity" and  not ent:GetNWBool("Pressed") then   pos = ent:GetPos()  pos2d = pos:ToScreen()  dist = (MySelf:GetPos() - pos):Length()   surface.SetDrawColor(255, 255, 255, (ButtonDistance - dist) / ButtonDistance * 88)  surface.DrawTexturedRect(pos2d.x - 64, pos2d.y - 64, 128, 128)  end  end end hook.Add("HUDPaint", "DrawButtonOverlay", DrawButtonOverlay)  net.Receive("UpdateButtons", function()  local entities = net.ReadTable()   local ent  for _, idx in pairs(entities) do  ent = Entity(idx)  if IsValid(ent) then  table.insert(Buttons, ent)  end  end   PressedButtons = {} end)  net.Receive("ze_update_timer", function(length)  GAMEMODE.ZETimeLimit = net.ReadFloat() end)  net.Receive("ze_update_volunteer", function(length)  GAMEMODE.WaveOneZombies = net.ReadFloat() end)  net.Receive("ze_update_current_round", function(length)  GAMEMODE.CurrentRound = net.ReadFloat() end)  net.Receive("ze_update_max_round", function(length)  GAMEMODE.RoundLimit = net.ReadFloat() end)  local HSVToColor = HSVToColor local math_ceil = math.ceil local math_floor = math.floor local math_Approach = math.Approach local math_abs = math.abs  local halo = halo local halo_Add = halo.Add  local surface_GetTextSize = surface.GetTextSize local surface_SetDrawColor = surface.SetDrawColor local surface_SetTexture = surface.SetTexture local surface_DrawTexturedRect = surface.DrawTexturedRect  local draw = draw local draw_RoundedBox = draw.RoundedBox local draw_SimpleTextBlurry = draw.SimpleTextBlurry local draw_SimpleText = draw.SimpleText  local BossEntities = {} local gradientUp = surface.GetTextureID("VGUI/gradient_up") local padding = 2 local colGreen = Color(129, 215, 30, 255) local colDarkGreen = Color(50, 83, 35, 255)  local function DrawBossHealth()     local BestBoss = nil  for k, boss in pairs(BossEntities) do  if boss.Health <= 1 then BossEntities[boss.Name] = nil continue end   if not BestBoss or BestBoss.LastUpdate < boss.LastUpdate then  BestBoss = boss  end  end   if BestBoss and BestBoss.LastUpdateHUD > RealTime() then  local x, y = ScrW() / 2, ScrH() * 0.15  local w, h = ScrW() / 3, 20   local maxBarHealth = BestBoss.MaxHealth  local name = BestBoss.Name  local curHealthBar = math_floor(BestBoss.Health / maxBarHealth)  local percent = (BestBoss.Health - curHealthBar * maxBarHealth) / maxBarHealth  BestBoss.curPercent = not BestBoss.curPercent and percent or math_Approach(BestBoss.curPercent, percent, math_abs(BestBoss.curPercent - percent) * 0.08)      draw_RoundedBox(0, x - (w / 2), y, w, h, Color(0, 0, 0, 255))      local x2, y2 = x - (w / 2) + padding, y + padding  local w2, h2 = w - padding * 2, h - padding * 2  draw_RoundedBox(0, x2, y2, w2, h2, colDarkGreen)    draw_RoundedBox(0, x2, y2, w * BestBoss.curPercent - padding * 2, h2, colGreen)   surface_SetDrawColor(0, 0, 0, 200)  surface_SetTexture(gradientUp)  surface_DrawTexturedRect(x2, y2, w2, h2)      draw_SimpleText(name, "ZSHUDFontTiny", x - (w / 2) + padding * 8, y + padding, COLOR_CYAN, TEXT_ALIGN_LEFT, TEXT_ALIGN_TOP)     draw_SimpleText(BestBoss.Health .. " / " .. maxBarHealth, "ZSHUDFontTiny", ScrW() * 0.5, y + padding, COLOR_CYAN, TEXT_ALIGN_CENTER, TEXT_ALIGN_TOP)  end end hook.Add("HUDPaint", "BossHealth", DrawBossHealth)  local HealthCached = {} local function UpdateHealthLastTime()  local name = net.ReadString()  local maxhealth = net.ReadUInt(24)  if maxhealth >= 50000 then return end   if not HealthCached[name] then  HealthCached[name] = maxhealth  elseif HealthCached[name] and maxhealth >= HealthCached[name] then    HealthCached[name] = maxhealth  end   BossEntities[name] =  {  Name = name,  Health = maxhealth,  MaxHealth = HealthCached[name],  LastUpdate = RealTime(),  LastUpdateHUD = RealTime() + 4,  } end net.Receive("ze_boss_health", UpdateHealthLastTime)    local OverlayGame = surface.GetTextureID("") local fade = 0  net.Receive("ze_ut", function()  local StringMaterial = net.ReadString()  if file.Exists(string.format("materials/" .. StringMaterial .. ".vmt", StringMaterial), "GAME") then  OverlayGame = surface.GetTextureID(StringMaterial)  fade = 255  else  fade = 0  end end)  hook.Add("HUDPaint", "OverlayScreen", function()  if fade > 0 then  surface.SetDrawColor(255,255,255,255 * fade)  surface.SetTexture(OverlayGame)  surface.DrawTexturedRect(0, 0, ScrW(), ScrH())  end end)