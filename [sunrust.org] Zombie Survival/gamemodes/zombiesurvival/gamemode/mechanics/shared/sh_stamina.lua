local meta = FindMetaTable("Player")  function meta:TimeAtMaxStamina()     return self:GetDTFloat(DT_PLAYER_FLOAT_STAMINA_TO_FULL) end  function meta:StaminaRegenMul()     return 1 + self:GetDTFloat(DT_PLAYER_FLOAT_STAMINA_REGEN_SCALE) end    function meta:ResetStaminaRegen()     local multi = (self.StaminaRegeneration or 1) - 1      if self:IsSkillActive(SKILL_CARDIOTONIC) and self.IsRunning then         multi = -1.5     end      local my_wep = self:GetActiveWeapon()     if IsValid(my_wep) then         if my_wep.Stability and my_wep.GetBlockEnd and my_wep:GetBlockEnd() > CurTime() or my_wep.IsBlocking and my_wep:IsBlocking() then             multi = multi - 0.9         elseif not my_wep.IsMelee and my_wep:GetReloadFinish() ~= 0 then             multi = multi - 0.5         end     end      multi = multi - (self:GetStatus("debuff_frost") and 0.35 or 0)                   - (self:GetStatus("debuff_sickness") and 0.3 or 0)                   - (self:GetStatus("debuff_exhausted") and 0.75 or 0)                   + (self:GetStatus("laststand") and 1 or 0)                   + (self:GetStatus("buff_adrenaline") and 0.5 or 0)      self:SetStaminaRegenAddScale(multi) end  function meta:SetStaminaRegenAddScale(scale)     local effective_scale = 1 + scale     effective_scale = effective_scale == 0 and 0.001 or effective_scale     local cur_mul = self:StaminaRegenMul()      local cur_time = CurTime()     local time_at_max = self:GetDTFloat(DT_PLAYER_FLOAT_STAMINA_TO_FULL)     local now_to_max = (time_at_max - cur_time) * cur_mul      self:SetTimeToMaxStamina(now_to_max / effective_scale)     self:SetDTFloat(DT_PLAYER_FLOAT_STAMINA_REGEN_SCALE, scale) end  function meta:CurrentDecimalStamina()     local zero_to_max = GAMEMODE.BaseTimeToMaxStamina     local cur_time = CurTime()     local regen_mul = self:StaminaRegenMul()      local time_at_max = self:GetDTFloat(DT_PLAYER_FLOAT_STAMINA_TO_FULL)     local now_to_max = time_at_max - cur_time      local now_to_max_regen = now_to_max * regen_mul     return math.min(1, 1 - (now_to_max_regen / zero_to_max)) end  function meta:SetTimeToMaxStamina(new_time)     self:SetDTFloat(DT_PLAYER_FLOAT_STAMINA_TO_FULL, CurTime() + new_time) end  function meta:AddDecimalStamina(decimal)     local cur_decimal = self:CurrentDecimalStamina()     local regen_mul = self:StaminaRegenMul()     local base_max = GAMEMODE.BaseTimeToMaxStamina / regen_mul      local time_mul = 1 - (cur_decimal + decimal)      self:SetTimeToMaxStamina(time_mul * base_max) end  function meta:GetRequiredStabilityStamina(stability, damage, behind)     local dir_multi = self:IsSkillActive(SKILL_COMBATREFLEXES) and (behind and 2 or 1) or (behind and 15 or 1)     local dmg_frac = damage / stability      return math.min(2, dmg_frac * dir_multi * (self.BlockStaminaUsageMul or 1)) end