include("shared.lua")  ENT.NextEmit = 0  local matTrail = Material("cable/red") local matGlow = Material("sprites/light_glow02_add")  function ENT:Initialize()  self.AmbientSound = CreateSound(self, "npc/headcrab_poison/ph_warning".. math.random(3) ..".wav")  self.Created = CurTime() end  function ENT:Think()  self.AmbientSound:PlayEx(1, 60 + math.min(1, CurTime() - self.Created) * 60)   self:NextThink(CurTime())  return true end  function ENT:OnRemove()  self.AmbientSound:Stop() end  local material = Material("models/flesh") local colGlow = Color(125, 10, 10, 120) local colBeam = Color(20, 0, 0, 255) function ENT:Draw()  render.ModelMaterialOverride(material)  render.SetColorModulation(1, 0.5, 0.3)   local tongued = self:GetParent():IsValid()   if tongued then  self:SetLocalPos(Vector(0, 0, -48))  end   self:DrawModel()   if tongued then  self:SetLocalPos(vector_origin)  end   render.SetColorModulation(1, 1, 1)  render.ModelMaterialOverride(nil)   local owner = self:GetOwner()  if not owner:IsValid() then return end   local headpos  local tonguepos = self:WorldSpaceCenter()   if tongued then  tonguepos.z = tonguepos.z - 48  end   local boneid = (owner ~= MySelf or owner:ShouldDrawLocalPlayer()) and owner:LookupBone("ValveBiped.Bip01_Head1")  if boneid and boneid > 0 then  local p, a = owner:GetBonePositionMatrixed(boneid)  headpos = p  else  headpos = owner:WorldSpaceCenter()  end   self:SetRenderBoundsWS(headpos, tonguepos, 128)   render.SetMaterial(matTrail)  render.DrawBeam(headpos, tonguepos, 1.5, 1, 0, colBeam)   render.SetMaterial(matGlow)  render.DrawSprite(headpos, 35, 35, colGlow)  render.DrawSprite(tonguepos, 35, 35, colGlow)   if CurTime() >= self.NextEmit and self:GetVelocity():LengthSqr() >= 256 then  self.NextEmit = CurTime() + 0.06   local emitter = ParticleEmitter(tonguepos)  emitter:SetNearClip(16, 24)   local particle = emitter:Add("particles/smokey", tonguepos)  particle:SetVelocity(VectorRand():GetNormalized() * math.Rand(2, 8))  particle:SetDieTime(2)  particle:SetStartAlpha(180)  particle:SetEndAlpha(0)  particle:SetStartSize(math.Rand(1, 2))  particle:SetEndSize(0)  particle:SetRoll(math.Rand(0, 360))  particle:SetRollDelta(math.Rand(-25, 25))  particle:SetGravity(Vector(0, 0, -20))  particle:SetColor(0, 200, 0)   emitter:Finish() emitter = nil collectgarbage("step", 64)  end end