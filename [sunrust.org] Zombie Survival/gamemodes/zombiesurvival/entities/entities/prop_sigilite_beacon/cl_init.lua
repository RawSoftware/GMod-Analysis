include("shared.lua")  function ENT:Initialize()  self:SetModelScale(0.4, 0)  self:SetRenderFX(kRenderFxDistort)   self.StartPos = self:GetPos()  self.AmbientSound = CreateSound(self, ")ambient/levels/citadel/citadel_drone_loop6.wav")   if MySelf == self:GetOwner() then  local ent = self  hook.Add("HUDPaint", tostring(self), function()  if not IsValid(ent) then return end  if TrueVisible(ent:NearestPoint(MySelf:EyePos()), MySelf:EyePos()) then return end  local screenpos = self:GetPos():ToScreen()  local margin = 150 * BetterScreenScale()  local offset = 35 * BetterScreenScale()  local w, h = ScrW(), ScrH()  local col = Color(0,180,255)   screenpos.x = math.Clamp(screenpos.x, margin, w - margin)  screenpos.y = math.Clamp(screenpos.y - offset, margin, h - margin)   local screenscale = BetterScreenScale()  local txtw, txth = 32 * screenscale, 64 * screenscale  surface.SetDrawColor(col.r,col.g,col.b, 90)  surface.DrawRect(screenpos.x - txtw/2, screenpos.y - txth/2, txtw, txth)  surface.SetDrawColor(255,255,255,255)  surface.DrawOutlinedRect(screenpos.x - txtw/2, screenpos.y - txth/2, txtw, txth)  end)  end end  function ENT:Think()  self.AmbientSound:PlayEx(0.66, 100) end  function ENT:OnRemove()  if MySelf == self:GetOwner() then  hook.Remove("HUDPaint", tostring(self))  end   self.AmbientSound:Stop() end  local sigil_material = Material("!sigil_blue") local vec_up = vector_up function ENT:Draw()  local unpredicted = UnPredictedCurTime()   local ang = Angle(0, unpredicted * 90, 0)   self:SetRenderAngles(ang)   local pos = self:GetPos()  self:SetRenderOrigin(self.StartPos + Vector(0, 0, 12 + math.sin(CurTime() * 2.5) * 8))   render.SuppressEngineLighting(true)  render.ModelMaterialOverride(sigil_material)  render.SetBlend(0.6)   self:DrawModel()   render.SetBlend(1)  render.ModelMaterialOverride()  render.SuppressEngineLighting(false)   local emitter = ParticleEmitter(pos, true)  emitter:SetNearClip(24, 32)   local particle = emitter:Add("effects/fleck_glass"..math.random(3), pos + Vector(math.Rand(-16, 16), math.Rand(-16, 16), math.Rand(0, 32)))  particle:SetVelocity( VectorRand() * math.random( 30, 50 ) )  particle:SetDieTime(math.Rand(0.3, 0.4))  particle:SetStartSize(math.Rand(2,3))  particle:SetEndSize( particle:GetStartSize() )  particle:SetStartAlpha(240)  particle:SetEndAlpha(0)  particle:SetRoll(math.Rand(0, 360))  particle:SetRollDelta(math.Rand(-90, 90))  particle:SetColor(60, 164, 255)  particle:SetAirResistance(1000)  particle:SetGravity( vec_up * 800 )   emitter:Finish() emitter = nil collectgarbage("step", 64) end 