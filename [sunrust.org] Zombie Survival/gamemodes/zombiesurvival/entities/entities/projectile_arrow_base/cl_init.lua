include("shared.lua")  local matGlow = Material("sprites/light_glow02_add") local matWhite = Material("models/debug/debugwhite")  ENT.TrailMaterial = Material("trails/physbeam") ENT.TrailLength = 12 ENT.TrailColor = Color(140, 190, 250)  function ENT:Draw()     local trail_color = self.TrailColor     local model_r = trail_color.r / 255     local model_g = trail_color.g / 255     local model_b = trail_color.b / 255   render.ModelMaterialOverride(matWhite)  render.SetColorModulation(model_r, model_g, model_b)  self:DrawModel()  render.SetColorModulation(1, 1, 1)  render.ModelMaterialOverride(nil)   if self:GetVelocity():LengthSqr() > 100 then  self:SetAngles(self:GetVelocity():Angle())   render.SetMaterial(matGlow)  render.DrawSprite(self:GetPos(), 11, 11, trail_color)  end   render.SetMaterial(self.TrailMaterial)  for i=1, #self.TrailPositions do  if self.TrailPositions[i+1] then  trail_color.a = 255 - 255 * (i/#self.TrailPositions)   render.DrawBeam(self.TrailPositions[i], self.TrailPositions[i+1], 3, 1, 0, trail_color)  end  end end  function ENT:Initialize()  self.Trailing = CurTime() + 0.15  self.TrailPositions = {} end  function ENT:Think()  table.insert(self.TrailPositions, 1, self:GetPos())  if self.TrailPositions[1] then  table.remove(self.TrailPositions, self.TrailLength)  end   local dist = 0  local mypos = self:GetPos()  for i=1, #self.TrailPositions do  if self.TrailPositions[i]:DistToSqr(mypos) > dist then  self:SetRenderBoundsWS(self.TrailPositions[i], mypos, Vector(16, 16, 16))  dist = self.TrailPositions[i]:DistToSqr(mypos)  end  end end 