include("shared.lua")  ENT.Pulsed = true  function ENT:Initialize()     local matrix = Matrix()     matrix:Scale(Vector(0.6, 0.6, 1.2))     self:EnableMatrix( "RenderMultiply", matrix )      self.AmbientSound = CreateSound(self, "npc/roller/mine/rmine_moveslow_loop1.wav")     self.AmbientSound:SetSoundLevel(55)      local cmodel = ClientsideModel("models/props_trainstation/trainstation_ornament002.mdl")     if cmodel:IsValid() then         cmodel:SetPos(self:LocalToWorld(Vector(0, 0, -25.6)))         cmodel:SetAngles(self:LocalToWorldAngles(Angle(0, 0, 0)))         cmodel:SetSolid(SOLID_NONE)         cmodel:SetMoveType(MOVETYPE_NONE)         cmodel:SetColor(Color(230, 190, 230))         cmodel:SetParent(self)         cmodel:SetOwner(self)         cmodel:SetMaterial("models/shiny")         matrix = Matrix()         matrix:Scale(Vector(2, 2, 0.25))         cmodel:EnableMatrix( "RenderMultiply", matrix )          cmodel:Spawn()         self.CModel = cmodel     end      cmodel = ClientsideModel("models/Items/combine_rifle_ammo01.mdl")     if cmodel:IsValid() then         cmodel:SetPos(self:LocalToWorld(Vector(0, 0, -20)))         cmodel:SetAngles(self:LocalToWorldAngles(Angle(0, 0, 0)))         cmodel:SetSolid(SOLID_NONE)         cmodel:SetMoveType(MOVETYPE_NONE)         cmodel:SetColor(Color(230, 190, 255))         cmodel:SetParent(self)         cmodel:SetOwner(self)         cmodel:SetMaterial("models/shiny")         matrix = Matrix()         matrix:Scale(Vector(1.5, 1.5, 1.4))         cmodel:EnableMatrix( "RenderMultiply", matrix )          cmodel:Spawn()         self.Shaft = cmodel     end      cmodel = ClientsideModel("models/roller.mdl")     if cmodel:IsValid() then         cmodel:SetPos(self:LocalToWorld(Vector(0, 0, 22)))         cmodel:SetSolid(SOLID_NONE)         cmodel:SetMoveType(MOVETYPE_NONE)         cmodel:SetColor(Color(230, 190, 210))         cmodel:SetParent(self)         cmodel:SetOwner(self)         cmodel:SetMaterial("models/shiny")         matrix = Matrix()         matrix:Scale(Vector(0.45, 0.45, 0.4))         cmodel:EnableMatrix( "RenderMultiply", matrix )          cmodel:Spawn()         self.Ball = cmodel     end end  local material = Material("models/shiny") function ENT:DrawZapper()     local trans_alpha = self:TransAlphaToMe()      local nodrawattachs = trans_alpha < 0.4     if IsValid(self.Shaft) then         self.Shaft:SetNoDraw(nodrawattachs)         self.Ball:SetNoDraw(nodrawattachs)     end       render.ModelMaterialOverride(material)     render.SetColorModulation(0.9, 1, 1)     render.SetBlend(trans_alpha)     self:DrawModel()     render.SetBlend(1)     render.ModelMaterialOverride()     render.SetColorModulation(1, 1, 1) end  function ENT:DrawTranslucent()     self:DrawZapper()      local owner = self:GetObjectOwner()     local ammo = self:GetAmmo()      if MySelf:IsValid() and MySelf:Team() == TEAM_HUMAN then         if EyePos():DistToSqr(self:GetPos()) >= 202500 then return end          local ang = self:LocalToWorldAngles(Angle(0, 90, 0))         cam.Start3D2D(self:LocalToWorld(Vector(-10, 0, -19)), ang, 0.05)             local name = ""             if owner:IsValid() and owner:IsPlayer() then                 name = owner:ClippedName()             end             self:Draw3DHealthBar(math.Clamp(self:GetObjectHealth() / self:GetMaxObjectHealth(), 0, 1), name, 0, 0.8)              if ammo > 0 then                 draw.SimpleTextBlurry("["..ammo.." / "..self.MaxAmmo.."]", "ZS3D2DFont", 0, 450, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)             else                 draw.SimpleTextBlurry(translate.Get("empty"), "ZS3D2DFont", 0, 450, COLOR_RED, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)             end         cam.End3D2D()     end end  ENT.NextEmit = 0 ENT.BallRotation = 0  function ENT:Think()     if self:GetObjectOwner():IsValid() and self:GetAmmo() > 1 then         self.AmbientSound:PlayEx(0.75, 80)          if self.Ball:IsValid() then             self.BallRotation = self.BallRotation + 1             self.Ball:SetAngles(Angle(0, self.BallRotation, 0))         end          if CurTime() >= self.NextEmit then             self.NextEmit = CurTime() + 0.3              local pos = self:LocalToWorld(Vector(0, 0, 23))             local emitter = ParticleEmitter(pos)             emitter:SetNearClip(24, 32)              for i=1, 2 do                 local particle = emitter:Add("effects/yellowflare", pos)                 particle:SetDieTime(1)                 particle:SetColor(230,200,210)                 particle:SetStartAlpha(200)                 particle:SetEndAlpha(0)                 particle:SetStartSize(3)                 particle:SetEndSize(0)                 particle:SetRoll(math.Rand(0, 360))                 particle:SetRollDelta(math.Rand(-60, 60))                 particle:SetVelocity(VectorRand():GetNormal() * 30)                 particle:SetAirResistance(30)                 particle:SetGravity(Vector(0,0,30))             end              local charge = math.Clamp(29 - ((self:GetNextZap() - CurTime())/3)*40, -20, 22)             local chargepos = self:LocalToWorld(Vector(0, 0, charge))              for i=1, 6 do                 local particle = emitter:Add("effects/yellowflare", chargepos)                 particle:SetDieTime(0.5)                 particle:SetColor(230,200,210)                 particle:SetStartAlpha(200)                 particle:SetEndAlpha(0)                 particle:SetStartSize(3)                 particle:SetEndSize(0)                 particle:SetRoll(math.Rand(0, 360))                 particle:SetRollDelta(math.Rand(-60, 60))                 particle:SetVelocity(VectorRand():GetNormal() * 10)                 particle:SetAirResistance(10)                 particle:SetGravity(Vector(0,0,30))             end              emitter:Finish() emitter = nil collectgarbage("step", 64)         end     else         self.AmbientSound:Stop()     end      self:NextThink(CurTime() + 0.05)     return true end  function ENT:OnRemove()     self.AmbientSound:Stop()      if self.Ball and self.Ball:IsValid() then         self.Ball:Remove()     end      if self.Shaft and self.Shaft:IsValid() then         self.Shaft:Remove()     end      if self.CModel and self.CModel:IsValid() then         self.CModel:Remove()     end end 