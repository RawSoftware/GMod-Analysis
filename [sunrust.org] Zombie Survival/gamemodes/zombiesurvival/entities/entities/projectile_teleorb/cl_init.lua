include("shared.lua")  ENT.NextTickSound = 0 ENT.LastTickSound = 0 ENT.NextEmit = 0  function ENT:Initialize()  self.DieTime = CurTime() + self.LifeTime end  function ENT:Think()  local curtime = CurTime()   if curtime >= self.NextEmit then  self.NextEmit = curtime + 0.01   local pos = self:GetPos() + self:GetUp() * 8  local emitter = ParticleEmitter(pos)  emitter:SetNearClip(16, 24)   local particle = emitter:Add("effects/yellowflare", pos)  particle:SetVelocity(VectorRand():GetNormalized() * math.Rand(155, 155))  particle:SetDieTime(math.Rand(0.1, 0.2))  particle:SetStartAlpha(math.Rand(200, 220))  particle:SetEndAlpha(0)  particle:SetStartSize(33)  particle:SetEndSize(0)  particle:SetRoll(math.Rand(-0.2, 0.2))  particle:SetColor(50, 255, 50)   particle = emitter:Add("effects/blueflare1", pos)  particle:SetVelocity(VectorRand():GetNormalized() * math.Rand(11, 12))  particle:SetDieTime(0.1)  particle:SetStartAlpha(30)  particle:SetEndAlpha(0)  particle:SetStartSize(155)  particle:SetEndSize(0)  particle:SetRoll(math.Rand(-1, 1))  particle:SetColor(0, 255, 50)   emitter:Finish() emitter = nil collectgarbage("step", 64)  end   if curtime >= self.NextTickSound then  self.NextTickSound = curtime + 0.5  self.LastTickSound = curtime  self:EmitSound("weapons/zs_heph/electro4.wav", 77, 50, nil, CHAN_WEAPON + 1)   for i = 1, 3 do  timer.Simple(i * 0.15, function()  if self:IsValid() then  self:EmitSound("weapons/zs_heph/electro4.wav", 77, 50 - i*3, 1 - 0.4 * i, CHAN_WEAPON + 1 + i*2)  end  end)  end  end end  local matGlow = Material("effects/yellowflare") local matTrail = Material("trails/laser") function ENT:Draw()  local pos = self:GetPos() + self:GetUp() * 8   render.SetMaterial(matGlow)  render.DrawSprite(pos, 173, 173, Color(0, 255, 255, 100)) end  function ENT:OnRemove()  local pos = self:GetPos()   sound.Play("weapons/physcannon/energy_sing_explosion2.wav", pos, 80, math.random(135, 140))   local emitter = ParticleEmitter(pos)  emitter:SetNearClip(24, 32)  local particle  for i=0, 25 do  particle = emitter:Add(matGlow, pos)  particle:SetVelocity(VectorRand() * 275)  particle:SetDieTime(0.5)  particle:SetStartAlpha(255)  particle:SetEndAlpha(0)  particle:SetStartSize(math.Rand(7, 9))  particle:SetEndSize(0)  particle:SetRoll(math.Rand(-0.8, 0.8))  particle:SetRollDelta(math.Rand(-3, 3))  particle:SetColor(0, 245, 30)  end  for i=0,5 do  particle = emitter:Add(matGlow, pos)  particle:SetVelocity(VectorRand() * 5)  particle:SetDieTime(0.3)  particle:SetStartAlpha(255)  particle:SetEndAlpha(0)  particle:SetStartSize(math.Rand(127, 129))  particle:SetEndSize(0)  particle:SetRoll(math.Rand(-0.8, 0.8))  particle:SetRollDelta(math.Rand(-3, 3))  particle:SetColor(0, 255, 60)  end  for i=1, 75 do  particle = emitter:Add("effects/splash2", pos)  particle:SetDieTime(0.6)  particle:SetColor(0, 255, 0)  particle:SetStartAlpha(255)  particle:SetEndAlpha(0)  particle:SetStartSize(5)  particle:SetEndSize(0)  particle:SetStartLength(1)  particle:SetEndLength(15)  particle:SetVelocity(VectorRand():GetNormal() * 200)  end  emitter:Finish() emitter = nil collectgarbage("step", 64) end