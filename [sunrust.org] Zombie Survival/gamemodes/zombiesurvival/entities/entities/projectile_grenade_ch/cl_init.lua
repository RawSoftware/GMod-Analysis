include("shared.lua")  ENT.SmokeTimer = 0  local matGlow = Material("sprites/light_glow02_add")  function ENT:Initialize()  self:SetModelScale(0.1, 0)  self:SetColor(Color(115, 250, 150))  self:DrawShadow(false) end  function ENT:Think()  local pos = self:GetPos()  local emitter = ParticleEmitter(pos)  emitter:SetNearClip(24, 32)    if self.SmokeTimer < CurTime() then  self.SmokeTimer = CurTime() + 0.04   local particle  particle = emitter:Add("particles/smokey", pos + VectorRand() * 5)  particle:SetDieTime(math.Rand(0.4, 0.6))  particle:SetStartAlpha(math.Rand(70, 80))  particle:SetEndAlpha(0)  particle:SetStartSize(2)  particle:SetEndSize(math.Rand(4, 6))  particle:SetRoll(math.Rand(0, 359))  particle:SetRollDelta(math.Rand(-3, 3))  particle:SetColor(210, 220, 230)  end   emitter:Finish() emitter = nil collectgarbage("step", 64) end  function ENT:OnRemove()  local pos = self:GetPos()   local emitter = ParticleEmitter(pos)  emitter:SetNearClip(24, 32)  local particle  for i=0, 25 do  particle = emitter:Add(matGlow, pos)  particle:SetVelocity(VectorRand() * 225)  particle:SetDieTime(0.5)  particle:SetStartAlpha(255)  particle:SetEndAlpha(0)  particle:SetStartSize(math.Rand(7, 9))  particle:SetEndSize(0)  particle:SetRoll(math.Rand(-0.8, 0.8))  particle:SetRollDelta(math.Rand(-3, 3))  particle:SetColor(245, 105, 30)  end  for i=0,5 do  particle = emitter:Add(matGlow, pos)  particle:SetVelocity(VectorRand() * 5)  particle:SetDieTime(0.3)  particle:SetStartAlpha(255)  particle:SetEndAlpha(0)  particle:SetStartSize(math.Rand(127, 129))  particle:SetEndSize(0)  particle:SetRoll(math.Rand(-0.8, 0.8))  particle:SetRollDelta(math.Rand(-3, 3))  particle:SetColor(245, 125, 60)  end  for i=1, 75 do  particle = emitter:Add("effects/splash2", pos)  particle:SetDieTime(0.6)  particle:SetColor(255, 110, 0)  particle:SetStartAlpha(255)  particle:SetEndAlpha(0)  particle:SetStartSize(5)  particle:SetEndSize(0)  particle:SetStartLength(1)  particle:SetEndLength(15)  particle:SetVelocity(VectorRand():GetNormal() * 160)  end  emitter:Finish() emitter = nil collectgarbage("step", 64) end 