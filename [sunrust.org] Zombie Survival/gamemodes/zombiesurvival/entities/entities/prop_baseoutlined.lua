AddCSLuaFile()  ENT.Type = "anim"  if not CLIENT then return end  ENT.RenderGroup = RENDERGROUP_TRANSLUCENT  ENT.ColorModulation = Color(1, 0.5, 1) ENT.Seed = 0  function ENT:Initialize()  self.Seed = math.Rand(0, 10) end  function ENT:DrawPreciseModel(ble, cmod)  if self.PropWeapon and not self.ShowBaseModel then  render.SetBlend(0)  elseif self.PropBaseOutlinedHolding then         render.SetBlend(0.3)     end  self:DrawModel()  if self.PropWeapon and not self.ShowBaseModel then  render.SetBlend(1)  elseif self.PropBaseOutlinedHolding then         render.SetBlend(1)     end  if self.RenderModels and not self.NoDrawSubModels then         if self.PropBaseOutlinedHolding then             ble = ble and ble * 0.3 or 0.3         end   self:RenderModels(ble, cmod)  end end  local matWireframe = Material("models/wireframe") local matWhite = Material("models/debug/debugwhite")  local return_col = {} function ENT:ConfigureColorModulation()  return_col[1] = self.ColorModulation.r     return_col[2] = self.ColorModulation.g     return_col[3] = self.ColorModulation.b   if self.QualityTier then  local customcols = self.BranchData and self.BranchData.Colors and self.BranchData.Colors[self.QualityTier]   if customcols then             return_col[1] = customcols.r/255             return_col[2] = customcols.g/255             return_col[3] = customcols.b/255  else  local qcolt = GAMEMODE.WeaponQualityColors[self.QualityTier][self.Branch and "Ref" or "Upg"]   return_col[1] = qcolt.r/255             return_col[2] = qcolt.g/255             return_col[3] = qcolt.b/255  end  end   return return_col end  function ENT:ClassicRender(mul)  local time = (CurTime() * 1.5*mul + self.Seed) % 2/mul  if time > 1 then return end   local oldscale = self:GetModelScale()  local normal = self:GetUp()  local rnormal = normal * -1  local mins = self:OBBMins()  local mdist = self:OBBMaxs().z - mins.z  mins.x = 0  mins.y = 0  local minpos = self:LocalToWorld(mins)   self:SetModelScale(oldscale * 1.01, 0)   if render.SupportsVertexShaders_2_0() then  render.EnableClipping(true)  render.PushCustomClipPlane(normal, normal:Dot(minpos + mdist * time * normal))  render.PushCustomClipPlane(rnormal, rnormal:Dot(minpos + mdist * time * (1 + 0.25 * mul) * normal))  end  local qcol = self:ConfigureColorModulation()   render.SetColorModulation(unpack(qcol))  render.SuppressEngineLighting(true)   render.SetBlend(0.1 + 0.05 * mul)  render.ModelMaterialOverride(matWhite)  if MySelf:IsSkillActive(SKILL_SCAVENGER) then  cam.IgnoreZ(true)  end  self:DrawPreciseModel(0.1 + 0.05 * mul, qcol)   render.SetBlend(0.05 + 0.1 * mul)  render.ModelMaterialOverride(matWireframe)  self:DrawPreciseModel(0.05 + 0.1 * mul, qcol)   cam.IgnoreZ(false)   render.ModelMaterialOverride(0)  render.SuppressEngineLighting(false)  render.SetBlend(1)  render.SetColorModulation(1, 1, 1)   if render.SupportsVertexShaders_2_0() then  render.PopCustomClipPlane()  render.PopCustomClipPlane()  render.EnableClipping(false)  end  self:SetModelScale(oldscale, 0) end  function ENT:CheapRender(mul, time)  local oldscale = self:GetModelScale()   self:SetModelScale(oldscale * 1.01, 0)   local qcol = self:ConfigureColorModulation()   render.SetColorModulation(unpack(qcol))  render.SuppressEngineLighting(true)   render.SetBlend(0.1 + 0.05 * mul)  render.ModelMaterialOverride(matWhite)  if MySelf:IsSkillActive(SKILL_SCAVENGER) then  cam.IgnoreZ(true)  end  self:DrawPreciseModel(0.1 + 0.05 * mul, qcol)   render.SetBlend(0.05 + 0.1 * mul)  render.ModelMaterialOverride(matWireframe)  self:DrawPreciseModel(0.05 + 0.1 * mul, qcol)   cam.IgnoreZ(false)   render.ModelMaterialOverride(0)  render.SuppressEngineLighting(false)  render.SetBlend(1)  render.SetColorModulation(1, 1, 1)   self:SetModelScale(oldscale, 0) end  function ENT:SolidWireframeRender(mul, time)  local oldscale = self:GetModelScale()   self:SetModelScale(oldscale * 1.01, 0)   local qcol = self:ConfigureColorModulation()   render.SetColorModulation(unpack(qcol))  render.SuppressEngineLighting(true)   if MySelf:IsSkillActive(SKILL_SCAVENGER) then  cam.IgnoreZ(true)  end   render.SetBlend(0.5 + 0.1 * mul)  render.ModelMaterialOverride(matWireframe)    self:DrawPreciseModel(0.5 + 0.1 * mul, qcol)   cam.IgnoreZ(false)   render.ModelMaterialOverride(0)  render.SuppressEngineLighting(false)  render.SetBlend(1)  render.SetColorModulation(1, 1, 1)   self:SetModelScale(oldscale, 0) end  function ENT:PaintedModelRender(mul, time)  local qcol = self:ConfigureColorModulation()   render.SetColorModulation(unpack(qcol))  render.SuppressEngineLighting(true)   cam.IgnoreZ(MySelf:IsSkillActive(SKILL_SCAVENGER))   render.SetBlend(1)  render.ModelMaterialOverride(matWhite)   self:DrawPreciseModel(1, qcol)   cam.IgnoreZ(false)   render.ModelMaterialOverride(0)  render.SuppressEngineLighting(false)  render.SetColorModulation(1, 1, 1) end  local blob_col = Color(0, 0, 0) function ENT:BlobRender(mul, time)  local qcol = self:ConfigureColorModulation()   render.SuppressEngineLighting(true)   cam.IgnoreZ(MySelf:IsSkillActive(SKILL_SCAVENGER))      blob_col.r = qcol[1] * 255     blob_col.g = qcol[2] * 255     blob_col.b = qcol[3] * 255     blob_col.a = 50      render.SetColorMaterial()   render.DrawSphere(self:WorldSpaceCenter(), 6, 8, 4, blob_col)   cam.IgnoreZ(false)   render.SuppressEngineLighting(false) end  local gradient = Material("sprites/light_glow02_add") function ENT:StaticBeamRender()  cam.IgnoreZ(MySelf:IsSkillActive(SKILL_SCAVENGER))   render.SetMaterial(gradient)  local qcol = self:ConfigureColorModulation()  local pos = self:WorldSpaceCenter()  local epos = self:WorldSpaceCenter()   epos.z = epos.z + 120   local multi = 160 + math.sin(CurTime() * 2) * 90   render.DrawBeam(pos, epos, 1.5, 0.5, 0.99, Color(qcol[1] * multi, qcol[2] * multi, qcol[3] * multi))   cam.IgnoreZ(false) end  local translateRenderMode = {  [0] = "ClassicRender",  [1] = "CheapRender",  [2] = "SolidWireframeRender",  [3] = "PaintedModelRender",     [4] = "BlobRender" }  function ENT:DrawTranslucent()     local dropped_rendering = GAMEMODE.DroppedItemRendering  if not MySelf:IsValid() or MySelf:Team() ~= TEAM_HUMAN then  self:DrawPreciseModel()  return  end   local mul = self.QualityTier and (self.QualityTier + 1) or 1   if dropped_rendering < 3 then  self:DrawPreciseModel()  end   local eyepos = EyePos()  local pos = self:GetPos()  local dist = eyepos:DistToSqr(pos)   if dist > 1048576 then return end     if self.PropWeapon and self.GetAutoRetrieve and self:GetAutoRetrieve():IsValidLivingHuman() and self:GetAutoRetrieve() ~= MySelf then return end    local render_function = translateRenderMode[GAMEMODE.DroppedItemRendering]    if self[render_function] then  self[render_function](self, mul)  end   if GAMEMODE.DroppedItemBeams then  self:StaticBeamRender()  end end  function ENT:Draw()  self:DrawTranslucent() end 