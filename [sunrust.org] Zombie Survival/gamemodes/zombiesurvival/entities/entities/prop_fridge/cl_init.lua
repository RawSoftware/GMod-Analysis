include("shared.lua")  ENT.Dinged = true  function ENT:Initialize()   local ent = ClientsideModel("models/props_junk/popcan01a.mdl")     if ent:IsValid() then         ent:SetPos(self:LocalToWorld(Vector(16, -16, 0)))         ent:SetAngles(self:LocalToWorldAngles(Angle(0, 0, 0)))         ent:DrawShadow(false)         ent:SetNoDraw(true)         ent:SetParent(self)         ent:SetSolid(SOLID_NONE)         ent:SetParent(self)         ent:Spawn()         self.Hinge = ent         end          ent = ClientsideModel("models/props_interiors/refrigeratordoor01a.mdl")     if ent:IsValid() then         ent:SetPos(self:LocalToWorld(Vector(15.5, 0, -7)))         ent:SetAngles(self:LocalToWorldAngles(Angle(0, 0, 0)))         ent:DrawShadow(false)         ent:SetNoDraw(true)         ent:SetParent(self)         ent:SetSolid(SOLID_NONE)         ent:SetParent(self.Hinge)         ent:Spawn()         self.Door = ent         end    ent = ClientsideModel("models/props_interiors/refrigeratordoor02a.mdl")  if ent:IsValid() then     ent:SetPos(self:LocalToWorld(Vector(15.5, 0, 29)))  ent:SetAngles(self:LocalToWorldAngles(Angle(0, 0, 0)))  ent:DrawShadow(false)  ent:SetNoDraw(true)  ent:SetParent(self)  ent:SetSolid(SOLID_NONE)  ent:SetParent(self)  ent:Spawn()  self.DoorFake = ent   end   self.Food = {}    ent = ClientsideModel("models/props_junk/garbage_milkcarton002a.mdl")  if ent:IsValid() then  ent:SetPos(self:LocalToWorld(Vector(2, -2, -2)))  ent:SetAngles(self:LocalToWorldAngles(Angle(90, 100, 0)))  ent:DrawShadow(false)  ent:SetNoDraw(true)  ent:SetParent(self)  ent:SetSolid(SOLID_NONE)  ent:SetParent(self)  ent:Spawn()  table.insert(self.Food, ent)  end    ent = ClientsideModel("models/props_junk/watermelon01_chunk01c.mdl")  if ent:IsValid() then  ent:SetPos(self:LocalToWorld(Vector(0, -2, 12)))  ent:SetAngles(self:LocalToWorldAngles(Angle(3, 91,60)))  ent:DrawShadow(false)  ent:SetNoDraw(true)  ent:SetParent(self)  ent:SetSolid(SOLID_NONE)  ent:SetParent(self)  ent:Spawn()  table.insert(self.Food, ent)  end             ent = ClientsideModel("models/props_junk/popcan01a.mdl")  if ent:IsValid() then  ent:SetPos(self:LocalToWorld(Vector(9, 11, -2)))  ent:SetAngles(self:LocalToWorldAngles(Angle(0, 0, 0)))  ent:DrawShadow(false)  ent:SetNoDraw(true)  ent:SetParent(self)  ent:SetSolid(SOLID_NONE)  ent:SetParent(self)  ent:Spawn()  table.insert(self.Food, ent)  end     ent = ClientsideModel("models/props_junk/popcan01a.mdl")  if ent:IsValid() then  ent:SetPos(self:LocalToWorld(Vector(7, 7, -2)))  ent:SetAngles(self:LocalToWorldAngles(Angle(0, 130, 0)))  ent:DrawShadow(false)  ent:SetNoDraw(true)  ent:SetParent(self)  ent:SetSolid(SOLID_NONE)  ent:SetSkin(1)  ent:SetParent(self)  ent:Spawn()  table.insert(self.Food, ent)  end     ent = ClientsideModel("models/props_junk/popcan01a.mdl")  if ent:IsValid() then  ent:SetPos(self:LocalToWorld(Vector(3, 9, 11.5)))  ent:SetAngles(self:LocalToWorldAngles(Angle(0, -20, 0)))  ent:DrawShadow(false)  ent:SetNoDraw(true)  ent:SetParent(self)  ent:SetSolid(SOLID_NONE)  ent:SetParent(self)  ent:Spawn()  table.insert(self.Food, ent)  end    ent = ClientsideModel("models/props_junk/garbage_takeoutcarton001a.mdl")  if ent:IsValid() then  ent:SetPos(self:LocalToWorld(Vector(0, 4, 27)))  ent:SetAngles(self:LocalToWorldAngles(Angle(0, 0, 0)))  ent:DrawShadow(false)  ent:SetNoDraw(true)  ent:SetParent(self)  ent:SetSolid(SOLID_NONE)  ent:SetParent(self)  ent:Spawn()  table.insert(self.Food, ent)  end     ent = ClientsideModel("models/props_junk/garbage_takeoutcarton001a.mdl")  if ent:IsValid() then  ent:SetPos(self:LocalToWorld(Vector(7, 8, 27)))  ent:SetAngles(self:LocalToWorldAngles(Angle(0, 80, 0)))  ent:DrawShadow(false)  ent:SetNoDraw(true)  ent:SetParent(self)  ent:SetSolid(SOLID_NONE)  ent:SetParent(self)  ent:Spawn()  table.insert(self.Food, ent)  end     ent = ClientsideModel("models/props_junk/popcan01a.mdl")  if ent:IsValid() then  ent:SetPos(self:LocalToWorld(Vector(3, -5, 25)))  ent:SetAngles(self:LocalToWorldAngles(Angle(0, -20, 0)))  ent:DrawShadow(false)  ent:SetNoDraw(true)  ent:SetParent(self)  ent:SetSolid(SOLID_NONE)  ent:SetParent(self)  ent:Spawn()  table.insert(self.Food, ent)  end    ent = ClientsideModel("models/props_junk/garbage_glassbottle001a.mdl")  if ent:IsValid() then  ent:SetPos(self:LocalToWorld(Vector(7, -5, -16)))  ent:SetAngles(self:LocalToWorldAngles(Angle(90, 355, 0)))  ent:DrawShadow(false)  ent:SetNoDraw(true)  ent:SetParent(self)  ent:SetSolid(SOLID_NONE)  ent:SetParent(self)  ent:Spawn()  table.insert(self.Food, ent)  end    ent = ClientsideModel("models/props/cs_office/water_bottle.mdl")  if ent:IsValid() then  ent:SetPos(self:LocalToWorld(Vector(5, 9, -16)))  ent:SetAngles(self:LocalToWorldAngles(Angle(90, 30, 0)))  ent:DrawShadow(false)  ent:SetNoDraw(true)  ent:SetParent(self)  ent:SetSolid(SOLID_NONE)  ent:SetParent(self)  ent:Spawn()  table.insert(self.Food, ent)  end     ent = ClientsideModel("models/props/cs_office/water_bottle.mdl")  if ent:IsValid() then  ent:SetPos(self:LocalToWorld(Vector(10, 1, -16)))  ent:SetAngles(self:LocalToWorldAngles(Angle(90, 340, 0)))  ent:DrawShadow(false)  ent:SetNoDraw(true)  ent:SetParent(self)  ent:SetSolid(SOLID_NONE)  ent:SetParent(self)  ent:Spawn()  table.insert(self.Food, ent)  end    end  function ENT:OnRemove()  if self.Door:IsValid() then  self.Door:Remove()  end    if self.DoorFake:IsValid() then  self.DoorFake:Remove()  end  end  function ENT:SetObjectHealth(health)  self:SetDTFloat(0, health) end  local vOffset = Vector(19, 0, 16) local vOffset2 = Vector(-16, 0, 16) local aOffset = Angle(0, 90, 90) local aOffset2 = Angle(0, 270, 90)  function ENT:Think()  if MySelf:IsValid() and MySelf:Team() == TEAM_HUMAN then  local nextuse = MySelf.NextFridgeUse or 0  if self.Dinged then  if CurTime() < nextuse then  self.Dinged = false  end  elseif CurTime() >= nextuse then  self.Dinged = true   self:EmitSound("zombiesurvival/ding.ogg")  end  end   self:NextThink(CurTime() + 0.5)    return true end  function ENT:RenderInfo(pos, ang, owner)  cam.Start3D2D(pos, ang, 0.075)  if self:GetOpenedPercent() <= 0.01 then  local caches = MySelf.FridgeCaches   local timeremain = math.ceil(math.max(0, (MySelf.NextFridgeUse or 0) - CurTime()))  if MySelf.NextFridgeUse then  draw.SimpleText(timeremain, "ZS3D2DFont2", 0, -180, COLOR_GREEN, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)  end  if caches then  draw.SimpleText(caches .. " Uses Left", "ZS3D2DFont2Small", 0, -130, caches > 0 and COLOR_GREEN or COLOR_DARKRED, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)  end   if owner:IsValid() and owner:IsPlayer() then  draw.SimpleText("("..owner:ClippedName()..")", "ZS3D2DFont2Small", 0, 50, owner == MySelf and COLOR_LBLUE or COLOR_GRAY, TEXT_ALIGN_CENTER)  end   self:Draw3DHealthBar(math.Clamp(self:GetObjectHealth() / self:GetMaxObjectHealth(), 0, 1), nil, 190, 0.5)  end  cam.End3D2D() end  function ENT:Draw()  self:DrawModel()    local openedpercent = self:GetOpenedPercent()   if IsValid(self.Door) then  self.Hinge:SetAngles(self:LocalToWorldAngles(Angle(0, (openedpercent * 130) * -1, 0)))  self.Door:DrawModel()  self.DoorFake:DrawModel()    for _, v in pairs(self.Food) do  v:DrawModel()  end  end    if not MySelf:IsValid() or MySelf:Team() ~= TEAM_HUMAN then return end     if EyePos():DistToSqr(self:GetPos()) >= 202500 then return end   local owner = self:GetObjectOwner()  local ang = self:LocalToWorldAngles(aOffset)   self:RenderInfo(self:LocalToWorld(vOffset), ang, owner)  self:RenderInfo(self:LocalToWorld(vOffset2), self:LocalToWorldAngles(aOffset2), owner)  end  net.Receive("zs_nextfridgeuse", function(length)  MySelf.NextFridgeUse = net.ReadFloat() end)  net.Receive("zs_fridgecaches", function(length)  MySelf.FridgeCaches = net.ReadInt(8) end) 