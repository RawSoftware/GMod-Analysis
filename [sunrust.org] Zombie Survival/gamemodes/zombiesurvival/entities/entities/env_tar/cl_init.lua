include("shared.lua")  ENT.NextEmit = 0 ENT.NextTarEmit = 0  function ENT:Initialize()  self:EmitSound("ambient/water/water_splash"..math.random(3)..".wav", 65, math.random(60, 70))  self:EmitSound("vehicles/airboat/pontoon_splash"..math.random(2)..".wav", 65, math.random(70, 80), nil, CHAN_AUTO) end  function ENT:Draw()  local time = CurTime()  local pos = self:GetPos() + Vector(0, 0, 5 + math.sin(CurTime() * 8) * 2)      local tar_type = self:GetDTInt(0)     local color_depth = tar_type == 1 and 160 or 0     local tex_type = tar_type == 1 and "effects/fleck_glass"..math.random(3) or "zombiesurvival/blueblood"     local end_size = tar_type == 1 and 0.5 or 0.7     local amount = tar_type == 1 and 0.5 or 0.7   if time >= self.NextTarEmit then  self.NextTarEmit = time + 0.2   local emitter = ParticleEmitter(pos, true)  emitter:SetNearClip(12, 16)   for i=1, (20 * amount) do  local angler = AngleRand()  local dist = math.Rand(0, self.Radius)  local particle = emitter:Add(tex_type, pos + Vector(math.cos(angler.y) * dist, math.sin(angler.y) * dist, 0))  particle:SetColor(color_depth * 0.85, color_depth, color_depth)  particle:SetDieTime(math.Rand(0.6, 0.8))  particle:SetStartAlpha(200 * amount)  particle:SetEndAlpha(0)  particle:SetStartSize(5)  particle:SetEndSize(math.Rand(30, 48) * end_size)  particle:SetAngles(Vector(0, 0, tar_type == 1 and math.Rand(-1, 1)):Angle())  end   emitter:Finish() emitter = nil collectgarbage("step", 64)  end      if tar_type == 1 then return end   if time < self.NextEmit then return end  self.NextEmit = time + 0.3   local emitter2 = ParticleEmitter(pos, true)  emitter2:SetNearClip(12, 16)   for i=1, (5 * amount) do  local particle = emitter2:Add(tex_type, pos)  particle:SetColor(color_depth * 0.85, color_depth, color_depth)  particle:SetDieTime(math.Rand(0.6, 0.9))  particle:SetStartAlpha(255 * amount)  particle:SetEndAlpha(0)  particle:SetStartSize(3 * i)  particle:SetEndSize(particle:GetStartSize() + math.Rand(100, 112) * end_size)  particle:SetAngles(Angle(-90, math.random(360), 0))  end   emitter2:Finish() emitter2 = nil collectgarbage("step", 64) end 