SWEP.PrintName = "Phase Orb"  SWEP.ViewModel = "models/weapons/c_bugbait.mdl" SWEP.WorldModel = "models/weapons/w_bugbait.mdl"  SWEP.Description = "An orb that allows you teleport to its destination where you target."  SWEP.Base = "weapon_zs_basethrown"  SWEP.Primary.Ammo = "corruptedfragment"  SWEP.MaxStock = 8  SWEP.Primary.Delay = 3  AccessorFuncDT(SWEP, "TryTeleportTime", "Float", 0) AccessorFuncDT(SWEP, "NextTPSound", "Float", 1) AccessorFuncDT(SWEP, "TPPos", "Vector", 1)  function SWEP:Holster()     if CLIENT then         self:SCKHolster()     end      return true end  function SWEP:Deploy()     self:SetTryTeleportTime(0)     self:SetNextTPSound(0)     self:SetTPPos(Vector(0, 0, 0))          self.BaseClass.Deploy(self) end  function SWEP:PrimaryAttack(secondary)  if not self:CanPrimaryAttack() then return end  self:SetNextPrimaryFire(CurTime() + self.Primary.Delay)   self:EmitSound("hl1/ambience/particle_suck1.wav", 100, 75, 1, CHAN_WEAPON)  self:SetTryTeleportTime(CurTime() + 2)     self:SetNextTPSound(CurTime())      local owner = self:GetOwner()     local shootpos = owner:GetShootPos()      self.TryTPPos = util.TraceLine({start = shootpos, endpos = shootpos + owner:GetAimVector() * 300, mask = MASK_PLAYERSOLID_BRUSHONLY, filter = owner})      self:SetTPPos(self.TryTPPos.HitPos) end  local testmins = Vector(-10, -10, 0) local testmaxes = Vector(10, 10, 12)  function SWEP:Think()     self.BaseClass.Think(self)      local next_tp = self:GetTryTeleportTime()     if next_tp > 0 and next_tp < CurTime() then         local owner = self:GetOwner()          if SERVER then             local hits, base_pos = self:TeleportToTarget(owner, self.TryTPPos)              if hits <= 6 then                 local normal = self.TryTPPos.HitNormal and self.TryTPPos.HitNormal * 32 or Vector(0, 0, 0)                 local new_pos = base_pos + normal + Vector(0, 0, 4)                  local tb = player.GetAll()                 local tr = util.TraceHull({start = new_pos, endpos = new_pos + Vector(0, 0, 48), mins = testmins, maxs = testmaxes, mask = MASK_PLAYERSOLID_BRUSHONLY, filter = tb})                  if not tr.Hit then                     owner:SetPos(new_pos)                     timer.Simple(0, function()                         local effectdata = EffectData()                             effectdata:SetOrigin(new_pos)                             effectdata:SetNormal(Vector(0, 0, -1))                             effectdata:SetEntity(owner)                         util.Effect("corrupted_teleport", effectdata)                     end)                      self:TakePrimaryAmmo(1)                 end             end         end          self.NextDeploy = CurTime()          self:SetTryTeleportTime(0)         self:SetNextTPSound(0)         self:SetTPPos(Vector(0, 0, 0))     end      local next_tp_sound = self:GetNextTPSound()  if next_tp_sound > 0 and CurTime() >= next_tp_sound then  self:SetNextTPSound(CurTime() + 1)  self:EmitSound("weapons/zs_heph/electro4.wav", 77, 50, 0.7, CHAN_WEAPON + 1)  end     end