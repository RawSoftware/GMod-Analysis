SWEP.PrintName = "'Fulminator' Lightning Gun" SWEP.Description = "Releases a short range beam of lightning. Heating it to max vents energy around you."  SWEP.Base = "weapon_zs_base"  SWEP.HoldType = "ar2"  SWEP.ViewModel = "models/weapons/c_shotgun.mdl" SWEP.WorldModel = "models/weapons/w_smg1.mdl" SWEP.ShowViewModel = false SWEP.ShowWorldModel = false SWEP.UseHands = false  SWEP.Primary.Damage = 12.75 SWEP.Primary.NumShots = 1 SWEP.Primary.Delay = 0.06 SWEP.Primary.KnockbackScale = 0.1 SWEP.Primary.MaxDistance = 512  SWEP.Primary.ClipSize = 30 SWEP.Primary.Automatic = true SWEP.Primary.Ammo = "pulse" GAMEMODE:SetupDefaultClip(SWEP.Primary)  SWEP.ConeMax = 0 SWEP.ConeMin = 0  SWEP.Tier = 4  SWEP.HeatBuildShort = 0.07 SWEP.HeatBuildLong = 0.03 SWEP.HeatVentShort = 0.16 SWEP.HeatVentLong = 0.13 SWEP.HeatDecayShort = 0.1 SWEP.HeatDecayLong = 0.01 SWEP.HeatInitialLong = 0.05  SWEP.WalkSpeed = SPEED_SLOW SWEP.FireAnimSpeed = 0.34 SWEP.FireSoundPitch = 65  SWEP.TracerName = "tracer_volt"  SWEP.StartRecoil = 2  SWEP.DamageScaling = 1.25  GAMEMODE:AttachWeaponModifier(SWEP, WEAPON_MODIFIER_SHORT_TEAM_HEAT, -0.01, 1) GAMEMODE:AddNewRemantleBranch(SWEP, 1, "'Azimuth' Lightning Rifle", "No longer automatic, but fires slow, high damage, resistance penetrating ray that uses 4 ammo, increased range but inaccurate", function(wept)  wept.Primary.Damage = wept.Primary.Damage * 9.75  wept.Primary.Delay = 0.9  wept.Primary.MaxDistance = 768  wept.Primary.Automatic = false     wept.ResistanceAmmoAs = "357"      wept.ConeMax = 3   wept.HeatInitialLong = 0.23  wept.HeatVentLong = 0.27  wept.Rifle = true  wept.RequiredClip = 5   function wept:EmitStartFiringSound()  self:EmitSound("weapons/zs_ful/bolt.wav", 75, 52)  self:EmitSound("weapons/deagle/deagle-1.wav", 75, math.random(121, 135), 0.35, CHAN_WEAPON + 21)  self:EmitSound("weapons/zs_inner/innershot.ogg", 75, 110, 0.6, CHAN_WEAPON + 20)  end end).CollectiveName = "Azimuth"  function SWEP:Initialize()  self.FiringSound = CreateSound(self, "ambient/machines/combine_shield_touch_loop1.wav")  self.FiringSound:SetSoundLevel(85)  if CLIENT then self.VentingSound = CreateSound(self, "ambient/alarms/combine_bank_alarm_loop4.wav") end   self.BaseClass.Initialize(self) end  function SWEP:Deploy()  local owner = self:GetOwner()  if not self.PostOwner then  self.PostOwner = owner  end  local timediff = owner.GluonInactiveTime and CurTime() - owner.GluonInactiveTime or 0  self:SetShortHeat(math.Clamp((owner.ShortGluonHeat or 0) - timediff * self.HeatDecayShort, 0, 1))  self:SetLongHeat(math.Clamp((owner.LongGluonHeat or 0) - timediff * self.HeatDecayLong, 0, 1))   if self:GetLongHeat() > 0.5 then  self:SetGunState(2)  self:EmitSound("npc/scanner/scanner_siren1.wav")  end   return self.BaseClass.Deploy(self) end  function SWEP:Holster()  self:EndGluonState()   return self.BaseClass.Holster(self) end  function SWEP:OnRemove()  self.BaseClass.OnRemove(self)  self:EndGluonState() end  function SWEP:EmitStartFiringSound()  self:EmitSound("weapons/zs_ful/bolt.wav", 75, 85) end  function SWEP:GluonDamage()  return self.Primary.Damage end  function SWEP:PrimaryAttack()  if not self:CanPrimaryAttack() then return end  self:SetNextPrimaryFire(CurTime() + self:GetFireDelay())      local altuse = self:GetAltUsage()  if altuse or self.Rifle then  self:TakeCombinedPrimaryAmmo(self.RequiredClip or 1)  end  self:SetAltUsage(not altuse)   self:ShootBullets(self:GluonDamage(), self.Primary.NumShots, self:GetCone())  self.IdleAnimation = CurTime() + self:SequenceDuration()   if self:GetGunState() ~= 1 then  if IsFirstTimePredicted() then  self:EmitStartFiringSound()   local r = self.StartRecoil  self:GetOwner():ViewPunch(Angle(math.Rand(-r, r), math.Rand(-r, r), math.Rand(-r, r)))  end      self:SetLongHeat(math.min(self:GetLongHeat() + self.HeatInitialLong, 1))   if not self.Rifle then  self:SetGunState(1)  end  end end  function SWEP:CanPrimaryAttack()  if self:GetPrimaryAmmoCount() <= 0 then  return false  end   if self:GetOwner():IsHolding() or self:GetOwner():GetBarricadeGhosting() or self:GetReloadFinish() > 0 then return false end   return self:GetNextPrimaryFire() <= CurTime() end  function SWEP.BulletCallback(attacker, tr, dmginfo)  dmginfo:SetDamageType(DMG_GENERIC)   return {impact = false} end  function SWEP:Reload()  if self:GetGunState() == 0 and self:GetLongHeat() ~= 0 then  self:SetGunState(2)  self:EmitSound("npc/scanner/scanner_siren1.wav")  end end  function SWEP:SecondaryAttack() end  function SWEP:StopGluonSounds()  self.FiringSound:Stop()  if CLIENT then self.VentingSound:Stop() end end  function SWEP:EndGluonState()  local owner = self.PostOwner or self:GetOwner()  if owner:IsValid() then  owner.ShortGluonHeat = self:GetShortHeat()  owner.LongGluonHeat = self:GetLongHeat()  owner.GluonInactiveTime = CurTime()  owner.GunSway = false  end   self:StopGluonSounds() end  function SWEP:SetGunState(state)  self:SetDTInt(1, state) end  function SWEP:GetGunState(state)  return self:GetDTInt(1) end  function SWEP:SetAltUsage(usage)  self:SetDTBool(1, usage) end  function SWEP:GetAltUsage()  return self:GetDTBool(1) end  function SWEP:SetShortHeat(heat)  self:SetDTFloat(8, heat) end  function SWEP:GetShortHeat()  return self:GetDTFloat(8) end  function SWEP:SetLongHeat(heat)  self:SetDTFloat(9, heat) end  function SWEP:GetLongHeat()  return self:GetDTFloat(9) end  function SWEP:ManageHeat()  local owner = self:GetOwner()  if owner and owner:IsValid() then  local frametime = FrameTime()  if self:GetGunState() == 1 then  self.FiringSound:PlayEx(1, self.FireSoundPitch + CurTime() % 1)  self:SetShortHeat(math.min(self:GetShortHeat() + frametime * self.HeatBuildShort, 1))  self:SetLongHeat(math.min(self:GetLongHeat() + frametime * self.HeatBuildLong, 1))  elseif self:GetGunState() == 2 then  self.FiringSound:Stop()  if CLIENT then  self.VentingSound:PlayEx(1, 255 + CurTime() % 1)  end   local frametimeadj = frametime * self:GetReloadSpeedMultiplier()   self:SetShortHeat(math.max(self:GetShortHeat() - frametimeadj * self.HeatVentShort, 0))  self:SetLongHeat(math.max(self:GetLongHeat() - frametimeadj * self.HeatVentLong, 0))  self:SetNextPrimaryFire(CurTime() + self.Primary.Delay * 1.5)   if self:GetLongHeat() == 0 and self:GetShortHeat() < self.HeatBuildShort then  self:SetGunState(0)  self:EmitSound("npc/scanner/combat_scan3.wav", 65, 180)  end  else  self:StopGluonSounds()  self:SetShortHeat(math.max(self:GetShortHeat() - frametime * self.HeatDecayShort, 0))  self:SetLongHeat(math.max(self:GetLongHeat() - frametime * self.HeatDecayLong, 0))  end  else  self:StopGluonSounds()  end end  function SWEP:Think()  self.BaseClass.Think(self)   local overheat = self:GetShortHeat() + self:GetLongHeat() >= 1  if self:GetGunState() == 1 and CurTime() >= self:GetNextPrimaryFire() + 0.1 or overheat then  self:SetGunState(overheat and 2 or 0)  self:SetNextPrimaryFire(CurTime() + 0.1)   if overheat then  self:EmitSound("npc/scanner/scanner_siren1.wav", 75)   if SERVER then  local owner = self:GetOwner()  local pos = owner:WorldSpaceCenter()   util.BlastDamagePlayer(self, owner, pos, 100, 55, DMG_ALWAYSGIB, 0.9, {[owner] = true})   local effectdata = EffectData()  effectdata:SetOrigin(pos)  util.Effect("hit_zeus_new", effectdata, true, true)   local effect2 = ents.Create("point_tesla")  if effect2:IsValid() then  effect2:SetKeyValue("m_flRadius", "150")  effect2:SetKeyValue("m_SoundName", "DoSpark")  effect2:SetKeyValue("m_Color", "255 255 255")  effect2:SetKeyValue("texture", "effects/laser1.vmt")  effect2:SetKeyValue("beamcount_min", "18")  effect2:SetKeyValue("beamcount_max", "25")  effect2:SetKeyValue("thick_min", "5")  effect2:SetKeyValue("thick_max", "10")  effect2:SetKeyValue("lifetime_min", "0.25")  effect2:SetKeyValue("lifetime_max", "0.4")  effect2:SetKeyValue("interval_min", "0.05")  effect2:SetKeyValue("interval_max", "0.12")  effect2:SetPos(pos)  effect2:Spawn()  effect2:Fire("DoSpark", "", 0.5)  effect2:Fire("kill", "", 0.8)  end  end  end  end   self:ManageHeat() end 