AddCSLuaFile()  SWEP.Base = "weapon_zs_baseshotgun" local BaseClass = baseclass.Get("weapon_zs_baseshotgun")  SWEP.PrintName = "'Annabelle' Rifle" SWEP.Description = "This rifle loads rounds individually, at the cost of being not perfectly accurate."  if CLIENT then     SWEP.ViewModelFlip = false      SWEP.IronSightsPos = Vector(-8.8, 10, 4.32)     SWEP.IronSightsAng = Vector(1.4, 0.1, 5)      SWEP.HUD3DBone = "root"     SWEP.HUD3DPos = Vector(-0.8, -1.4, -6)     SWEP.HUD3DAng = Angle(0, 0, 0)     SWEP.HUD3DScale = 0.015      SWEP.WElements = {         ["c_model"] = { type = "Model", model = "models/weapons/x_annabelle.mdl", bone = "ValveBiped.Bip01_R_Hand", rel = "", pos = Vector(-8.089, 10.177, -7.461), angle = Angle(-172.939, -174.426, 0), size = Vector(1, 1, 1), color = Color(255, 255, 255, 255), surpresslightning = false, material = "", skin = 0, bodygroup = {} }     }      SWEP.ShowWorldModel = false end  SWEP.HoldType = "ar2"  SWEP.ViewModel = "models/weapons/x_annabelle.mdl" SWEP.WorldModel = "models/weapons/w_annabelle.mdl" SWEP.UseHands = true  SWEP.CSMuzzleFlashes = false  SWEP.Primary.Sound = Sound("weapons/shotgun/shotgun_fire7.wav") SWEP.Primary.Damage = 68.5 SWEP.Primary.NumShots = 1 SWEP.Primary.Delay = 0.9  SWEP.ReloadDelay = 0.4  SWEP.Primary.ClipSize = 5 SWEP.Primary.Automatic = false SWEP.Primary.Ammo = "357" SWEP.Primary.DefaultClip = 25  SWEP.ConeMax = 4 SWEP.ConeMin = 0.25  SWEP.ReloadSound = Sound(")weapons/shotgun/shotgun_reload2.wav") SWEP.PumpSound = Sound("weapons/galil/galil_boltpull.wav") SWEP.PumpSoundPitch = 80 SWEP.ReloadSoundPitch = 115  SWEP.WalkSpeed = SPEED_SLOW  SWEP.Tier = 2  SWEP.OverkillFactor = 0.3  SWEP.FireAnimSpeed = 0.65  SWEP.IronSightsPos = Vector(-7.91, -9, 4.1) SWEP.IronSightsAng = Vector(0, -3, 2)  GAMEMODE:AttachWeaponModifier(SWEP, WEAPON_MODIFIER_MAX_SPREAD, -0.5, 1) GAMEMODE:AttachWeaponModifier(SWEP, WEAPON_MODIFIER_FIRE_DELAY, -0.1) GAMEMODE:AddNewRemantleBranch(SWEP, 1, "'Annabelle' Birdshot Rifle", "Fires a spread of less accurate shots that deal more total damage, retains some damage resistance penetration", function(wept)     wept.Primary.Damage = wept.Primary.Damage / 4.7     wept.Primary.NumShots = 6     wept.ConeMin = wept.ConeMin * 10     wept.ConeMax = wept.ConeMax * 1.25     wept.ResistanceAmmoAs = "pistol"     wept.OverkillFactor = nil     wept.AmmoTrinketOverride = 1.5      wept.ReloadPos = Vector(-16.085, -12.712, -14.271)     wept.ReloadAng = Vector(42.83, 55.082, -53.343)          wept.ReloadActivity = ACT_SHOTGUN_PUMP     wept.ReloadStartActivity = ACT_SHOTGUN_PUMP            wept.ReloadSound = Sound( "weapons/shotgun/shotgun_cock.wav" )      function wept:EmitFireSound()         self:EmitSound("weapons/zs_aa12/fire_aa12.ogg", 75, math.random(147, 156), 0.85)         self:EmitSound("weapons/shotgun/shotgun_fire6.wav", 75, math.random(78, 81), 0.7, CHAN_WEAPON + 20)     end      local mat = Material("models/props_wasteland/quarryobjects01")     wept.PreDrawViewModel = function(self, vm)         render.MaterialOverrideByIndex(0, mat)          BaseClass.PreDrawViewModel(self, vm)     end     wept.PostDrawViewModel = function(self, vm)         render.MaterialOverrideByIndex(0)          BaseClass.PostDrawViewModel(self, vm)     end          wept.ViewModelBoneMods = {         ["ValveBiped.Bip01_L_Finger31"] = { scale = Vector(1, 1, 1), pos = Vector(0, 0, 0), angle = Angle(0, -16.21, 0) },         ["ValveBiped.Bip01_L_Finger11"] = { scale = Vector(1, 1, 1), pos = Vector(0, 0, 0), angle = Angle(0, 30.757, 0) },         ["ValveBiped.Bip01_L_Clavicle"] = { scale = Vector(1, 1, 1), pos = Vector(-2.073, 4.52, 0.541), angle = Angle(-10.943, 7.583, 1.072) },         ["ValveBiped.Bip01_L_Finger42"] = { scale = Vector(1, 1, 1), pos = Vector(0, 0, 0), angle = Angle(0, -50.415, 0) },         ["ValveBiped.Bip01_L_Finger2"] = { scale = Vector(1, 1, 1), pos = Vector(0, 0, 0), angle = Angle(0, 50.472, 0) },         ["ValveBiped.Bip01_L_Hand"] = { scale = Vector(1, 1, 1), pos = Vector(0, 0, 0), angle = Angle(-25.344, 1.689, 21.92) },         ["ValveBiped.Bip01_L_Finger41"] = { scale = Vector(1, 1, 1), pos = Vector(0, 0, 0), angle = Angle(0, -17.187, 0) },         ["ValveBiped.Bip01_L_Finger1"] = { scale = Vector(1, 1, 1), pos = Vector(0, 0, 0), angle = Angle(-6.415, 54.254, -1.787) },         ["ValveBiped.Bip01_L_Finger21"] = { scale = Vector(1, 1, 1), pos = Vector(0, 0, 0), angle = Angle(0, 44.756, 0) },         ["ValveBiped.Bip01_L_Finger4"] = { scale = Vector(1, 1, 1), pos = Vector(0, 0, 0), angle = Angle(0, 84.986, 0) },         ["ValveBiped.Bip01_L_Finger02"] = { scale = Vector(1, 1, 1), pos = Vector(0, 0, 0), angle = Angle(0, 21.985, 0) },         ["ValveBiped.Bip01_L_Forearm"] = { scale = Vector(1, 1, 1), pos = Vector(0, 0, 0), angle = Angle(13.546, 12.875, 107.906) },         ["ValveBiped.Bip01_L_Finger12"] = { scale = Vector(1, 1, 1), pos = Vector(0, 0, 0), angle = Angle(0, -5.954, 0) },         ["ValveBiped.Bip01_L_Finger01"] = { scale = Vector(1, 1, 1), pos = Vector(0, 0, 0), angle = Angle(0, 36.104, 0) },         ["ValveBiped.Bip01_L_UpperArm"] = { scale = Vector(1, 1, 1), pos = Vector(0.234, 0.995, 0), angle = Angle(-0.655, -9.49, 28.212) },         ["ValveBiped.Bip01_L_Finger32"] = { scale = Vector(1, 1, 1), pos = Vector(0, 0, 0), angle = Angle(0, -69.09, 0) },         ["ValveBiped.Bip01_L_Finger3"] = { scale = Vector(1, 1, 1), pos = Vector(0, 0, 0), angle = Angle(0, 65.332, 0) },         ["ValveBiped.Bip01_L_Finger22"] = { scale = Vector(1, 1, 1), pos = Vector(0, 0, 0), angle = Angle(0, -9.823, 0) },         ["ValveBiped.Bip01_L_Finger0"] = { scale = Vector(1, 1, 1), pos = Vector(0, 0, 0), angle = Angle(6.165, -19.823, -3.25) },         ["root"] = { scale = Vector(1, 1, 1), pos = Vector(0, 0, 0), angle = Angle(0, 0, 0) }     }          for k, v in pairs( wept.ViewModelBoneMods ) do         if v.pos and v.angle and k ~= "root" then             wept.ViewModelBoneMods[ k ].def_pos = Vector( v.pos.x, v.pos.y, v.pos.z )             wept.ViewModelBoneMods[ k ].def_angle = Angle( v.angle.p, v.angle.y, v.angle.r )         end     end                wept.StopReloading = function( self )         self:SetDTFloat(3, 0)         self:SetDTBool(2, false)         self:SetNextPrimaryFire(CurTime() + self.Primary.Delay * 0.75)                  if self:Clip1() > 0 then             if self.PumpActivity then                 self:SendWeaponAnim(self.PumpActivity)                 self:ProcessReloadAnim()             end             self.ReloadFinishAnimDuration = 0.5             self.ReloadFinishAnimTime = CurTime() + self.ReloadFinishAnimDuration         else             self:SendWeaponAnim( self.IdleActivity )           end     end          wept.Think = function( self )         if self:GetIronsights() and ( not self:GetOwner():KeyDown(IN_ATTACK2) or self:IsReloading() ) then               self:SetIronsights(false)         end          self.BaseClass.Think(self)     end          wept.ViewModelDrawn = function( self )                          local delta = 0                  if self.ReloadFinishAnimTime ~= 0 and self.ReloadFinishAnimDuration then                          delta = math.Clamp( ( self.ReloadFinishAnimTime - CurTime() ) / self.ReloadFinishAnimDuration, 0, 1 )                          if self.ReloadFinishAnimTime > CurTime() then                                  if self.ViewModelBoneMods and self.ViewModelBoneMods["root"] and self.ViewModelBoneMods["root"].angle then                     delta = delta ^ 1.5                     self.ViewModelBoneMods["root"].angle.y = delta * 360 * 2                 end              else                 self.ReloadFinishAnimTime = 0                                  if self.ViewModelBoneMods and self.ViewModelBoneMods["root"] and self.ViewModelBoneMods["root"].angle then                     self.ViewModelBoneMods["root"].angle.y = 0                 end                              end                      end                  if self.ReloadLerp and self.ViewModelBoneMods and self.ReloadLerp > 0 then             for k, v in pairs( self.ViewModelBoneMods ) do                 if v.pos and v.angle and v.def_pos and v.def_angle then                     self.ViewModelBoneMods[ k ].pos = v.def_pos * ( 1 - self.ReloadLerp )                     self.ViewModelBoneMods[ k ].angle = v.def_angle * ( 1 - self.ReloadLerp )                 end             end         end                          self:SCKViewModel()     end          local ghostlerp = 0     local reloadlerp = 0     wept.CalcViewModelView = function(self, vm, oldpos, oldang, pos, ang)         local bIron = self:GetIronsights() and not GAMEMODE.NoIronsights          if bIron ~= self.bLastIron then             self.bLastIron = bIron             self.fIronTime = CurTime()              if bIron then                 self.SwayScale = 0.3                 self.BobScale = 0.1             else                 self.SwayScale = 2.0                 self.BobScale = 1.5             end         end          local Mul = math.Clamp((CurTime() - (self.fIronTime or 0)) * 4, 0, 1)         if not bIron then Mul = 1 - Mul end          if Mul > 0 then             local Offset = self.IronSightsPos             if self.IronSightsAng then                 ang = Angle(ang.p, ang.y, ang.r)                 ang:RotateAroundAxis(ang:Right(), self.IronSightsAng.x * Mul)                 ang:RotateAroundAxis(ang:Up(), self.IronSightsAng.y * Mul)                 ang:RotateAroundAxis(ang:Forward(), self.IronSightsAng.z * Mul)             end              pos = pos + Offset.x * Mul * ang:Right() + Offset.y * Mul * ang:Forward() + Offset.z * Mul * ang:Up()         end          if self:GetOwner():GetBarricadeGhosting() then             ghostlerp = math.min(1, ghostlerp + FrameTime() * 4)         elseif ghostlerp > 0 then             ghostlerp = math.max(0, ghostlerp - FrameTime() * 5)         end                  if self:IsReloading() and Mul <= 0 then             reloadlerp = math.min(1, reloadlerp + FrameTime() * 2)         elseif reloadlerp > 0 then             reloadlerp = math.max(0, reloadlerp - FrameTime() * 3)         end                  self.ReloadLerp = reloadlerp                  if reloadlerp > 0 then             local Offset = self.ReloadPos             local Ang = self.ReloadAng             if Offset and Ang then                 ang = Angle(ang.p, ang.y, ang.r)                 ang:RotateAroundAxis(ang:Right(), Ang.x * reloadlerp)                 ang:RotateAroundAxis(ang:Up(), Ang.y * reloadlerp)                 ang:RotateAroundAxis(ang:Forward(), Ang.z * reloadlerp)                                  pos = pos + Offset.x * reloadlerp * ang:Right() + Offset.y * reloadlerp * ang:Forward() + Offset.z * reloadlerp * ang:Up()             end         end          if ghostlerp > 0 then             pos = pos + 3.5 * ghostlerp * ang:Up()             ang:RotateAroundAxis(ang:Right(), -30 * ghostlerp)         end          return pos, ang     end end).CollectiveName = "Birdshot"  function SWEP:EmitFireSound()     self:EmitSound(self.Primary.Sound, 75, math.random(95, 103), 0.8)     self:EmitSound("weapons/shotgun/shotgun_fire6.wav", 75, math.random(78, 81), 0.65, CHAN_WEAPON + 20) end  function SWEP:SecondaryAttack()     if self:GetNextSecondaryFire() <= CurTime() and not self:GetOwner():IsHolding() and self:GetReloadFinish() == 0 then         self:SetIronsights(true)     end end  function SWEP:Think()     if self:GetIronsights() and not self:GetOwner():KeyDown(IN_ATTACK2) then         self:SetIronsights(false)     end      self.BaseClass.Think(self) end 