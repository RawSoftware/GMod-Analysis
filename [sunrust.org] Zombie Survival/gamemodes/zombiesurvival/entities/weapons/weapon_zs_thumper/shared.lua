local BaseClass = baseclass.Get("weapon_zs_baseproj") local BaseClassShotgun = baseclass.Get("weapon_zs_baseshotgun")  SWEP.PrintName = "'Thumper' M79 Grenade Launcher" SWEP.Description = "Fires a grenade that primes after a short delay. Unprimed grenades deal double damage on direct contact but don't explode."  SWEP.Base = "weapon_zs_baseproj"  SWEP.HoldType = "shotgun"  SWEP.ViewModel = "models/weapons/cstrike/c_shot_m3super90.mdl" SWEP.WorldModel = "models/weapons/w_shotgun.mdl" SWEP.UseHands = true  SWEP.CSMuzzleFlashes = false  SWEP.Primary.ClipSize = 1 SWEP.Primary.Automatic = true SWEP.Primary.Ammo = "impactmine" SWEP.Primary.Delay = 1 SWEP.Primary.Damage = 86 SWEP.Primary.NumShots = 1 GAMEMODE:SetupDefaultClip(SWEP.Primary)  SWEP.ConeMax = 4.5 SWEP.ConeMin = 1.5  SWEP.WalkSpeed = SPEED_SLOW  SWEP.Tier = 2  SWEP.IronSightsPos = Vector(-9.32, -9.233, 0.439) SWEP.IronSightsAng = Vector(0, -4.06, 0)  SWEP.ReloadDelay = 0.4   SWEP.ReloadSpeed = 0.6   SWEP.ReloadSound = Sound("weapons/zs_sawnoff/barrelup.ogg") SWEP.ReloadFinishSound = Sound("weapons/zs_sawnoff/barreldown.ogg") SWEP.ReloadPlugSound = Sound("weapons/shotgun/shotgun_reload1.wav")  SWEP.ReloadStartActivity = ACT_SHOTGUN_RELOAD_START SWEP.ReloadActivity = ACT_VM_RELOAD  SWEP.Taper = 0.72 SWEP.Radius = 66  SWEP.FireAnimSpeed = 1.75  GAMEMODE:AttachWeaponModifier(SWEP, WEAPON_MODIFIER_RELOAD_SPEED, 0.025) GAMEMODE:AttachWeaponModifier(SWEP, WEAPON_MODIFIER_RADIUS, 6) local branch = GAMEMODE:AddNewRemantleBranch(SWEP, 1, "'Flaremast' Grenade Pistol", "Shoots like a flare and gains explosive power and ignite as it travels. Deals mostly direct damage.", function(wept)  wept.ViewModel = "models/weapons/c_357.mdl"  wept.WorldModel = "models/weapons/w_pist_deagle.mdl"   wept.HoldType = "revolver"   wept.ReloadActivity = ACT_VM_RELOAD  wept.PumpActivity = ACT_SHOTGUN_RELOAD_FINISH  wept.ReloadStartActivity = ACT_SHOTGUN_RELOAD_START  wept.ReloadStartGesture = ACT_HL2MP_GESTURE_RELOAD_SHOTGUN   wept.ReloadStartSequence = "reload_start"  wept.ReloadSequence = "reload_loop"  wept.ReloadFinishSequence = "reload_end"   if CLIENT then  wept.HUD3DBone = "Python"  wept.HUD3DPos = Vector(1.3, 0.365, 4.153)  wept.HUD3DAng = Angle(-180, 0, 0)  wept.HUD3DScale = 0.015   wept.ShowViewModel = false  wept.ShowWorldModel = false   wept.ViewModelFOV = 55   wept.IronSightsPos = Vector(-4.48, -17.285, 0.759)  wept.IronSightsAng = Vector(0, 0, 0.765)   wept.OverrideShellInsertDuration = 0.5   wept.VElements = {  ["shell_hand"] = { type = "Model", model = "models/Items/AR2_Grenade.mdl", bone = "ValveBiped.Bip01_L_Finger02", rel = "", pos = Vector(2.329, 0.052, 0.75), angle = Angle(37.4, 8.489, 5.091), size = Vector(0.3, 0.649, 0.649), color = Color(255, 255, 255, 255), surpresslightning = false, material = "", skin = 0, bodygroup = {}, hide = true },  ["hinge"] = { type = "Model", model = "", bone = "Cylinder", rel = "grip2", pos = Vector(6.905, 0, -0.338), angle = Angle(0, 0, 0), size = Vector(0.412, 0.412, 0.412), color = Color(255, 255, 255, 255), surpresslightning = false, material = "", skin = 0, bodygroup = {} },  ["grip"] = { type = "Model", model = "models/weapons/w_pist_fiveseven.mdl", bone = "Python", rel = "", pos = Vector(0.21, 5.822, -3.615), angle = Angle(90, -90, 0), size = Vector(0.432, 1.088, 1), color = Color(155, 155, 155, 255), surpresslightning = false, material = "phoenix_storms/metal_plate", skin = 0, bodygroup = {} },  ["shell"] = { type = "Model", model = "models/Items/AR2_Grenade.mdl", bone = "ValveBiped.Bip01_Spine4", rel = "pipe", pos = Vector(-2.514, -0.015, -0.579), angle = Angle(4.501, 0, 0), size = Vector(0.4, 0.6, 0.6), color = Color(255, 255, 255, 255), surpresslightning = false, material = "", skin = 0, bodygroup = {} },  ["pipe"] = { type = "Model", model = "models/props_pipes/concrete_pipe001a.mdl", bone = "ValveBiped.Bip01_Spine4", rel = "hinge", pos = Vector(-0.528, 0, 0.617), angle = Angle(0, 0, 0), size = Vector(0.086, 0.017, 0.017), color = Color(85, 85, 85, 255), surpresslightning = false, material = "phoenix_storms/metal_plate", skin = 0, bodygroup = {} },  ["grip3+"] = { type = "Model", model = "models/props_phx/construct/wood/wood_boardx1.mdl", bone = "ValveBiped.Bip01_Spine4", rel = "grip2", pos = Vector(6.118, 0, -1.227), angle = Angle(0, 0, 0), size = Vector(0.059, 0.208, 0.317), color = Color(145, 145, 145, 255), surpresslightning = false, material = "models/props/cs_militia/roofedges", skin = 0, bodygroup = {} },  ["shell_ej"] = { type = "Model", model = "models/Items/AR2_Grenade.mdl", bone = "ValveBiped.Bip01_Spine4", rel = "pipe", pos = Vector(-2.514, -0.015, -0.579), angle = Angle(4.501, 0, 0), size = Vector(0.4, 0.6, 0.6), color = Color(255, 255, 255, 255), surpresslightning = false, material = "", skin = 0, bodygroup = {}, hide = true },  ["topdetail2"] = { type = "Model", model = "models/Mechanics/robotics/g1.mdl", bone = "ValveBiped.Bip01_Spine4", rel = "pipe", pos = Vector(4.684, 0, 0.754), angle = Angle(0, 90, 90), size = Vector(0.012, 0.039, 0.041), color = Color(85, 85, 85, 255), surpresslightning = false, material = "phoenix_storms/metal_plate", skin = 0, bodygroup = {} },  ["box_detail"] = { type = "Model", model = "models/props_junk/cardboard_box001a.mdl", bone = "ValveBiped.Bip01_Spine4", rel = "topdetail2+", pos = Vector(0, 0, 0.282), angle = Angle(0, 90, 90), size = Vector(0.028, 0.008, 0.014), color = Color(85, 85, 85, 255), surpresslightning = false, material = "phoenix_storms/metal_plate", skin = 0, bodygroup = {} },  ["grip3"] = { type = "Model", model = "models/props_phx/construct/wood/wood_boardx1.mdl", bone = "ValveBiped.Bip01_Spine4", rel = "grip2", pos = Vector(2.118, 0, -1.227), angle = Angle(0, 0, 0), size = Vector(0.108, 0.208, 0.317), color = Color(155, 155, 155, 255), surpresslightning = false, material = "phoenix_storms/metal_plate", skin = 0, bodygroup = {} },  ["grip2"] = { type = "Model", model = "models/XQM/panel360.mdl", bone = "ValveBiped.Bip01_Spine4", rel = "grip", pos = Vector(1.608, 0.068, 5.543), angle = Angle(0, 0, 0), size = Vector(0.555, 0.028, 0.041), color = Color(155, 155, 155, 255), surpresslightning = false, material = "phoenix_storms/metal_plate", skin = 0, bodygroup = {} },  ["topdetal"] = { type = "Model", model = "models/PHXtended/bar1x45a.mdl", bone = "ValveBiped.Bip01_Spine4", rel = "pipe", pos = Vector(-2.472, 0.314, 0.564), angle = Angle(0, 90, 0), size = Vector(0.107, 0.056, 0.059), color = Color(155, 155, 155, 255), surpresslightning = false, material = "phoenix_storms/metal_plate", skin = 0, bodygroup = {} },  ["topdetail2+"] = { type = "Model", model = "models/props_wasteland/interior_fence003e.mdl", bone = "ValveBiped.Bip01_Spine4", rel = "pipe", pos = Vector(2.713, 0, 0.975), angle = Angle(0, 180, 0), size = Vector(0.123, 0.014, 0.017), color = Color(85, 85, 85, 255), surpresslightning = false, material = "phoenix_storms/metal_plate", skin = 0, bodygroup = {} }  }   wept.WElements = {  ["grip2"] = { type = "Model", model = "models/XQM/panel360.mdl", bone = "ValveBiped.Bip01_R_Hand", rel = "grip", pos = Vector(1.608, 0.068, 5.543), angle = Angle(0, 0, 0), size = Vector(0.556, 0.029, 0.041), color = Color(155, 155, 155, 255), surpresslightning = false, material = "phoenix_storms/metal_plate", skin = 0, bodygroup = {} },  ["grip"] = { type = "Model", model = "models/weapons/w_pist_fiveseven.mdl", bone = "ValveBiped.Bip01_R_Hand", rel = "", pos = Vector(3.407, 1.412, 2.028), angle = Angle(0, -4.981, 180), size = Vector(0.805, 1.088, 1), color = Color(155, 155, 155, 255), surpresslightning = false, material = "phoenix_storms/metal_plate", skin = 0, bodygroup = {} },  ["topdetail"] = { type = "Model", model = "models/PHXtended/bar1x45a.mdl", bone = "ValveBiped.Bip01_R_Hand", rel = "pipe", pos = Vector(-2.472, 0.314, 0.564), angle = Angle(0, 90, 0), size = Vector(0.107, 0.056, 0.059), color = Color(155, 155, 155, 255), surpresslightning = false, material = "phoenix_storms/metal_plate", skin = 0, bodygroup = {} },  ["pipe"] = { type = "Model", model = "models/props_pipes/concrete_pipe001a.mdl", bone = "ValveBiped.Bip01_R_Hand", rel = "grip2", pos = Vector(4.61, 0, 0.149), angle = Angle(0, 0, 0), size = Vector(0.087, 0.017, 0.017), color = Color(85, 85, 85, 255), surpresslightning = false, material = "phoenix_storms/metal_plate", skin = 0, bodygroup = {} },  ["balcked"] = { type = "Model", model = "models/XQM/panel360.mdl", bone = "ValveBiped.Bip01_R_Hand", rel = "pipe", pos = Vector(4.705, 0, 0), angle = Angle(0, 0, 0), size = Vector(0.717, 0.028, 0.028), color = Color(0, 0, 0, 255), surpresslightning = false, material = "models/debug/debugwhite", skin = 0, bodygroup = {} },  ["topdetail2"] = { type = "Model", model = "models/Mechanics/robotics/g1.mdl", bone = "ValveBiped.Bip01_R_Hand", rel = "pipe", pos = Vector(4.684, 0, 0.754), angle = Angle(0, 90, 90), size = Vector(0.012, 0.039, 0.041), color = Color(85, 85, 85, 255), surpresslightning = false, material = "phoenix_storms/metal_plate", skin = 0, bodygroup = {} },  ["topdetail2+"] = { type = "Model", model = "models/props_wasteland/interior_fence003e.mdl", bone = "ValveBiped.Bip01_R_Hand", rel = "pipe", pos = Vector(2.713, 0, 0.975), angle = Angle(0, 180, 0), size = Vector(0.123, 0.014, 0.017), color = Color(85, 85, 85, 255), surpresslightning = false, material = "phoenix_storms/metal_plate", skin = 0, bodygroup = {} },  ["grip3"] = { type = "Model", model = "models/props_phx/construct/wood/wood_boardx1.mdl", bone = "ValveBiped.Bip01_R_Hand", rel = "grip2", pos = Vector(2.118, 0, -1.227), angle = Angle(0, 0, 0), size = Vector(0.109, 0.208, 0.317), color = Color(155, 155, 155, 255), surpresslightning = false, material = "phoenix_storms/metal_plate", skin = 0, bodygroup = {} },  ["grip3+"] = { type = "Model", model = "models/props_phx/construct/wood/wood_boardx1.mdl", bone = "ValveBiped.Bip01_R_Hand", rel = "grip2", pos = Vector(6.118, 0, -1.227), angle = Angle(0, 0, 0), size = Vector(0.059, 0.208, 0.317), color = Color(145, 145, 145, 255), surpresslightning = false, material = "models/props/cs_militia/roofedges", skin = 0, bodygroup = {} },  ["box_detail"] = { type = "Model", model = "models/props_junk/cardboard_box001a.mdl", bone = "ValveBiped.Bip01_R_Hand", rel = "topdetail2+", pos = Vector(0, 0, 0.282), angle = Angle(0, 90, 90), size = Vector(0.028, 0.009, 0.014), color = Color(85, 85, 85, 255), surpresslightning = false, material = "phoenix_storms/metal_plate", skin = 0, bodygroup = {} }  }   wept.ViewModelBoneMods = {  ["ValveBiped.Bip01_R_Finger1"] = { scale = Vector(1, 1, 1), pos = Vector(0, 0, 0), angle = Angle(0, -34.319, 0) },  ["ValveBiped.Bip01_R_Finger11"] = { scale = Vector(1, 1, 1), pos = Vector(0, 0, 0), angle = Angle(0, -55.82, 0) },  ["ValveBiped.Bip01_R_Finger0"] = { scale = Vector(1, 1, 1), pos = Vector(0, 0, 0), angle = Angle(-12.164, 2.357, -14.556) }  }   for k, v in pairs( wept.VElements ) do  if v and string.find( k, "shell" ) then  wept.VElements[ k ].def_pos = Vector( v.pos.x, v.pos.y, v.pos.z )  wept.VElements[ k ].def_angle = Angle( v.angle.p, v.angle.y, v.angle.r )  end  end   local lerp_vector = LerpVector  local lerp_angle = LerpAngle   local vec_forward = Vector( 1, 0, 0 )  local vec_up = vector_up   function wept:PreDrawViewModel(vm)  self.BaseClass.PreDrawViewModel(self, vm)   if self.NextShellEjection and self.NextShellEjection < CurTime() then  self.NextShellEjection = nil  self:DoShellEjection( 0.3 )  end   local ang = self.VElements["pipe"].angle  ang.y = math.Approach(ang.y, self:IsReloading() and -14 or 0, FrameTime() * 100)   if self.VElements then   self.ShellEjectTime = self.ShellEjectTime or 0  self.ShellInsertTime = self.ShellInsertTime or 0   local shell = self.VElements["shell"]  local shell_ej = self.VElements["shell_ej"]  local shell_hand = self.VElements["shell_hand"]   local shell_delta_ej = 0  local shell_delta = 0   if self.NextShellHandInsertion and self.NextShellHandInsertion < CurTime() then  self.NextShellHandInsertion = nil  if self.VElements["grip"] and self.VElements["grip"].bone == "Python" then  shell_hand.hide = false  end  end   if self.ShellEjectTime ~= 0 and self.ShellEjectionTable then   if self.ShellEjectTime >= CurTime() then  shell_delta_ej = math.Clamp( 1 - ( self.ShellEjectTime - CurTime() ) / ( self.ShellEjectDuration or 0.3 ), 0, 1 )  shell_delta_ej = shell_delta_ej ^ 1.5   shell_ej.pos = lerp_vector( shell_delta_ej, shell_ej.def_pos, shell_ej.def_pos + vec_forward * -15 - vec_up * ( shell_delta_ej * 30 ) + self.ShellEjectionTable[1].pos * shell_delta_ej )  shell_ej.angle = lerp_angle( shell_delta_ej, shell_ej.def_angle, shell_ej.def_angle + self.ShellEjectionTable[1].ang * shell_delta_ej )  shell_ej.hide = false   shell.hide = true  else  self.ShellEjectTime = 0  shell_ej.hide = true  end  end   if self.ShellInsertTime ~= 0 then  if self.ShellInsertTime >= CurTime() and self.ShellInsertDuration then  shell_delta = math.Clamp( 1 - ( self.ShellInsertTime - CurTime() ) / self.ShellInsertDuration, 0, 1 )  shell_delta = shell_delta ^ 1.5   shell.pos = lerp_vector( shell_delta, shell.def_pos + vec_forward * -3.2, shell.def_pos )   shell.hide = false  shell_hand.hide = true  else  self.ShellInsertTime = 0  end  end    end   end  end   wept.Taper = 0.6  wept.Radius = wept.Radius * 0.3  wept.Primary.Projectile = "projectile_grenade_flaremast"  wept.Primary.ProjVelocity = 850   wept.ReloadDelay = 0.4  wept.ReloadStartDelay = 1.7    wept.ReloadSpeed = wept.ReloadSpeed * (0.8/0.6)     wept.Primary.Damage = wept.Primary.Damage * (135/86)   wept.ReplaceSounds = {  [")weapons/357/357_reload1.wav"] = { override = "weapons/fx/tink/shotgun_shell1.wav", pitch = 90 },  [")weapons/357/357_reload4.wav"] = { suppress = true },  ["weapons/357/357_reload3.wav"] = { suppress = true },  [")weapons/357/357_spin1.wav"] = { suppress = true }  }   function wept:GetReloadStartDelay()  local reloadspeed = self.ReloadSpeed * self:GetReloadSpeedMultiplier()  return self.ReloadStartDelay / reloadspeed  end   function wept:SendWeaponAnimation()  self:SendWeaponAnim(ACT_VM_PRIMARYATTACK)  local vm = self:GetOwner():GetViewModel()  vm:SetPlaybackRate(self.FireAnimSpeed)  end   local math_random = math.random  function wept:StartReloading()  local delay = self:GetReloadStartDelay()    self:SetDTFloat(3, CurTime() + delay)  self:SetDTBool(2, true)  self:SetNextPrimaryFire(CurTime() + math.max(self.Primary.Delay, delay))   self:GetOwner():DoReloadEvent()   if self.ReloadStartSequence then  local vm = self:GetOwner():GetViewModel()  vm:SendViewModelMatchingSequence( vm:LookupSequence( self.ReloadStartSequence ) )  self:ProcessReloadAnim()  self:SetNextPlugSound(CurTime() + delay * 0.85)  self:SetNextStateChange(CurTime() + delay * 0.6)  else  if self.ReloadStartActivity then  self:SendWeaponAnim(self.ReloadStartActivity)  self:ProcessReloadAnim()  self:SetNextPlugSound(CurTime() + delay * 0.85)  self:SetNextStateChange(CurTime() + delay * 0.6)  end  end   if CLIENT then  self.NextShellEjection = CurTime() + delay * 0.4  self.NextShellHandInsertion = CurTime() + delay * 0.75   if self.VElements and self.VElements["grip"] then  self.VElements["grip"].bone = "Python"  if math_random( 1000 ) == 1 then  self.VElements["grip"].bone = "Cylinder"  end  end   end   self:EmitSound(self.ReloadSound)  end   function wept:Reload()  BaseClassShotgun.Reload(self)   if self:GetIronsights() then  self:SetIronsights(false)  end  end   function wept:EmitFireSound()  self:EmitSound("weapons/grenade_launcher1.wav", 70, 190, 0.65, CHAN_AUTO)  self:EmitSound("weapons/shotgun/shotgun_fire6.wav", 75, math.random(212, 212), 0.5, CHAN_WEAPON)  end end) branch.CollectiveName = "Flaremast" branch.Killicon = "weapon_zs_flaremast"  SWEP.ReplaceSounds = {  ["weapons/m3/m3_pump.wav"] = { suppress = true }, }  function SWEP:EmitFireSound()  self:EmitSound("weapons/grenade_launcher1.wav", 70, math.random(95, 105)) end  function SWEP:SendWeaponAnimation()     local vm = self:GetOwner():GetViewModel()     vm:SendViewModelMatchingSequence( vm:LookupSequence( "shoot2" ) )     vm:SetPlaybackRate(self.FireAnimSpeed)      if CLIENT then         self.FireAnimationDuration = vm:SequenceDuration()/self.FireAnimSpeed         self.FireAnimationTime = CurTime() + self.FireAnimationDuration          self.ShouldEject = true     end  end  function SWEP:Reload()  BaseClassShotgun.Reload(self)   if self:GetIronsights() then  self:SetIronsights(false)  end end  function SWEP:Think()  return BaseClassShotgun.Think(self) end  function SWEP:StartReloading()  BaseClassShotgun.StartReloading(self) end  function SWEP:StopReloading()  BaseClassShotgun.StopReloading(self) end  function SWEP:DoReload()  BaseClassShotgun.DoReload(self) end  function SWEP:ProcessReloadAnim()  BaseClassShotgun.ProcessReloadAnim(self) end  function SWEP:GetReloadDelay()  return BaseClassShotgun.GetReloadDelay(self) end  function SWEP:ShouldDoReload()  return BaseClassShotgun.ShouldDoReload(self) end  function SWEP:IsReloading()  return BaseClassShotgun.IsReloading(self) end  function SWEP:CanReload()  return BaseClassShotgun.CanReload(self) end  function SWEP:CanPrimaryAttack()  return BaseClassShotgun.CanPrimaryAttack(self) end  function SWEP:StartReloading()     local delay = self:GetReloadDelay()     self:SetDTFloat(3, CurTime() + delay)     self:SetDTBool(2, true)     self:SetNextPrimaryFire(CurTime() + math.max(self.Primary.Delay, delay))      self:GetOwner():DoReloadEvent()      if self.ReloadStartSequence then         local vm = self:GetOwner():GetViewModel()         vm:SendViewModelMatchingSequence( vm:LookupSequence( self.ReloadStartSequence ) )         self:ProcessReloadAnim()         self:SetNextPlugSound(CurTime() + delay * 0.85)         self:SetNextStateChange(CurTime() + delay * 0.6)     else         if self.ReloadStartActivity then             self:SendWeaponAnim(self.ReloadStartActivity)             self:ProcessReloadAnim()             self:SetNextPlugSound(CurTime() + delay * 0.85)             self:SetNextStateChange(CurTime() + delay * 0.6)         end     end      if CLIENT then         if self.ShouldEject then             self:ForceShellEjection()         end     end      self:EmitSound(self.ReloadSound) end  function SWEP:StopReloading()  self:SetDTFloat(3, 0)  self:SetDTBool(2, false)  self:SetNextPrimaryFire(CurTime() + self.Primary.Delay * 0.45)  self:SetNextStateChange(CurTime())   if self:Clip1() > 0 then  self:EmitSound(self.ReloadFinishSound)  if self.ReloadFinishSequence then  local vm = self:GetOwner():GetViewModel()  vm:SendViewModelMatchingSequence( vm:LookupSequence( self.ReloadFinishSequence ) )  self:ProcessReloadAnim()  else  self:SendWeaponAnim(ACT_SHOTGUN_RELOAD_START)        self:GetOwner():GetViewModel():SetPlaybackRate( -1 )  end  end end  function SWEP:Think()  if self:GetIronsights() and not self:GetOwner():KeyDown(IN_ATTACK2) then  self:SetIronsights(false)  end   if self:ShouldDoReload() then  self:DoReload()  end   if self:GetNextPlugSound() ~= 0 and CurTime() > self:GetNextPlugSound() then  if self:Clip1() ~= 2 then  self:EmitSound( self.ReloadPlugSound, 75, math.random( 80, 85 ) )  end  self:SetNextPlugSound(0)  end   if self:GetNextStateChange() ~= 0 and CurTime() > self:GetNextStateChange() then  self:SetSawnoffState((self:GetSawnoffState() + 1) % 2)  self:SetNextStateChange(0)  end   self:NextThink(CurTime())  return true end  function SWEP:DoReload()  if not self:CanReload() then  self:StopReloading()  return  end   local delay = self:GetReloadDelay()  if self.ReloadSequence then  local vm = self:GetOwner():GetViewModel()  vm:SendViewModelMatchingSequence( vm:LookupSequence( self.ReloadSequence ) )  self:ProcessReloadAnim()  else  if self.ReloadActivity then  self:SendWeaponAnim(self.ReloadActivity)  self:ProcessReloadAnim()  end  end   if CLIENT then  self:DoShellInsertion( self.OverrideShellInsertDuration )  end   self:GetOwner():RemoveAmmo(1, self.Primary.Ammo, false)  self:SetClip1(self:Clip1() + 1)   self:SetDTBool(2, false)  self:SetDTFloat(3, CurTime() + delay)   self:SetNextPrimaryFire(CurTime() + math.max(self.Primary.Delay, delay)) end  function SWEP:CanPrimaryAttack()  if self:GetOwner():IsHolding() or self:GetOwner():GetBarricadeGhosting() then return false end   if self:Clip1() <= 0 then  self:EmitSound("weapons/shotgun/shotgun_empty.wav")  self:SetNextPrimaryFire(CurTime() + 0.25)   return false  end   return self:GetNextPrimaryFire() <= CurTime() end  function SWEP:GetNextPlugSound()  return self:GetDTFloat(10) end  function SWEP:SetNextPlugSound(nexttime)  self:SetDTFloat(10, nexttime) end  function SWEP:GetNextStateChange()  return self:GetDTFloat(11) end  function SWEP:SetNextStateChange(nexttime)  self:SetDTFloat(11, nexttime) end  function SWEP:GetSawnoffState()  return self:GetDTInt(10) end  function SWEP:SetSawnoffState(state)  self:SetDTInt(10, state) end