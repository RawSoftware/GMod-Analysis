AddCSLuaFile() local BaseClass = baseclass.Get("weapon_zs_base")  SWEP.PrintName = "'Stubber' Rifle" SWEP.Description = "Your basic bolt action sniper rifle, capable of providing good damage on headshots."  SWEP.Slot = 3 SWEP.SlotPos = 0  if CLIENT then  SWEP.ViewModelFlip = false   SWEP.HUD3DBone = "v_weapon.scout_Parent"  SWEP.HUD3DPos = Vector(-1, -2.75, -6)  SWEP.HUD3DAng = Angle(0, 0, 0)  SWEP.HUD3DScale = 0.015 end  SWEP.Base = "weapon_zs_base"  SWEP.HoldType = "ar2"  SWEP.ViewModel = "models/weapons/cstrike/c_snip_scout.mdl" SWEP.WorldModel = "models/weapons/w_snip_scout.mdl" SWEP.UseHands = true  SWEP.Primary.Sound = Sound(")weapons/scout/scout_fire-1.wav") SWEP.Primary.Damage = 55 SWEP.Primary.NumShots = 1 SWEP.Primary.Delay = 1.25 SWEP.ReloadDelay = SWEP.Primary.Delay  SWEP.Primary.ClipSize = 5 SWEP.Primary.Automatic = false SWEP.Primary.Ammo = "357" SWEP.Primary.DefaultClip = 25  SWEP.Primary.Gesture = ACT_HL2MP_GESTURE_RANGE_ATTACK_CROSSBOW SWEP.ReloadGesture = ACT_HL2MP_GESTURE_RELOAD_SHOTGUN  SWEP.ConeMax = 3.75 SWEP.ConeMin = 0  SWEP.IronSightsPos = Vector(5.015, -8, 2.52) SWEP.IronSightsAng = Vector(0, 0, 0)  SWEP.OverkillFactor = 0.5  SWEP.WalkSpeed = SPEED_SLOW  SWEP.HeadshotMulti = 2  SWEP.FireModes = 2 SWEP.FireModeNames = {"Full-Zoom", "Half-Zoom"} SWEP.FireModeNames3D = {"FULL", "HALF"}  GAMEMODE:AttachWeaponModifier(SWEP, WEAPON_MODIFIER_CLIP_SIZE, 1, 1) GAMEMODE:AttachWeaponModifier(SWEP, WEAPON_MODIFIER_FIRE_DELAY, -0.08, 1) GAMEMODE:AttachWeaponModifier(SWEP, WEAPON_MODIFIER_HEADSHOT_MULTI, 0.05)  local branch = GAMEMODE:AddNewRemantleBranch(SWEP, 1, "'Prodder' Rifle", "More headshot damage and zoom, reduced clip size and increased fire delay. Can pierce once on headshot.", function(wept)  wept.HeadshotMulti = wept.HeadshotMulti * 1.1  wept.Primary.ClipSize = wept.Primary.ClipSize - 2  wept.Primary.Delay = wept.Primary.Delay * 1.4  wept.FireAnimSpeed = 0.58      wept.Pens = 1     wept.PenHeadOnly = true     wept.PenTaper = 0.25   wept.IronsightsMultiplier = 0.15 end) branch.CollectiveName = "Prodder" GAMEMODE:AttachWeaponModifierToBranch(branch, WEAPON_MODIFIER_FIRE_DELAY, -0.1, 1) GAMEMODE:AttachWeaponModifierToBranch(branch, WEAPON_MODIFIER_CLIP_SIZE, 1, 1) GAMEMODE:AttachWeaponModifierToBranch(branch, WEAPON_MODIFIER_PIERCE_DAMAGE, 0.03, 1)  GAMEMODE:AddNewRemantleBranch(SWEP, 2, "'Two-Touch' Rifle", "Faster rifle with reduced damage and accuracy but increased fire rate and clip size. Every 3 headshots reloads 1 rifle round.", function(wept)     wept.Primary.Damage = wept.Primary.Damage * 0.8  wept.Primary.Delay = wept.Primary.Delay * 0.6     wept.ConeMin = 0.85     wept.Primary.ClipSize = wept.Primary.ClipSize + 2      function wept:SendWeaponAnimation()         self:SendWeaponAnim(ACT_VM_PRIMARYATTACK)         self:GetOwner():GetViewModel():SetPlaybackRate(self.FireAnimSpeed * 1)          timer.Simple(0.45, function()             if IsValid(self) and self:GetReloadFinish() == 0 then                 self:SendWeaponAnim(ACT_VM_IDLE)                 self:GetOwner():GetViewModel():SetPlaybackRate(self.FireAnimSpeed * 10.5)             end         end)     end      function wept.BulletCallback(attacker, tr, dmginfo)         local ent = tr.Entity         if SERVER then             local wep = attacker:GetActiveWeapon()             if ent:IsValidLivingZombie() then                 if wep.Headshots == 3 then                     wep.Headshots = 0                      local max1 = wep:GetPrimaryClipSize()                     local ammotype = wep:GetPrimaryAmmoType()                     local spare = attacker:GetAmmoCount(ammotype)                     local current = wep:Clip1()                     local needed = math.min(1, max1 - current)                      needed = math.min(spare, needed)                      wep:SetClip1(current + needed)                     if SERVER then                         attacker:RemoveAmmo(needed, ammotype)                     end                 elseif tr.HitGroup == HITGROUP_HEAD then                     wep.Headshots = (wep.Headshots or 0) + 1                 end             else                 wep.Headshots = 0             end         end     end      function wept:EmitFireSound()         self:EmitSound(self.Primary.Sound, 75, 135)     end   local mat = Material("phoenix_storms/future_vents")  wept.PreDrawViewModel = function(self, vm)  render.MaterialOverrideByIndex(1, mat)   BaseClass.PreDrawViewModel(self, vm)  end  wept.PostDrawViewModel = function(self, vm)  render.MaterialOverrideByIndex(1)   BaseClass.PostDrawViewModel(self, vm)  end end).CollectiveName = "Two-Touch"  function SWEP:IsScoped()  return self:GetIronsights() and self.fIronTime and self.fIronTime + 0.25 <= CurTime() end  function SWEP:EmitFireSound()  self:EmitSound(self.Primary.Sound, 85, 100) end  function SWEP:FireModeChanged(fm)     fm = tonumber(fm)     self.IronsightsMultiplier = fm == 1 and 0.55 or 0.25 end  function SWEP:PlayFireModeSwitchSound(fm)     fm = tonumber(fm)     if CLIENT then         if fm == 1 then             surface.PlaySound("weapons/zoom/zoom_soundtest.wav")         else             surface.PlaySound("weapons/zoom/zoom_soundtest2.wav")         end     end end  if CLIENT then  SWEP.IronsightsMultiplier = 0.25   function SWEP:GetViewModelPosition(pos, ang)  if GAMEMODE.DisableScopes then return end   if self:IsScoped() then  return pos + ang:Up() * 256, ang  end   return BaseClass.GetViewModelPosition(self, pos, ang)  end   function SWEP:DrawHUDBackground()  if GAMEMODE.DisableScopes then return end   if self:IsScoped() then  self:DrawRegularScope()  end  end end 