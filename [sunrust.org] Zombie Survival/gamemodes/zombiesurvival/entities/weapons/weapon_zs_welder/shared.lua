SWEP.PrintName = "'Shaper' Repair Welder" SWEP.Description = "Uses chemical ammo to repair very fast. Doubles as very short range weapon."  SWEP.Base = "weapon_zs_base" local BaseClass = baseclass.Get("weapon_zs_base")  SWEP.HoldType = "pistol"  SWEP.ViewModel = "models/weapons/c_pistol.mdl" SWEP.WorldModel = "models/weapons/w_pistol.mdl"  SWEP.UseHands = true SWEP.ShowViewModel = false SWEP.ShowWorldModel = false  SWEP.Primary.Delay = 0.12 SWEP.Primary.MaxDistance = 76 SWEP.Primary.Damage = 19.5 SWEP.Primary.HullSize = 3  SWEP.HeadshotMulti = 1  SWEP.Primary.ClipSize = 30 SWEP.Primary.Automatic = true SWEP.Primary.Ammo = "chemical" GAMEMODE:SetupDefaultClip(SWEP.Primary)  SWEP.ConeMax = 0 SWEP.ConeMin = 0  SWEP.Tier = 4 SWEP.MaxStock = 3  SWEP.WalkSpeed = SPEED_NORMAL SWEP.FireAnimSpeed = 0.03  SWEP.FireSoundPitch = 33  SWEP.TracerName = "tracer_welder"  SWEP.Repair = 0.5  GAMEMODE:AttachWeaponModifier(SWEP, WEAPON_MODIFIER_MAX_DISTANCE, 3, 1) GAMEMODE:AttachWeaponModifier(SWEP, WEAPON_MODIFIER_REPAIR, 0.06, 1)  function SWEP:Initialize()  self.FiringSound = CreateSound(self, "^thrusters/rocket00.wav")  self.FiringSound:SetSoundLevel(65)   self.BaseClass.Initialize(self) end  function SWEP:PrimaryAttack()  if not self:CanPrimaryAttack() then return end  self:SetNextPrimaryFire(CurTime() + self:GetFireDelay())      local altuse = self:GetAltUsage()  if altuse then  self:TakeCombinedPrimaryAmmo(1)  end  self:SetAltUsage(not altuse)   self:ShootBullets(self.Primary.Damage, self.Primary.NumShots, self:GetCone())  self.IdleAnimation = CurTime() + self:SequenceDuration()   if self:GetGunState() ~= 1 and IsFirstTimePredicted() then  self:EmitStartFiringSound()  self:SetGunState(1)  end end  function SWEP:Think()  BaseClass.Think(self)   if self:GetGunState() == 1 then  self.FiringSound:PlayEx(1, self.FireSoundPitch + CurTime() % 1)  if CurTime() >= self:GetNextPrimaryFire() + 0.1 then  self:SetGunState(0)  self:SetNextPrimaryFire(CurTime() + 1)  self:EmitSound("ambient/energy/weld2.wav", 75, 155)  self.FiringSound:Stop()  end  end end  function SWEP:CanPrimaryAttack()  if self:GetPrimaryAmmoCount() <= 0 then  return false  end   if self:GetOwner():IsHolding() or self:GetOwner():GetBarricadeGhosting() or self:GetReloadFinish() > 0 then return false end   return self:GetNextPrimaryFire() <= CurTime() end  function SWEP.BulletCallback(attacker, tr, dmginfo)  if tr.HitWorld then  util.Decal("FadingScorch", tr.HitPos + tr.HitNormal, tr.HitPos - tr.HitNormal)  end   if SERVER and tr.Entity then  if tr.Entity:IsNailed() then  dmginfo:GetInflictor():RepairProp(tr.Entity, tr)  elseif tr.Entity:IsValidLivingZombie() and math.random(6) == 1 then  tr.Entity:AddBurnDamage(10, attacker)  end  end   return {impact = false} end  function SWEP:EmitStartFiringSound()  self:EmitSound("ambient/energy/weld1.wav", 75, 230) end  function SWEP:SetGunState(state)  self:SetDTInt(1, state) end  function SWEP:GetGunState(state)  return self:GetDTInt(1) end  function SWEP:SetAltUsage(usage)  self:SetDTBool(1, usage) end  function SWEP:GetAltUsage()  return self:GetDTBool(1) end