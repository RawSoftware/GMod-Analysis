AddCSLuaFile() local BaseClass = baseclass.Get("weapon_zs_base")  SWEP.PrintName = "'Adonis' AR2-M2" SWEP.Description = "Deals massive damage and slows targets. Fires a powerful piercing shot with alternative fire mode."  SWEP.Slot = 2 SWEP.SlotPos = 0  if CLIENT then  SWEP.ViewModelFlip = false  SWEP.ViewModelFOV = 60   SWEP.HUD3DBone = "Vent"  SWEP.HUD3DPos = Vector(1.2, 0, 0)  SWEP.HUD3DScale = 0.018 end  SWEP.Base = "weapon_zs_base"  SWEP.HoldType = "ar2"  SWEP.ViewModel = "models/weapons/c_irifle.mdl" SWEP.WorldModel = "models/weapons/w_IRifle.mdl" SWEP.UseHands = true  SWEP.CSMuzzleFlashes = false  SWEP.ReloadSound = Sound("weapons/smg1/smg1_reload.wav") SWEP.Primary.Damage = 32 SWEP.Primary.NumShots = 1 SWEP.Primary.Delay = 0.2  SWEP.Primary.ClipSize = 20 SWEP.Primary.Automatic = true SWEP.Primary.Ammo = "pulse" GAMEMODE:SetupDefaultClip(SWEP.Primary)  SWEP.RequiredClipAlt = 10  SWEP.ConeMax = 3 SWEP.ConeMin = 1  SWEP.WalkSpeed = SPEED_SLOW  SWEP.IronSightsPos = Vector(-3, 1, 1)  SWEP.Tier = 5  SWEP.PointsMultiplier = GAMEMODE.PulsePointsMultiplierLow  SWEP.TracerName = "AR2Tracer" SWEP.TracerNameAlt = "tracer_adonisalt"  SWEP.FireAnimSpeed = 0.4 SWEP.LegDamage = 5.5  SWEP.ResistanceAmmoAs = "ar2"  SWEP.ChargeTime = 1.5  SWEP.PenTaper = 0.88  SWEP.FireModes = 2 SWEP.FireModeNames = {"Iron Sights", "Pulse Bore"} SWEP.FireModeNames3D = {"AIM", "BORE"}  GAMEMODE:AttachWeaponModifier(SWEP, WEAPON_MODIFIER_FIRE_DELAY, -0.014, 1) GAMEMODE:AddNewRemantleBranch(SWEP, 1, "'Cyniras' AR2-M1", "Faster fire rate, larger clip size, less damage and fires a piercing pulse bomb with alternative fire mode.", function(wept)   wept.FireModeNames = {"Iron Sights", "Pulse Bomb"}  wept.FireModeNames3D = {"AIM", "BOMB"}   wept.Primary.Damage = wept.Primary.Damage * (23.5/32)  wept.Primary.Delay = wept.Primary.Delay * 0.5  wept.Primary.ClipSize = wept.Primary.ClipSize * 1.5   wept.RequiredClipAlt = 30   wept.Secondary.ProjVelocity = 1200  wept.Secondary.Projectile = "projectile_ar2"      wept.TreatDamageTypeForRounds = DMG_DISSOLVE   function wept:EmitFireSound()  self:EmitSound("weapons/ar2/fire1.wav", 75, math.random(85, 95))  end   function wept:EmitAltFireSound()  if IsFirstTimePredicted() then self:EmitSound("weapons/irifle/irifle_fire2.wav", 75, nil, nil, CHAN_AUTO) end  end   function wept:ShootAlt(dmg, numshots, cone)  local owner = self:GetOwner()  self:SendWeaponAnim(ACT_VM_SECONDARYATTACK)  owner:DoAttackEvent()   local ssfw, ssup  if self.SameSpread then  ssfw, ssup = math.Rand(0, 360), math.Rand(-cone, cone)  end   if SERVER then  local ent = ents.Create(self.Secondary.Projectile)  if ent:IsValid() then  ent:SetPos(owner:GetShootPos())  ent:SetAngles(owner:EyeAngles())  ent:SetOwner(owner)  ent.ProjDamage = dmg * (owner.ProjectileDamageMul or 1)  ent.ProjSource = self  ent.Team = owner:Team()   ent:Spawn()   local phys = ent:GetPhysicsObject()  if phys:IsValid() then  phys:Wake()   local angle = owner:GetAimVector():Angle()  angle:RotateAroundAxis(angle:Forward(), ssfw or math.Rand(0, 360))  angle:RotateAroundAxis(angle:Up(), ssup or math.Rand(-cone, cone))   ent.PreVel = angle:Forward() * self.Secondary.ProjVelocity * (owner.ProjectileSpeedMul or 1)  phys:SetVelocityInstantaneous(ent.PreVel)  end  end  end  end  end).CollectiveName = "Cinyras"  function SWEP:Holster()  BaseClass.Holster(self)   return self:GetChargeEnd() == 0 end  function SWEP:Think()  BaseClass.Think(self)   if self:GetChargeEnd() > 0 and self:GetChargeEnd() <= CurTime() then  self:SetChargeEnd(0)  self:SetNextPrimaryFire(CurTime() + self:GetFireDelay(0.5))  self:SetNextSecondaryFire(CurTime() + self:GetFireDelay(0.25))   self:EmitAltFireSound()  self:ShootAlt(self.Primary.Damage, self.Primary.NumShots, self:GetCone())  self.IdleAnimation = CurTime() + self:SequenceDuration()  end end  function SWEP:CanReload()  if self:GetChargeEnd() > 0 then return false end   return BaseClass.CanReload(self) end  function SWEP:EmitFireSound()  self:EmitSound("weapons/airboat/airboat_gun_energy"..math.random(2)..".wav", 75, math.random(95, 105))  self:EmitSound("weapons/ar2/fire1.wav", 75, math.random(75, 85), 0.66, CHAN_AUTO) end  function SWEP:EmitAltFireSound()  if IsFirstTimePredicted() then self:EmitSound("weapons/flaregun/fire.wav", 75, math.random(85, 95), nil, CHAN_AUTO) end end  function SWEP.BulletCallback(attacker, tr, dmginfo)  local ent = tr.Entity  if ent:IsValidZombie() then  local activ = attacker:GetActiveWeapon()  ent:AddLegDamageExt(activ.LegDamage, attacker, activ, SLOWTYPE_PULSE)  end   if IsFirstTimePredicted() then  util.CreatePulseImpactEffect(tr.HitPos, tr.HitNormal)  end end  function SWEP:PlayFireModeSwitchSound(fm)  fm = tonumber(fm)  if CLIENT then  if fm == 1 then  surface.PlaySound("buttons/button17.wav")  else  surface.PlaySound("buttons/button18.wav")  end  end end  function SWEP:ShootAlt(dmg, numbul, cone)  local owner = self:GetOwner()  self:SendWeaponAnim(ACT_VM_SECONDARYATTACK)  owner:DoAttackEvent()   if self.PointsMultiplier then  POINTSMULTIPLIER = self.PointsMultiplier  end   local shoot_pos = self.CustomShootPos or owner:GetShootPos()  local aim_vec   = self.CustomAimVec or owner:GetAimVector()   self.Pens = 5  dmg = dmg * 2.7  DO_BULLET_LAG_COMP = true  owner:FireBulletsLua(shoot_pos, aim_vec, cone, numbul, dmg, nil, self.Primary.KnockbackScale, self.TracerNameAlt, self.BulletCallback, self.Primary.HullSize, nil, self.Primary.MaxDistance, nil, self)  DO_BULLET_LAG_COMP = nil  self.Pens = 0  dmg = dmg / 2.7   if self.PointsMultiplier then  POINTSMULTIPLIER = nil  end end  function SWEP:CanPrimaryAttack()  if self:GetChargeEnd() > 0 then return false end   return BaseClass.CanPrimaryAttack(self) end  function SWEP:CanSecondaryAttack()  if self:GetOwner():IsHolding() or self:GetOwner():GetBarricadeGhosting() or self:GetReloadFinish() > 0 or self:GetChargeEnd() > 0 then return false end   if self:Clip1() < self.RequiredClipAlt then  self:EmitSound(self.DryFireSound)  self:SetNextPrimaryFire(CurTime() + 0.25)   return false  end   return self:GetNextSecondaryFire() <= CurTime() end  function SWEP:SecondaryAttack()  local fm = self:GetFireMode()  if fm == 1 then  if not self:CanSecondaryAttack() or self:GetChargeEnd() > 0 then return end   local quality = self.QualityTier or 0  local chargemulti = (self.ChargeTime - 0.105 * quality) / self.ChargeTime  self:SetChargeEnd(CurTime() + (chargemulti * self.ChargeTime))  self:EmitSound("weapons/cguard/charging.wav", 70, 80 / chargemulti)  self:TakePrimaryAmmo(self.RequiredClipAlt)  self:SendWeaponAnim(ACT_VM_FIDGET)  else  if self:GetNextSecondaryFire() <= CurTime() and not self:GetOwner():IsHolding() and self:GetReloadFinish() == 0 then  self:SetIronsights(true)  end  end end  function SWEP:FireModeChanged(fm) end  function SWEP:SetChargeEnd(t)  self:SetDTFloat(11, t) end  function SWEP:GetChargeEnd()  return self:GetDTFloat(11) end 