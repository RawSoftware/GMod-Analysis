AddCSLuaFile()  SWEP.Base = "weapon_zs_baseshotgun" local BaseClass = baseclass.Get("weapon_zs_baseshotgun")  SWEP.PrintName = "'Templar' Medical Shotgun" SWEP.Description = "An advanced shotgun, that shreds medical ammo to deal damage.\nSecondary attack fires a small area of effect healing bomb, that can be attached to humans."  if CLIENT then     SWEP.ViewModelFlip = false      SWEP.HUD3DPos = Vector(1.169, -0.783, -1.04)     SWEP.HUD3DAng = Angle(90, 0, 0)     SWEP.HUD3DScale = 0.02     SWEP.HUD3DBone = "Weapon_Controller"      SWEP.ShowViewModel = false     SWEP.ShowWorldModel = false      SWEP.ViewModelFOV = 60      SWEP.ViewModelBoneMods = {         ["ValveBiped.Bip01_L_Finger02"] = { scale = Vector(1, 1, 1), pos = Vector(0, 0, 0), angle = Angle(0, 20.652, -5.882) },         ["Duplica(3)"] = { scale = Vector(1, 1, 1), pos = Vector(0, 0, 0.25), angle = Angle(0, 0, 0) },         ["Weapon_Controller"] = { scale = Vector(1, 1, 1), pos = Vector(0, 0, 0), angle = Angle(0, 0, 0) },         ["ValveBiped.Bip01_L_UpperArm"] = { scale = Vector(1, 1, 1), pos = Vector(0.898, 0, 0), angle = Angle(0, 0, 0) },         ["ValveBiped.Bip01_L_Hand"] = { scale = Vector(1, 1, 1), pos = Vector(0, 0, 0), angle = Angle(-5.084, -13.839, -24.163) },         ["ValveBiped.Bip01_L_Clavicle"] = { scale = Vector(1, 1, 1), pos = Vector(1.016, 1.302, -0.588), angle = Angle(0, 0, 0) },         ["ValveBiped.Bip01_L_Finger01"] = { scale = Vector(1, 1, 1), pos = Vector(0, 0, 0), angle = Angle(0, 2.138, 0) },         ["ValveBiped.Bip01_L_Finger0"] = { scale = Vector(1, 1, 1), pos = Vector(0, 0, 0), angle = Angle(-8.162, -15.792, 9.154) }     }      SWEP.VElements = {         ["thing2+"] = { type = "Model", model = "models/items/combine_rifle_cartridge01.mdl", bone = "Weapon_Controller", rel = "base", pos = Vector(0.131, 2.809, 0.078), angle = Angle(0, -154.07, -90), size = Vector(0.46, 0.532, 0.532), color = Color(255, 255, 255, 255), surpresslightning = false, material = "", skin = 0, bodygroup = {} },         ["med_glow"] = { type = "Sprite", sprite = "effects/blueflare1", bone = "Weapon_Controller", rel = "shell", pos = Vector(0.805, -0.046, 4.125), size = { x = 3.621, y = 3.621 }, color = Color(60, 200, 60, 255), nocull = true, additive = true, vertexalpha = true, vertexcolor = true, ignorez = false},         ["base"] = { type = "Model", model = "models/props_junk/PopCan01a.mdl", bone = "Weapon_Controller", rel = "", pos = Vector(0, 0, 0), angle = Angle(0, 0, 0), size = Vector(0.5, 0.5, 0.5), color = Color(255, 255, 255, 0), surpresslightning = false, material = "", skin = 0, bodygroup = {} },         ["body"] = { type = "Model", model = "models/props_lab/labturret.mdl", bone = "Weapon_Controller", rel = "base", pos = Vector(8.51, 4.039, -0.051), angle = Angle(90, -90, 0), size = Vector(0.19, 0.404, 0.361), color = Color(255, 255, 255, 255), surpresslightning = false, material = "models/combine_helicopter/helicopter_bomb_off01", skin = 0, bodygroup = {} },         ["shell"] = { type = "Model", model = "models/healthvial.mdl", bone = "Duplica(3)", rel = "", pos = Vector(0.081, -1.698, 0.321), angle = Angle(42.937, 0, 90), size = Vector(0.517, 0.517, 0.517), color = Color(255, 255, 255, 255), surpresslightning = false, material = "", skin = 0, bodygroup = {} },         ["stock"] = { type = "Model", model = "models/combine_dropship_container.mdl", bone = "Weapon_Controller", rel = "base", pos = Vector(-0.324, -1.002, 0.046), angle = Angle(0, 40.026, 90), size = Vector(0.01, 0.01, 0.01), color = Color(255, 255, 255, 255), surpresslightning = false, material = "", skin = 0, bodygroup = {} }     }      SWEP.WElements = {         ["thing2+"] = { type = "Model", model = "models/items/combine_rifle_cartridge01.mdl", bone = "ValveBiped.Bip01_R_Hand", rel = "base", pos = Vector(-0.963, 2.729, 0.078), angle = Angle(0, -154.07, -90), size = Vector(0.46, 0.532, 0.532), color = Color(255, 255, 255, 255), surpresslightning = false, material = "", skin = 0, bodygroup = {} },         ["shell"] = { type = "Model", model = "models/healthvial.mdl", bone = "ValveBiped.Bip01_R_Hand", rel = "base", pos = Vector(7.662, -0.238, -0.077), angle = Angle(-116.247, -90, -90), size = Vector(0.5, 0.5, 0.5), color = Color(255, 255, 255, 255), surpresslightning = false, material = "", skin = 0, bodygroup = {} },         ["stock"] = { type = "Model", model = "models/combine_dropship_container.mdl", bone = "ValveBiped.Bip01_R_Hand", rel = "base", pos = Vector(-0.928, -0.673, 0.046), angle = Angle(0, 40.026, 90), size = Vector(0.012, 0.012, 0.012), color = Color(255, 255, 255, 255), surpresslightning = false, material = "", skin = 0, bodygroup = {} },         ["body"] = { type = "Model", model = "models/props_lab/labturret.mdl", bone = "ValveBiped.Bip01_R_Hand", rel = "base", pos = Vector(8.51, 4.039, -0.051), angle = Angle(90, -90, 0), size = Vector(0.19, 0.404, 0.361), color = Color(255, 255, 255, 255), surpresslightning = false, material = "models/combine_helicopter/helicopter_bomb_off01", skin = 0, bodygroup = {} },         ["med_glow"] = { type = "Sprite", sprite = "effects/blueflare1", bone = "ValveBiped.Bip01_R_Hand", rel = "shell", pos = Vector(0.388, -0.112, 2), size = { x = 7.088, y = 7.088 }, color = Color(60, 255, 60, 255), nocull = true, additive = true, vertexalpha = true, vertexcolor = true, ignorez = false},         ["base"] = { type = "Model", model = "models/props_junk/PopCan01a.mdl", bone = "ValveBiped.Bip01_R_Hand", rel = "", pos = Vector(4.912, 1.555, -4.011), angle = Angle(-9.49, 3.017, -90), size = Vector(0.5, 0.5, 0.5), color = Color(255, 255, 255, 0), surpresslightning = false, material = "", skin = 0, bodygroup = {} }     }  end  SWEP.HoldType = "shotgun"  SWEP.ViewModel = "models/weapons/c_blaster/c_blaster.mdl" SWEP.WorldModel = "models/weapons/w_supershorty.mdl" SWEP.UseHands = true  SWEP.ReloadDelay = 0.35  SWEP.Primary.Sound = Sound("weapons/shotgun/shotgun_dbl_fire7.wav")  SWEP.Primary.Damage = 10 SWEP.Primary.NumShots = 8 SWEP.Primary.Delay = 0.8  SWEP.Primary.ClipSize = 16   SWEP.Primary.Automatic = false SWEP.Primary.Ammo = "Battery" GAMEMODE:SetupDefaultClip(SWEP.Primary)  SWEP.ConeMax = 3.75 SWEP.ConeMin = 3.25  SWEP.ConeMaxAlt = 2 SWEP.ConeMinAlt = 1  SWEP.Primary.Projectile = "projectile_medicshotgun" SWEP.Primary.ProjVelocity = 1500  SWEP.WalkSpeed = SPEED_SLOW  SWEP.ReloadSound = Sound( "weapons/xm1014/xm1014_insertshell.wav")  SWEP.PumpActivity = ACT_SHOTGUN_PUMP  SWEP.RequiredClip = 2 SWEP.RequiredClipReload = SWEP.RequiredClip SWEP.RequiredClipAlt = 8  SWEP.Heal = 10.5  SWEP.Tier = 3  SWEP.AmmoTrinketOverride = 2  SWEP.FireModes = 2 SWEP.FireModeNames = {"Iron Sights", "Healing Darts"} SWEP.FireModeNames3D = {"AIM", "HEAL"}  GAMEMODE:AttachWeaponModifier(SWEP, WEAPON_MODIFIER_CLIP_SIZE, 2) GAMEMODE:AttachWeaponModifier(SWEP, WEAPON_MODIFIER_FIRE_DELAY, -0.06) GAMEMODE:AttachWeaponModifier(SWEP, WEAPON_MODIFIER_HEALING, 1.1, 1) GAMEMODE:AddNewRemantleBranch(SWEP, 1, "'Paladin' Medical Shotgun", "Double burst fire version. Area of effect healing is replaced with a random buff effect.", function(wept)     wept.Primary.Delay = wept.Primary.Delay * 2     wept.Primary.Damage = wept.Primary.Damage * 1.1      wept.FireModeNames = {"Iron Sights", "Buff Darts"}     wept.FireModeNames3D = {"AIM", "BUFF"}      if CLIENT then          wept.PumpPos = Vector(-6.204, -12.094, -12.525)         wept.PumpAng = Vector(16.51, 58.067, -43)          wept.VElements = {             ["thing2+"] = { type = "Model", model = "models/items/combine_rifle_cartridge01.mdl", bone = "Weapon_Controller", rel = "base", pos = Vector(0.131, 2.809, 0.078), angle = Angle(0, -154.07, -90), size = Vector(0.46, 0.532, 0.532), color = Color(255, 255, 255, 255), surpresslightning = false, material = "models/items/combinerifle_ammo", skin = 0, bodygroup = {} },             ["stock"] = { type = "Model", model = "models/combine_dropship_container.mdl", bone = "Weapon_Controller", rel = "base", pos = Vector(-0.964, 0.363, 0.052), angle = Angle(0, -132.549, 91.251), size = Vector(0.009, 0.009, 0.009), color = Color(255, 255, 255, 255), surpresslightning = false, material = "models/items/combinerifle_ammo", skin = 0, bodygroup = {} },             ["barrel+"] = { type = "Model", model = "models/props_canal/mattpipe.mdl", bone = "Weapon_Controller", rel = "base", pos = Vector(14.371, -0.62, 0.174), angle = Angle(180, 90, 90), size = Vector(0.6, 0.6, 0.37), color = Color(255, 255, 255, 255), surpresslightning = false, material = "models/items/combinerifle_ammo", skin = 0, bodygroup = {} },             ["med_glow"] = { type = "Sprite", sprite = "effects/blueflare1", bone = "Weapon_Controller", rel = "shell", pos = Vector(0.433, 0.481, 0.437), size = { x = 3.621, y = 3.621 }, color = Color(255, 216, 60, 255), nocull = true, additive = true, vertexalpha = true, vertexcolor = true, ignorez = false},             ["barrel"] = { type = "Model", model = "models/props_canal/mattpipe.mdl", bone = "Weapon_Controller", rel = "base", pos = Vector(14.371, 1.07, 0.174), angle = Angle(0, 90, 90), size = Vector(0.6, 0.6, 0.37), color = Color(255, 255, 255, 255), surpresslightning = false, material = "models/items/combinerifle_ammo", skin = 0, bodygroup = {} },             ["base"] = { type = "Model", model = "models/props_junk/PopCan01a.mdl", bone = "Weapon_Controller", rel = "", pos = Vector(0, 0, 0), angle = Angle(0, 0, 0), size = Vector(0.5, 0.5, 0.5), color = Color(255, 255, 255, 0), surpresslightning = false, material = "", skin = 0, bodygroup = {} },             ["body"] = { type = "Model", model = "models/props_lab/labturret.mdl", bone = "Weapon_Controller", rel = "base", pos = Vector(8.51, 4.039, -0.051), angle = Angle(90, -90, 0), size = Vector(0.19, 0.404, 0.361), color = Color(255, 255, 255, 255), surpresslightning = false, material = "models/items/combinerifle_ammo", skin = 0, bodygroup = {} },             ["shell"] = { type = "Model", model = "models/props_lab/labpart.mdl", bone = "Duplica(3)", rel = "", pos = Vector(0.002, 0.31, 0.476), angle = Angle(5.337, 0, 0), size = Vector(0.294, 0.294, 0.294), color = Color(255, 255, 255, 255), surpresslightning = false, material = "", skin = 0, bodygroup = {} }         }          wept.WElements = {             ["thing2+"] = { type = "Model", model = "models/items/combine_rifle_cartridge01.mdl", bone = "ValveBiped.Bip01_R_Hand", rel = "base", pos = Vector(-0.976, 2.809, 0.078), angle = Angle(0, -154.07, -90), size = Vector(0.46, 0.532, 0.532), color = Color(255, 255, 255, 255), surpresslightning = false, material = "models/items/combinerifle_ammo", skin = 0, bodygroup = {} },             ["stock"] = { type = "Model", model = "models/combine_dropship_container.mdl", bone = "ValveBiped.Bip01_R_Hand", rel = "base", pos = Vector(-1.528, 0.15, 0.052), angle = Angle(0, -143.982, 90.184), size = Vector(0.009, 0.009, 0.009), color = Color(255, 255, 255, 255), surpresslightning = false, material = "models/items/combinerifle_ammo", skin = 0, bodygroup = {} },             ["barrel+"] = { type = "Model", model = "models/props_canal/mattpipe.mdl", bone = "ValveBiped.Bip01_R_Hand", rel = "base", pos = Vector(14.371, -0.62, 0.094), angle = Angle(180, 90, 90), size = Vector(0.6, 0.6, 0.37), color = Color(255, 255, 255, 255), surpresslightning = false, material = "models/items/combinerifle_ammo", skin = 0, bodygroup = {} },             ["med_glow"] = { type = "Sprite", sprite = "effects/blueflare1", bone = "ValveBiped.Bip01_R_Hand", rel = "shell", pos = Vector(0.43, -0.242, -0.35), size = { x = 5.107, y = 5.107 }, color = Color(255, 216, 60, 255), nocull = true, additive = true, vertexalpha = true, vertexcolor = true, ignorez = false},             ["barrel"] = { type = "Model", model = "models/props_canal/mattpipe.mdl", bone = "ValveBiped.Bip01_R_Hand", rel = "base", pos = Vector(14.371, 1.07, 0.174), angle = Angle(0, 90, 90), size = Vector(0.6, 0.6, 0.37), color = Color(255, 255, 255, 255), surpresslightning = false, material = "models/items/combinerifle_ammo", skin = 0, bodygroup = {} },             ["base"] = { type = "Model", model = "models/props_junk/PopCan01a.mdl", bone = "ValveBiped.Bip01_R_Hand", rel = "", pos = Vector(4.912, 1.555, -4.011), angle = Angle(-9.49, 3.017, -90), size = Vector(0.5, 0.5, 0.5), color = Color(255, 255, 255, 0), surpresslightning = false, material = "", skin = 0, bodygroup = {} },             ["body"] = { type = "Model", model = "models/props_lab/labturret.mdl", bone = "ValveBiped.Bip01_R_Hand", rel = "base", pos = Vector(8.51, 4.039, -0.051), angle = Angle(90, -90, 0), size = Vector(0.19, 0.404, 0.361), color = Color(255, 255, 255, 255), surpresslightning = false, material = "models/items/combinerifle_ammo", skin = 0, bodygroup = {} },             ["shell"] = { type = "Model", model = "models/props_lab/labpart.mdl", bone = "ValveBiped.Bip01_R_Hand", rel = "base", pos = Vector(9.621, -0.449, -0.142), angle = Angle(0, 90, 0), size = Vector(0.294, 0.294, 0.294), color = Color(255, 255, 255, 255), surpresslightning = false, material = "", skin = 0, bodygroup = {} }         }     end      wept.Primary.Sound = Sound("weapons/shotgun/shotgun_fire6.wav")     wept.Primary.BurstShots = 2      wept.ReloadSound = Sound( "weapons/m4a1/m4a1_silencer_on.wav")     wept.ReloadSoundStartPitch = 70      wept.UseBuffProjectiles = true      wept.EmitFireSound = function(self)         self:EmitSound(self.Primary.Sound, 75, 95)     end      wept.PrimaryAttack = function(self)         if not self:CanPrimaryAttack() then return end          self:SetNextPrimaryFire(CurTime() + self:GetFireDelay())         self:SetNextSecondaryFire(CurTime() + self:GetFireDelay())         self:EmitFireSound()                              self:SetNextShot(CurTime())         self:SetShotsLeft(self.Primary.BurstShots)          self.IdleAnimation = CurTime() + self:SequenceDuration()     end      function wept:Holster()         if self:GetShotsLeft() > 0 then             return false         end          return BaseClass.Holster(self)     end      function wept:CanReload()         if self:GetShotsLeft() > 0 then             return false         end          return BaseClass.CanReload(self)     end      wept.Think = function(self)         if self:ShouldDoReload() then             self:DoReload()         end          if self.ExtraPump and IsFirstTimePredicted() then             self.ExtraPump = nil              timer.Simple(0.2, function()                 if IsValid(self) and not self.PumpAnimTime or self.PumpAnimTime < CurTime() then                     self:SendWeaponAnim(ACT_SHOTGUN_PUMP)                     self:GetOwner():GetViewModel():SetPlaybackRate(0.3)                      self.PumpAnimTime = CurTime() + self:SequenceDuration()                     self.PumpAnimDuration = self:SequenceDuration()                      if CLIENT and self:GetOwner() == MySelf then                         self:EmitSound("weapons/shotgun/shotgun_cock.wav", 75, 70, 0.4, CHAN_AUTO)                     end                 end             end)         end          if self:GetIronsights() and not self:GetOwner():KeyDown(IN_ATTACK2) then             self:SetIronsights(false)         end          local shotsleft = self:GetShotsLeft()         if shotsleft > 0 and CurTime() >= self:GetNextShot() then             self:SetShotsLeft(shotsleft - 1)             self:SetNextShot(CurTime() + self:GetFireDelay(6))              if self:GetShotsLeft() == 0 and IsFirstTimePredicted() then                 self.ExtraPump = true             end                            if self:Clip1() > 0 and not self:IsReloading() and self:Clip1() >= self.RequiredClip then                 self:EmitFireSound()                 self:TakeAmmo()                 self:ShootBullets(self.Primary.Damage, self.Primary.NumShots, self:GetCone())                  self.IdleAnimation = CurTime() + self:SequenceDuration()             else                 self:SetShotsLeft(0)             end         end          self:NextThink(CurTime())         return true     end      wept.SetNextShot = function(self, nextshot)         self:SetDTFloat(5, nextshot)     end      wept.GetNextShot = function(self)         return self:GetDTFloat(5)     end      wept.SetShotsLeft = function(self, shotsleft)         self:SetDTInt(1, shotsleft)     end      wept.GetShotsLeft = function(self)         return self:GetDTInt(1)     end end).CollectiveName = "Paladin"  function SWEP:Deploy()     BaseClass.Deploy(self)      if CLIENT then         self.DeployAnimTime = CurTime() + self:SequenceDuration() * 0.75         self.DeployAnimDuration = self:SequenceDuration() * 0.75         self.DeployAnimVariant = math.random(2)     end      return true end  function SWEP:EmitFireSound()     self:EmitSound(self.Primary.Sound, 75, 125) end  function SWEP:StopReloading()     self:SetDTFloat(3, 0)     self:SetDTBool(2, false)     self:SetNextPrimaryFire(CurTime() + self.Primary.Delay * 0.35)            if self:Clip1() > 0 then         if self.PumpSound then             self:EmitSound(self.PumpSound, 75, self.PumpSoundPitch)         end         if self.PumpActivity then             self:SendWeaponAnim(self.PumpActivity)             self:ProcessReloadAnim()         end     else         self:SendWeaponAnim( self.IdleActivity )     end end  function SWEP:TakeAmmoAlt()     self:TakePrimaryAmmo(self.RequiredClipAlt) end  function SWEP:CanSecondaryAttack()     if self:GetOwner():IsHolding() or self:GetOwner():GetBarricadeGhosting() then return false end      if self:Clip1() < self.RequiredClipAlt then         self:EmitSound("weapons/shotgun/shotgun_empty.wav")         self:SetNextPrimaryFire(CurTime() + 0.25)          return false     end      if self:IsReloading() then         self:StopReloading()         return false     end      return self:GetNextSecondaryFire() <= CurTime() end  function SWEP:ShouldDisplayMedicalAura()     return self:GetFireMode() == 1 end  function SWEP:SecondaryAttack()  local fm = self:GetFireMode()  if fm == 1 then         if not self:CanSecondaryAttack() then return end          self:SetNextPrimaryFire(CurTime() + self:GetFireDelay())         self:SetNextSecondaryFire(CurTime() + self:GetFireDelay())          self:EmitSound("weapons/ar2/ar2_altfire.wav", 65, 130, 0.4, CHAN_AUTO)         self:TakeAmmoAlt()         self:ShootAlt( 0, 1, 0)         self.IdleAnimation = CurTime() + self:SequenceDuration()     else         if self:GetNextSecondaryFire() <= CurTime() and not self:GetOwner():IsHolding() and self:GetReloadFinish() == 0 then             self:SetIronsights(true)         end     end end  function SWEP:PlayFireModeSwitchSound(fm)     fm = tonumber(fm)     if CLIENT then         if fm == 1 then             surface.PlaySound("items/medshot4.wav")         else             surface.PlaySound("weapons/smg1/switch_burst.wav")         end     end end  function SWEP:Think()     if self:GetIronsights() and not self:GetOwner():KeyDown(IN_ATTACK2) then         self:SetIronsights(false)     end      self.BaseClass.Think(self) end  function SWEP:SendWeaponAnimation()     self:SendWeaponAnim(ACT_VM_PRIMARYATTACK)     self:GetOwner():GetViewModel():SetPlaybackRate(self.FireAnimSpeed) end  function SWEP:ShootAlt(damage, numshots, cone)     local owner = self:GetOwner()     self:SendWeaponAnimation()     owner:DoAttackEvent()      if self.Recoil > 0 then         local r = math.Rand(0.8, 1)         owner:ViewPunch(Angle(r * -self.Recoil, 0, (1 - r) * (math.random(2) == 1 and -1 or 1) * self.Recoil))     end      if CLIENT then return end      local ssfw, ssup     if self.SameSpread then         ssfw, ssup = math.Rand(0, 360), math.Rand(-cone, cone)     end      for i = 0,numshots-1 do         local ent = ents.Create(self.Primary.Projectile)         if ent:IsValid() then             ent:SetPos(owner:GetShootPos())             ent:SetAngles(owner:EyeAngles())             ent:SetOwner(owner)             ent.ProjDamage = 0             ent.ProjSource = self             ent.Heal = self.Heal             ent.ShotMarker = i             ent.Team = owner:Team()              if self.UseBuffProjectiles then                 ent:SetDTBool(0, true)             end              ent:Spawn()              local phys = ent:GetPhysicsObject()             if phys:IsValid() then                 phys:Wake()                  local angle = owner:GetAimVector():Angle()                 angle:RotateAroundAxis(angle:Forward(), ssfw or math.Rand(0, 360))                 angle:RotateAroundAxis(angle:Up(), ssup or math.Rand(-cone, cone))                  ent.PreVel = angle:Forward() * self.Primary.ProjVelocity * (owner.ProjectileSpeedMul or 1)                 phys:SetVelocityInstantaneous(ent.PreVel)             end         end     end end  function SWEP:DoReload()     if not self:CanReload() or self:GetOwner():KeyDown(IN_ATTACK) or not self:GetDTBool(2) and not self:GetOwner():KeyDown(IN_RELOAD) then         self:StopReloading()         return     end      local delay = self:GetReloadDelay()     if self.ReloadActivity then         self:SendWeaponAnim(self.ReloadActivity)         self:ProcessReloadAnim()     end     if self.ReloadSound then         self:EmitSound(self.ReloadSound, 75, ( self.ReloadSoundStartPitch or 40 ) + 50 * self:Clip1() / self.Primary.ClipSize)     end      local am = math.min( self.RequiredClipReload, self:GetOwner():GetAmmoCount(self.Primary.Ammo) )      self:GetOwner():RemoveAmmo(am, self.Primary.Ammo, false)     self:SetClip1(self:Clip1() + am)      self:SetDTBool(2, false)      self:SetDTFloat(3, CurTime() + delay)      self:SetNextPrimaryFire(CurTime() + math.max(self.Primary.Delay, delay)) end  if CLIENT then      local colBG = Color(16, 16, 16, 90)     local colRed = Color(220, 0, 0, 230)     local colYellow = Color(220, 220, 0, 230)     local colWhite = Color(220, 220, 220, 230)     local colAmmo = Color(255, 255, 255, 230)     local function GetAmmoColor(clip, maxclip)         if clip == 0 then             colAmmo.r = 255 colAmmo.g = 0 colAmmo.b = 0         else             local sat = clip / maxclip             colAmmo.r = 255             colAmmo.g = sat ^ 0.3 * 255             colAmmo.b = sat * 255         end     end      function SWEP:GetDisplayAmmoAlt(clip, spare, maxclip)         if self.RequiredClipAlt ~= 1 then             clip = math.floor(clip / self.RequiredClipAlt)             spare = math.floor(spare / self.RequiredClipAlt)             maxclip = math.ceil(maxclip / self.RequiredClipAlt)         end          return clip, spare, maxclip     end      function SWEP:Draw2DHUD()         local screenscale = BetterScreenScale()         local wid, hei = 180 * screenscale, 160 * screenscale         local x, y = ScrW() - wid - screenscale * 128, ScrH() - hei - screenscale * 72         local clip = self:Clip1()         local spare = self:GetOwner():GetAmmoCount(self:GetPrimaryAmmoType())         local spare2 = self:GetOwner():GetAmmoCount(self:GetPrimaryAmmoType())         local maxclip = self.Primary.ClipSize         local scndclip = self.Primary.ClipSize          if self.RequiredClipAlt ~= 1 then             scndclip = math.floor(clip / self.RequiredClipAlt)             spare2 = math.floor(spare / self.RequiredClipAlt)         end          if self.RequiredClip ~= 1 then             clip = math.floor(clip / self.RequiredClip)             spare = math.floor(spare / self.RequiredClip)             maxclip = math.ceil(maxclip / self.RequiredClip)         end           draw.RoundedBox(16, x, y, wid, hei, colBG)          local displayspare = maxclip > 0 and self.Primary.DefaultClip ~= 99999          if displayspare then             draw.SimpleTextBlurry(spare, spare >= 1000 and "ZSHUDFontSmall" or "ZSHUDFont", x + wid * 0.75, y + hei * 0.5, spare == 0 and colRed or spare <= maxclip and colYellow or colWhite, TEXT_ALIGN_CENTER, TEXT_ALIGN_BOTTOM)         end          draw.SimpleTextBlurry(spare2, spare2 >= 1000 and "ZSHUDFontSmall" or "ZSHUDFont", x + wid * 0.75, y + hei * 0.5, Color(0,255,0,255), TEXT_ALIGN_CENTER, TEXT_ALIGN_TOP)         GetAmmoColor(clip, maxclip)         draw.SimpleTextBlurry(clip, clip >= 100 and "ZSHUDFont" or "ZSHUDFontBig", x + wid * (displayspare and 0.25 or 0.5), y + hei * 0.5, colAmmo, TEXT_ALIGN_CENTER, TEXT_ALIGN_BOTTOM)         draw.SimpleTextBlurry(scndclip, scndclip >= 100 and "ZSHUDFont" or "ZSHUDFontBig", x + wid * (displayspare and 0.25 or 0.5), y + hei * 0.5, Color(0,255,0,255), TEXT_ALIGN_CENTER, TEXT_ALIGN_TOP)          local fm = self:GetFireMode()         if self.FireModes > 1 then             local fmname = self.FireModeNames[fm + 1] or "-"             draw.SimpleTextBlurry(fmname, "ZSHUDFont", x + wid * 0.5, y + hei + 32 * screenscale, colWhite, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)         end     end      function SWEP:Draw3DHUD(vm, pos, ang)         local wid, hei = 180, 200         local x, y = wid * -0.6, hei * -0.5         local clip = self:Clip1()         local spare = self:GetOwner():GetAmmoCount(self:GetPrimaryAmmoType())         local maxclip = self.Primary.ClipSize         local spare2 = self:GetOwner():GetAmmoCount(self:GetPrimaryAmmoType())          local dclip, dspare, dmaxclip = self:GetDisplayAmmo(clip, spare, maxclip)         local dclip2, dspare2 = self:GetDisplayAmmoAlt(clip, spare2, maxclip)          cam.Start3D2D(pos, ang, self.HUD3DScale / 2)             draw.RoundedBoxEx(32, x, y, wid, hei * 1.7, colBG, true, false, true, false)              local displayspare = dmaxclip > 0 and self.Primary.DefaultClip ~= 99999             if displayspare then                 draw.SimpleTextBlurry(dspare, dspare >= 1000 and "ZS3D2DFontSmall" or "ZS3D2DFont", x + wid * 0.5, y + hei * 0.75, dspare == 0 and colRed or dspare <= dmaxclip and colYellow or colWhite, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)             end              GetAmmoColor(dclip, dmaxclip)             draw.SimpleTextBlurry(dclip, dclip >= 100 and "ZS3D2DFont" or "ZS3D2DFontBig", x + wid * 0.5, y + hei * (displayspare and 0.3 or 0.5), colAmmo, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)             draw.SimpleTextBlurry(dclip2, dclip2 >= 100 and "ZS3D2DFont" or "ZS3D2DFontBig", x + wid * 0.5, y + hei * 0.75, Color(0,255,0,255), TEXT_ALIGN_CENTER, TEXT_ALIGN_TOP)             draw.SimpleTextBlurry(dspare2, dspare2 >= 1000 and "ZS3D2DFontSmall" or "ZS3D2DFont", x + wid * 0.5, y + hei * 1.3, Color(0,255,0,255), TEXT_ALIGN_CENTER, TEXT_ALIGN_TOP)         cam.End3D2D()     end      local ghostlerp = 0     local reloadlerp = 0     local pumplerp = 0     function SWEP:CalcViewModelView(vm, oldpos, oldang, pos, ang)          if self:GetOwner():GetBarricadeGhosting() then             ghostlerp = math.min(1, ghostlerp + FrameTime() * 4)         elseif ghostlerp > 0 then             ghostlerp = math.max(0, ghostlerp - FrameTime() * 5)         end          if self:IsReloading() and pumplerp <= 0 then             reloadlerp = math.min(1, reloadlerp + FrameTime() * 2)         elseif reloadlerp > 0 then             reloadlerp = math.max(0, reloadlerp - FrameTime() * 3)         end          if self.PumpPos and self.PumpAng and self.PumpAnimTime and self.PumpAnimTime > CurTime() then             pumplerp = math.min(1, pumplerp + RealFrameTime() * 3)         elseif pumplerp > 0 then             pumplerp = math.max(0, pumplerp - RealFrameTime() * 2)         end          if self.PumpPos and self.PumpAng and pumplerp > 0 then              local Offset = self.PumpPos              ang = Angle(ang.p, ang.y, ang.r)             ang:RotateAroundAxis(ang:Right(), self.PumpAng.x * pumplerp)             ang:RotateAroundAxis(ang:Up(), self.PumpAng.y * pumplerp)             ang:RotateAroundAxis(ang:Forward(), self.PumpAng.z * pumplerp)               pos = pos + Offset.x * pumplerp * ang:Right() + Offset.y * pumplerp * ang:Forward() + Offset.z * pumplerp * ang:Up()         end          if reloadlerp > 0 then             ang:RotateAroundAxis(ang:Up(), 15 * reloadlerp)             ang:RotateAroundAxis(ang:Right(), 5 * reloadlerp)         end          if ghostlerp > 0 then             pos = pos + 3.5 * ghostlerp * ang:Up()             ang:RotateAroundAxis(ang:Right(), -30 * ghostlerp)         end                    ang:RotateAroundAxis( ang:Forward(), -12 )          return pos, ang     end      function SWEP:ViewModelDrawn()          self.DeployAnimTime = self.DeployAnimTime or 0         self.DeployAnimDuration = self.DeployAnimDuration or 0.8         self.DeployAnimVariant = self.DeployAnimVariant or 1          local delta = 0          if self.DeployAnimTime ~= 0 then              local time = CurTime()              delta = math.Clamp( ( self.DeployAnimTime - CurTime() ) / math.max( 0.01, self.DeployAnimDuration ), 0, 1 )              if self.DeployAnimTime > time then                  if self.ViewModelBoneMods and self.ViewModelBoneMods["Weapon_Controller"] and self.ViewModelBoneMods["Weapon_Controller"].pos and self.ViewModelBoneMods["Weapon_Controller"].angle then                      delta = delta ^ 1.5                      self.ViewModelBoneMods["Weapon_Controller"].pos.z = delta * 6                      if self.DeployAnimVariant == 1 then                         self.ViewModelBoneMods["Weapon_Controller"].angle.r = delta * 360 * 2                     elseif self.DeployAnimVariant == 2 then                         self.ViewModelBoneMods["Weapon_Controller"].angle.y = delta * 360 * 2                     end                 end              else                 self.DeployAnimTime = 0                  if self.ViewModelBoneMods and self.ViewModelBoneMods["Weapon_Controller"] and self.ViewModelBoneMods["Weapon_Controller"].pos and self.ViewModelBoneMods["Weapon_Controller"].angle then                     self.ViewModelBoneMods["Weapon_Controller"].pos.z = 0                     self.ViewModelBoneMods["Weapon_Controller"].angle.r = 0                     self.ViewModelBoneMods["Weapon_Controller"].angle.y = 0                 end              end         end          self:SCKViewModel()     end  end  