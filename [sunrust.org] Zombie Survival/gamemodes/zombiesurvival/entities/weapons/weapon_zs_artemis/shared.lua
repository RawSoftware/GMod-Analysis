SWEP.PrintName = "'Artemis' Dual Crossbows" SWEP.Description = "A pair of miniature crossbows. Fires quick successions of explosive bolts."  SWEP.Slot = 3 SWEP.SlotPos = 0  SWEP.Base = "weapon_zs_baseproj" local BaseClass = baseclass.Get("weapon_zs_baseproj") SWEP.HoldType = "duel"  SWEP.ViewModel = "models/weapons/cstrike/c_pist_elite.mdl" SWEP.WorldModel = "models/weapons/w_pist_elite.mdl" SWEP.UseHands = true  SWEP.CSMuzzleFlashes = false  SWEP.Primary.Delay = 0.5 SWEP.Primary.Damage = 85  SWEP.Primary.ClipSize = 4 SWEP.Primary.Automatic = false SWEP.Primary.Ammo = "XBowBolt" SWEP.Primary.DefaultClip = 15  SWEP.ReloadDelay = 3.5  SWEP.Tier = 4  SWEP.ConeMax = 2.5 SWEP.ConeMin = 1.2  SWEP.WalkSpeed = SPEED_SLOW  SWEP.DontScaleReloadSpeed = true  SWEP.Taper = 0.83 SWEP.Radius = 46  SWEP.DamageScaling = 1.15  GAMEMODE:AttachWeaponModifier(SWEP, WEAPON_MODIFIER_RELOAD_SPEED, 0.1, 1) GAMEMODE:AttachWeaponModifier(SWEP, WEAPON_MODIFIER_CLIP_SIZE, 1, 1) GAMEMODE:AddNewRemantleBranch(SWEP, 1, "'Actaeon' Dual Crossbows", "Bolts pierce slightly instead of exploding, and inflict soften, less damage, less fire speed", function(wept)  wept.Primary.Damage = wept.Primary.Damage * 0.9     wept.Primary.Delay = wept.Primary.Delay * 1.1  wept.Primary.Projectile = "projectile_arrow_inq"  wept.EntModify = function(self, ent)  ent:SetDTBool(0, true)  end     wept.Pierces = 3 end).CollectiveName = "Actaeon"  function SWEP:SecondaryAttack() end  function SWEP:EmitFireSound()  self:EmitSound("weapons/crossbow/fire1.wav", 70, 150, 1, CHAN_WEAPON) end  function SWEP:EmitReloadSound()     if IsFirstTimePredicted() then         self:EmitSound("weapons/crossbow/reload1.wav", 75, 80, 1, CHAN_WEAPON)     end end  function SWEP:SendWeaponAnimation()  self:SendWeaponAnim(self:Clip1() % 2 == 0 and ACT_VM_PRIMARYATTACK or ACT_VM_SECONDARYATTACK)  self.IdleAnimation = CurTime() + self:SequenceDuration() end  function SWEP:ProcessReloadEndTime()  local reloadspeed = self.ReloadSpeed * self:GetReloadSpeedMultiplier()  self:SetReloadFinish(CurTime() + self.ReloadDelay / reloadspeed) end 