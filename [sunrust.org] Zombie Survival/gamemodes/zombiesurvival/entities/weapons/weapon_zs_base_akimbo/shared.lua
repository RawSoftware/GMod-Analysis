SWEP.PrintName = "Akimbo Base" SWEP.Description = "" SWEP.Slot = 1 SWEP.SlotPos = 0  SWEP.Base = "weapon_zs_base"  SWEP.HoldType = "duel"  SWEP.ViewModel = "models/weapons/cstrike/c_smg_mac10.mdl" SWEP.ViewModel_L = "models/weapons/cstrike/c_smg_mac10.mdl" SWEP.WorldModel = "models/weapons/w_pist_elite.mdl" SWEP.UseHands = true  SWEP.SoundFireVolume = 1 SWEP.SoundPitchMin = 100 SWEP.SoundPitchMax = 110  SWEP.Primary.Sound = ")weapons/mac10/mac10-1.wav" SWEP.Primary.Damage = 16.5 SWEP.Primary.NumShots = 1 SWEP.Primary.Delay = 0.075  SWEP.SoundFireVolume_S = 1 SWEP.SoundFireLevel_S = 140 SWEP.SoundPitchMin_S = 100 SWEP.SoundPitchMax_S = 110  SWEP.Secondary.Sound = ")weapons/mac10/mac10-1.wav" SWEP.Secondary.Damage = 16.5 SWEP.Secondary.NumShots = 1 SWEP.Secondary.Delay = 0.075  SWEP.Primary.ClipSize = 35 SWEP.Primary.DefaultClip = 35 SWEP.Primary.Automatic = true SWEP.Primary.Ammo = "smg1"  SWEP.Secondary.ClipSize = 35 SWEP.Secondary.DefaultClip = 35 SWEP.Secondary.Automatic = true SWEP.Secondary.Ammo = "smg1"  SWEP.ShouldMuzzleL = true SWEP.ShouldMuzzleR = true  SWEP.RequiredClip = 1 SWEP.RequiredClipSecondary = 1  SWEP.ConeMax = 5.5 SWEP.ConeMin = 2.5  SWEP.ConeMax_S = 5.5 SWEP.ConeMin_S = 2.5 SWEP.ConeRamp_S = 2  SWEP.FireAnimSpeed = 1.5  SWEP.Tier = 4  SWEP.ViewModelFlip = false   SWEP.ViewModelFlip1 = true    SWEP.UseHands1 = false SWEP.DualHands = true  SWEP.FireAnimIndexMin = 2 SWEP.FireAnimIndexMax = 4 SWEP.ReloadAnimIndex = 1 SWEP.DeployAnimIndex = 5  SWEP.FireAnimIndexMin_S = 2 SWEP.FireAnimIndexMax_S = 4 SWEP.ReloadAnimIndex_S = 1 SWEP.DeployAnimIndex_S = 5  function SWEP:Initialize()     if not self:IsValid() then return end        self:SetWeaponHoldType(self.HoldType)     GAMEMODE:DoChangeDeploySpeed(self)            if self.Weight and self.Tier then         self.Weight = self.Weight + self.Tier     end      if CLIENT then         self:CheckCustomIronSights()         self:SCKInitAkimbo()     end end  function SWEP:FireAnimationEvent( pos, ang, event, options )  return true end  function SWEP:SendViewModelAnim( seq , index , rate )  local vm = self:GetOwner():GetViewModel( index )   if not IsValid(vm) then return end   vm:SendViewModelMatchingSequence(seq)  vm:SetPlaybackRate( rate or 1 ) end  function SWEP:Deploy()  local vm = self:GetOwner():GetViewModel(1)  if IsValid(vm) then  vm:SetWeaponModel(self.ViewModel_L, self)  end   if SERVER then  self:SecondaryHands(false)  end   self:SendViewModelAnim( self.DeployAnimIndex , 0 )  self:SendViewModelAnim( self.DeployAnimIndex_S , 1 )   return true end  function SWEP:GetSecondaryClipSize()     local owner = self:GetOwner()     local mag_mul       = owner.MagSizeEightMul or 1     local mag_mul_four  = owner.MagSizeFourEightMul or 1      local ratio = self.Secondary.ClipSize/self.RequiredClip     local multi = ratio >= 8 and mag_mul or                   ratio >= 4 and ratio <= 7 and mag_mul_four                   or 1      return math.floor(self.Secondary.ClipSize * multi) end  function SWEP:CanReload()  return self:GetNextReload() <= CurTime() and self:GetReloadFinish() == 0 and  (  self:GetMaxClip1() > 0 and self:Clip1() < self:GetPrimaryClipSize() and self:ValidPrimaryAmmo() and self:GetOwner():GetAmmoCount(self:GetPrimaryAmmoType()) > 0  or self:GetMaxClip2() > 0 and self:Clip2() < self:GetSecondaryClipSize() and self:ValidSecondaryAmmo() and self:GetOwner():GetAmmoCount(self:GetSecondaryAmmoType()) > 0  ) end  function SWEP:SendReloadAnimation()  self:SendViewModelAnim(self.ReloadAnimIndex, 0, self.ReloadSpeed * self:GetReloadSpeedMultiplier())  self:SendViewModelAnim(self.ReloadAnimIndex_S, 1, self.ReloadSpeed * self:GetReloadSpeedMultiplier())  self:SendWeaponAnim(ACT_VM_RELOAD) end  function SWEP:Holster()  local vm = self:GetOwner():GetViewModel(1)  if IsValid(vm) then  vm:SetWeaponModel(self.ViewModel_L, nil)   if SERVER then  self:SecondaryHands(true)  end  end   return true end  function SWEP:TakeAmmo(LH)  if LH then  self:TakeSecondaryAmmo(self.RequiredClipSecondary)  else  self:TakePrimaryAmmo(self.RequiredClip)  end end  function SWEP:CanAttackCheck(LH)  if self:GetOwner():IsHolding() or self:GetOwner():GetBarricadeGhosting() or self:GetReloadFinish() > 0 then return false end   if LH and self:Clip2() < self.RequiredClipSecondary or not LH and self:Clip1() < self.RequiredClip then  self:EmitSound(self.DryFireSound)   if LH then  self:SetNextSecondaryFire(CurTime() + math.max(0.25, self.Primary.Delay))  else  self:SetNextPrimaryFire(CurTime() + math.max(0.25, self.Primary.Delay))  end   return false  end   return (LH and self:GetNextSecondaryFire() or self:GetNextPrimaryFire()) <= CurTime() end    local function CreateMuzzleFlashEffect(self, left)  if GAMEMODE.OverTheShoulder then return end     local data = EffectData()  data:SetFlags(0)  data:SetEntity(self:GetOwner():GetViewModel(left and 1 or 0))  data:SetAttachment(1)  data:SetScale(1)  util.Effect("CS_MuzzleFlash", data) end  function SWEP:PrimaryAttack()  if not self:CanAttackCheck(false) then return end   self:SetNextPrimaryFire(CurTime() + self:GetFireDelay())   self:EmitFireSound()   self:TakeAmmo(false)   if CLIENT and self.ShouldMuzzleR then  CreateMuzzleFlashEffect(self, false)  end   self:ShootBullets(self.Primary.Damage, self.Primary.NumShots, self:GetCone())  self.IdleAnimation = CurTime() + self:SequenceDuration()   self:SendViewModelAnim(math.random(self.FireAnimIndexMin, self.FireAnimIndexMax), 0, self.FireAnimSpeed) end  function SWEP:EmitFireSound_S()  self:EmitSound(self.Secondary.Sound) end  function SWEP:SecondaryAttack()  if not self:CanAttackCheck(true) then return end   self:SetNextSecondaryFire(CurTime() + self:GetFireDelay())   self:EmitFireSound_S()   self:TakeAmmo(true)   if CLIENT and self.ShouldMuzzleL then  CreateMuzzleFlashEffect(self, true)  end   self:ShootBullets_Left(self.Secondary.Damage, self.Secondary.NumShots, self:GetCone())  self.IdleAnimation = CurTime() + self:SequenceDuration()   self:SendViewModelAnim(math.random(self.FireAnimIndexMin_S, self.FireAnimIndexMax_S), 1, self.FireAnimSpeed) end  function SWEP:ShootBullets_Left(dmg, numbul, cone)  local owner = self:GetOwner()   owner:DoAttackEvent()  if self.Recoil > 0 then  local r = math.Rand(0.8, 1)  owner:ViewPunch(Angle(r * -self.Recoil, 0, (1 - r) * (math.random(2) == 1 and -1 or 1) * self.Recoil))  end   if self.PointsMultiplier then  POINTSMULTIPLIER = self.PointsMultiplier  end   owner:LagCompensation(true)  owner:FireBulletsLua(owner:GetShootPos(), owner:GetAimVector(), cone, numbul, dmg, nil, self.Secondary.KnockbackScale, self.TracerName_S, self.BulletCallback, self.Secondary.HullSize, nil, self.Secondary.MaxDistance, nil, self, CLIENT and (GAMEMODE.OverTheShoulder and self or self:GetOwner():GetViewModel(1)) or self, GAMEMODE.OverTheShoulder and 2 or 1)  owner:LagCompensation(false)   if self.PointsMultiplier then  POINTSMULTIPLIER = nil  end end