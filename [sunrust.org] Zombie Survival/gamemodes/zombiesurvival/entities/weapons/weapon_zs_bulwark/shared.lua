SWEP.PrintName = "'Bulwark' Minigun" SWEP.Description = "Incredibly heavy duty minigun. Takes time to spool. Hold right click to spool the gun without firing. Press R to activate Mow Down mode when fully charged."  SWEP.Base = "weapon_zs_base"  SWEP.HoldType = "shotgun"  SWEP.ViewModel = "models/weapons/c_physcannon.mdl" SWEP.WorldModel = "models/weapons/w_physics.mdl" SWEP.ShowViewModel = false SWEP.ShowWorldModel = false SWEP.UseHands = true  SWEP.Primary.Damage = 23 SWEP.Primary.NumShots = 1 SWEP.Primary.Delay = 0.22 SWEP.Primary.MaxDelayReduc = 0.15  SWEP.Primary.ClipSize = 150 SWEP.Primary.Automatic = true SWEP.Primary.Ammo = "smg1" GAMEMODE:SetupDefaultClip(SWEP.Primary)  SWEP.Secondary.Automatic = true  SWEP.ConeMax = 6.25 SWEP.ConeMin = 5.25  SWEP.Recoil = 0.25  SWEP.Tier = 6 SWEP.MaxStock = 2 SWEP.FirePitch = 1  SWEP.MowDownEffect = "hit_jugger" SWEP.MowDownRadius = 44 SWEP.MowDownTaper  = 0.75 SWEP.MowDownROFMulti = 1.45  SWEP.WeaponBuildup = {  Colour = {180, 140, 40, 255},  Name = "Charge" }  GAMEMODE:AttachWeaponModifier(SWEP, WEAPON_MODIFIER_MAX_SPREAD, -0.55, 1) GAMEMODE:AttachWeaponModifier(SWEP, WEAPON_MODIFIER_MIN_SPREAD, -0.4, 1) GAMEMODE:AddNewRemantleBranch(SWEP, 1, "'Citadel' Minicannon", "Uses 3 ammo per shot, shoots slower, but more damage and accuracy and also pierces. Mow down mode has more explosive radius and less taper but slower firerate.", function(wept)  wept.Primary.Damage = wept.Primary.Damage * 2.6  wept.Primary.MaxDelayReduc = 0.32  wept.Primary.Delay = wept.Primary.Delay * 2.75  wept.ConeMin = wept.ConeMin * 0.475  wept.ConeMax = wept.ConeMax * 0.475  wept.Recoil = 0.5     wept.Pens = 1     wept.PenTaper = 0.25   wept.TakeAmmo = function(self)  self:TakeCombinedPrimaryAmmo(3)  end   wept.FirePitch = 0.65   wept.MowDownEffect = "explosion_redsun"  wept.MowDownRadius = 58  wept.MowDownTaper  = 0.8  wept.MowDownROFMulti = 1.3 end).CollectiveName = "Minicannon"  SWEP.WalkSpeed = SPEED_SLOWEST * 0.75 SWEP.FireAnimSpeed = 0.3  function SWEP:Initialize()  self.BaseClass.Initialize(self)   self.ChargeSound = CreateSound(self, "ambient/machines/spin_loop.wav") end  function SWEP:PrimaryAttack()  if not self:CanPrimaryAttack() then return end   if not self:GetSpooling() then  self:SetSpooling(true)  self:EmitSound("ambient/machines/spinup.wav", 75, 65)  self:GetOwner():ResetSpeed()   self:SetNextPrimaryFire(CurTime() + 0.75)  else  self:SetNextPrimaryFire(CurTime() + self:GetFireDelay())   self:EmitFireSound()  self:TakeAmmo()  if self:GetAmped() then  self:TakeAmmo()  end   self:ShootBullets(self.Primary.Damage, self.Primary.NumShots, self:GetCone())  self.IdleAnimation = CurTime() + self:SequenceDuration()  end end  function SWEP:SecondaryAttack()  if not self:CanSecondaryAttack() then return end   if not self:GetSpooling() then  self:SetSpooling(true)  self:EmitSound("ambient/machines/spinup.wav", 75, 65)  self:GetOwner():ResetSpeed()   self:SetNextPrimaryFire(CurTime() + 0.75)  else  self.IdleAnimation = CurTime() + self:SequenceDuration()  end end  function SWEP:TakeAmmo()  self:TakeCombinedPrimaryAmmo(1) end  function SWEP:CanPrimaryAttack()  if self:GetPrimaryAmmoCount() <= 0 then  return false  end   if self:GetOwner():IsHolding() or self:GetOwner():GetBarricadeGhosting() then return false end   return self:GetNextPrimaryFire() <= CurTime() end  function SWEP:CanSecondaryAttack()  if self:GetOwner():IsHolding() or self:GetOwner():GetBarricadeGhosting() then return false end   return self:GetNextPrimaryFire() <= CurTime() end  function SWEP:GetWalkSpeed()  return self.BaseClass.GetWalkSpeed(self) * (self:GetSpooling() and 0.5 or 1) end  function SWEP:EmitFireSound()  local amped = self:GetAmped()   self:EmitSound(amped and "weapons/zs_dds/zs_dd.ogg" or "weapons/m249/m249-1.wav", 75,  (amped and 0.7 or 1) * math.random(83, 89) * self.FirePitch,  amped and 1 or 0.65)   self:EmitSound("weapons/m4a1/m4a1_unsil-1.wav", 75,  (amped and 0.7 or 1) * math.random(122, 128) * self.FirePitch, 0.6,  CHAN_WEAPON + 20) end  function SWEP:Reload()  if not self:GetAmped() and self:GetWeaponBuildup() >= 1 then  self:SetAmped(true)   self:EmitSound("npc/attack_helicopter/aheli_charge_up.wav", 75, 60, 1, CHAN_WEAPON + 21)  end end  function SWEP:Holster()  self.ChargeSound:Stop()   return self.BaseClass.Holster(self) end  function SWEP:OnRemove()  self.ChargeSound:Stop() end  function SWEP:SetSpool(spool)  self:SetDTFloat(9, spool) end  function SWEP:GetSpool()  return self:GetDTFloat(9) end  function SWEP:SetSpooling(isspool)  self:SetDTBool(1, isspool) end  function SWEP:GetSpooling()  return self:GetDTBool(1) end  function SWEP:SetAmped(state)  self:SetDTBool(2, state) end  function SWEP:GetAmped()  return self:GetDTBool(2) end  function SWEP:GetFireDelay()  return (self.BaseClass.GetFireDelay(self) - (self:GetSpool() * self.Primary.MaxDelayReduc)) * (self:GetAmped() and self.MowDownROFMulti or 1) end  function SWEP:CheckSpool()  local amped = self:GetAmped()   if self:GetSpooling() then  if not self:GetOwner():KeyDown(IN_ATTACK) and not self:GetOwner():KeyDown(IN_ATTACK2) then  self:SetSpooling(false)  self:GetOwner():ResetSpeed()  self:SetNextPrimaryFire(CurTime() + 0.75)  self:EmitSound("ambient/machines/spindown.wav", 75, 150)  else  self:SetSpool(math.min(self:GetSpool() + FrameTime() * 0.12, 1))   if not amped then                 local frametime = FrameTime()                 local frametimeadj = frametime * self:GetReloadSpeedMultiplier()  self:SetWeaponBuildup(math.min(1, self:GetWeaponBuildup() + frametimeadj * 0.024 * self:GetSpool()))  end  end   self.ChargeSound:PlayEx(1, math.min(255, 65 + self:GetSpool() * 25 - (amped and 25 or 0)))  else  self:SetSpool(math.max(0, self:GetSpool() - FrameTime() * 0.36))  self.ChargeSound:Stop()  end   if amped then  self:SetWeaponBuildup(math.max(0, self:GetWeaponBuildup() - FrameTime() * 0.12))   local build_up = self:GetWeaponBuildup()  if build_up <= 0 then  self:SetAmped(false)  elseif build_up <= 0.15 then  self:SetSpool(math.max(0, self:GetSpool() - FrameTime() * 1))  else  self:SetSpool(math.min(1, self:GetSpool() + FrameTime() * 0.5))  end  end end  function SWEP.BulletCallback(attacker, tr, dmginfo, cur_pen)  local active_weapon = attacker:GetActiveWeapon()  if SERVER and active_weapon:GetAmped() and cur_pen == 0 then  local hitpos, dmg = tr.HitPos, dmginfo:GetDamage()  timer.Simple(0, function()  util.BlastDamagePlayer(active_weapon, attacker, hitpos, active_weapon.MowDownRadius, dmg, DMG_ALWAYSGIB, active_weapon.MowDownTaper)   local effectdata = EffectData()  effectdata:SetOrigin(hitpos)  effectdata:SetNormal(tr.HitNormal)  util.Effect(active_weapon.MowDownEffect, effectdata)  end)  end end  function SWEP:ShootBullets(dmg, numbul, cone)  local owner = self:GetOwner()  self:SendWeaponAnimation()  owner:DoAttackEvent()   local amped = self:GetAmped()  local r = math.Rand(0.8, 1)  local mod_coil = (amped and 1.5 or 1) * self.Recoil   owner:ViewPunch(Angle(r * -mod_coil, 0, (1 - r) * (math.random(2) == 1 and -1 or 1) * mod_coil))      local real_cone = cone * (amped and 0.5 or 1)   DO_BULLET_LAG_COMP = true  owner:FireBulletsLua(  owner:GetShootPos(), owner:GetAimVector(), real_cone, numbul, dmg * (amped and 1.2 or 1), nil,  self.Primary.KnockbackScale, amped and "tracer_bulwark" or self.TracerName, self.BulletCallback, self.Primary.HullSize, nil, self.Primary.MaxDistance, nil, self  )  DO_BULLET_LAG_COMP = nil end