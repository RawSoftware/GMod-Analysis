include("shared.lua")  SWEP.ViewModelFlip = false SWEP.ViewModelFOV = 70 SWEP.ShowViewModel = false SWEP.ShowWorldModel = false  SWEP.HUD3DBone = "ValveBiped.cube" SWEP.HUD3DPos = Vector(-1, -4, 2) SWEP.HUD3DAng = Angle(-30, 140, 180) SWEP.HUD3DScale = 0.05  SWEP.ViewModelBoneMods = {  ["ValveBiped.cube3"] = { scale = Vector(0.001, 0.001, 0.001), pos = Vector(0, 0, 0), angle = Angle(0, 0, 0) } }  SWEP.VElements = {  ["wire"] = { type = "Model", model = "models/props/de_prodigy/spoolwire.mdl", bone = "ValveBiped.Bip01_Spine4", rel = "crate", pos = Vector(0, -4.71, 0.412), angle = Angle(90, 90, 0), size = Vector(0.089, 0.078, 0.18), color = Color(180, 255, 180, 255), surpresslightning = false, material = "", skin = 0, bodygroup = {} },  ["crate"] = { type = "Model", model = "models/props/CS_militia/footlocker01_open.mdl", bone = "ValveBiped.cube", rel = "", pos = Vector(-2.405, 0.155, 0), angle = Angle(-72.061, -61.677, -108.192), size = Vector(0.2, 0.2, 0.2), color = Color(195, 255, 195, 255), surpresslightning = false, material = "", skin = 0, bodygroup = {} } }  SWEP.WElements = {  ["crate"] = { type = "Model", model = "models/props/CS_militia/footlocker01_open.mdl", bone = "ValveBiped.Bip01_R_Hand", rel = "", pos = Vector(5.26, 3.002, -2.566), angle = Angle(180, 73.143, -14.735), size = Vector(0.2, 0.2, 0.2), color = Color(195, 255, 195, 255), surpresslightning = false, material = "", skin = 0, bodygroup = {} },  ["wire"] = { type = "Model", model = "models/props/de_prodigy/spoolwire.mdl", bone = "ValveBiped.Bip01_R_Hand", rel = "crate", pos = Vector(0, -4.71, 0.412), angle = Angle(90, 90, 0), size = Vector(0.089, 0.078, 0.18), color = Color(180, 255, 180, 255), surpresslightning = false, material = "", skin = 0, bodygroup = {} } }  local colBG = Color(16, 16, 16, 90) local colWhite = Color(220, 220, 220, 230)  function SWEP:DrawHUD()  if not GAMEMODE:ShouldDraw2DWeaponHUD() then return end   local screenscale = BetterScreenScale()   local wid, hei = 180 * screenscale, 64 * screenscale  local x, y = ScrW() - wid - screenscale * 128, ScrH() - hei - screenscale * 72  local clip = self:GetPrimaryAmmoCount()   draw.RoundedBox(16, x, y, wid, hei, colBG)  draw.SimpleTextBlurry(clip, clip >= 100 and "ZSHUDFont" or "ZSHUDFontBig", x + wid * 0.5, y + hei * 0.5, colWhite, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER) end  function SWEP:GetHUD3DPos(vm)  local bone = vm:LookupBone(self.HUD3DBone)  if not bone then return end   local m = vm:GetBoneMatrix(bone)  if not m then return end   local pos, ang = m:GetTranslation(), m:GetAngles()   if self.ViewModelFlip then  ang.r = -ang.r  end   local offset = self.HUD3DPos  local aoffset = self.HUD3DAng   pos = pos + ang:Forward() * offset.x + ang:Right() * offset.y + ang:Up() * offset.z   if aoffset.yaw ~= 0 then ang:RotateAroundAxis(ang:Up(), aoffset.yaw) end  if aoffset.pitch ~= 0 then ang:RotateAroundAxis(ang:Right(), aoffset.pitch) end  if aoffset.roll ~= 0 then ang:RotateAroundAxis(ang:Forward(), aoffset.roll) end   return pos, ang end  function SWEP:PostDrawViewModel(vm)  if self.ShowViewModel == false then  render.SetBlend(1)  end   if self.HUD3DPos and GAMEMODE:ShouldDraw3DWeaponHUD() then  local pos, ang = self:GetHUD3DPos(vm)  if pos then  self:Draw3DHUD(vm, pos, ang)  end  end end  local colBG = Color(16, 16, 16, 90) local colRed = Color(220, 0, 0, 230) local colYellow = Color(220, 220, 0, 230) local colWhite = Color(220, 220, 220, 230) local colAmmo = Color(255, 255, 255, 230) local function GetAmmoColor(clip, maxclip)  if clip == 0 then  colAmmo.r = 255 colAmmo.g = 0 colAmmo.b = 0  else  local sat = clip / maxclip  colAmmo.r = 255  colAmmo.g = sat ^ 0.3 * 255  colAmmo.b = sat * 255  end end  function SWEP:Draw3DHUD(vm, pos, ang)  local wid, hei = 180, 200  local x, y = wid * -0.6, hei * -0.5  local spare = self:GetCombinedPrimaryAmmo()   cam.Start3D2D(pos, ang, self.HUD3DScale / 2)  draw.RoundedBoxEx(32, x, y, wid, hei, colBG, true, false, true, false)   draw.SimpleTextBlurry(spare, spare >= 1000 and "ZS3D2DFontSmall" or "ZS3D2DFont", x + wid * 0.5, y + hei * 0.5, spare == 0 and colRed or colWhite, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)  cam.End3D2D() end 