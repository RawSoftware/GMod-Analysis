AddCSLuaFile()  SWEP.PrintName = "'Harvester' Medical Syringe" SWEP.Description = "A 'DIY' syringe that can be charged by doing damage to heal and buff humans with right click."  if CLIENT then   SWEP.ViewModelFOV = 60  SWEP.ViewModelFlip = false   SWEP.ShowViewModel = false  SWEP.ShowWorldModel = false   SWEP.ViewModelBoneMods = {  ["ValveBiped.Bip01_R_Finger31"] = { scale = Vector(1, 1, 1), pos = Vector(0, 0, 0), angle = Angle(0, 45.925, 0) },  ["ValveBiped.Bip01_R_Finger11"] = { scale = Vector(1, 1, 1), pos = Vector(0, 0, 0), angle = Angle(0, 51.152, 0) },  ["ValveBiped.Bip01_R_Finger02"] = { scale = Vector(1, 1, 1), pos = Vector(0, 0, 0), angle = Angle(0, -7.248, 0) },  ["ValveBiped.Bip01_R_UpperArm"] = { scale = Vector(1, 1, 1), pos = Vector(0, 0, 0), angle = Angle(5.789, -3.408, 0.601) },  ["ValveBiped.Bip01_R_Finger42"] = { scale = Vector(1, 1, 1), pos = Vector(0, 0, 0), angle = Angle(0, -15.306, 0) },  ["ValveBiped.Bip01_R_Finger2"] = { scale = Vector(1, 1, 1), pos = Vector(0, 0, 0), angle = Angle(0, 15.883, 0) },  ["ValveBiped.Bip01_Spine4"] = { scale = Vector(1, 1, 1), pos = Vector(0.347, 1.848, -3.142), angle = Angle(1.266, -3.896, -5.367) },  ["ValveBiped.Bip01_R_Hand"] = { scale = Vector(1, 1, 1), pos = Vector(0, 0, 0), angle = Angle(27.489, 21.54, 68.953) },  ["ValveBiped.Bip01_R_Finger41"] = { scale = Vector(1, 1, 1), pos = Vector(0, 0, 0), angle = Angle(0, 69.856, 0) },  ["ValveBiped.Bip01_R_Finger1"] = { scale = Vector(1, 1, 1), pos = Vector(0, 0, 0), angle = Angle(0, 8.055, -1.252) },  ["ValveBiped.Bip01_R_Finger21"] = { scale = Vector(1, 1, 1), pos = Vector(0, 0, 0), angle = Angle(-8.268, 49.987, 5.25) },  ["ValveBiped.Bip01_R_Finger4"] = { scale = Vector(1, 1, 1), pos = Vector(0, 0, 0), angle = Angle(-19.803, 4.388, -0.588) },  ["ValveBiped.Bip01_L_Hand"] = { scale = Vector(1, 1, 1), pos = Vector(0, 0, 0), angle = Angle(-10.19, -3.777, -20.972) },  ["ValveBiped.Bip01_L_UpperArm"] = { scale = Vector(1, 1, 1), pos = Vector(0, 0, 0), angle = Angle(-13.079, -14.504, 39.555) },  ["ValveBiped.Bip01_R_Forearm"] = { scale = Vector(1, 1, 1), pos = Vector(0, 0, 0), angle = Angle(8.911, -7.211, -1.326) },  ["ValveBiped.Bip01_R_Finger3"] = { scale = Vector(1, 1, 1), pos = Vector(0, 0, 0), angle = Angle(-5.217, 6.657, 0) },  ["ValveBiped.Bip01_R_Finger12"] = { scale = Vector(1, 1, 1), pos = Vector(0, 0, 0), angle = Angle(0, 25.972, 0) },  ["ValveBiped.Bip01_R_Finger0"] = { scale = Vector(1, 1, 1), pos = Vector(0, 0, 0), angle = Angle(7.118, -14.99, -3.029) }  }    SWEP.VElements = {  ["needle2"] = { type = "Model", model = "models/props_c17/trap_crush01a.mdl", bone = "ValveBiped.Bip01_Spine4", rel = "base", pos = Vector(0, 0, 3.654), angle = Angle(130.039, 10.701, -5), size = Vector(0.018, 0.018, 0.018), color = Color(255, 255, 255, 255), surpresslightning = false, material = "models/props_c17/utility_poles001", skin = 0, bodygroup = {} },  ["liquid"] = { type = "Model", model = "models/props_lab/jar01a.mdl", bone = "ValveBiped.Bip01_Spine4", rel = "base", pos = Vector(0.009, -0.095, -1.864), empty_pos = Vector(0.009, -0.095, -1.864), full_pos = Vector(0.009, -0.095, -3.027), angle = Angle(0, -73.293, 0), size = Vector(0.25, 0.25, 0.009), color = Color(20, 215, 20, 255), surpresslightning = true, material = "models/shiny", skin = 0, bodygroup = {} },  ["plug"] = { type = "Model", model = "models/props_lab/labpart.mdl", bone = "ValveBiped.Bip01_Spine4", rel = "base", pos = Vector(-0, -0.242, -0.706), angle = Angle(0, 0, 97.511), size = Vector(0.204, 0.125, 0.204), color = Color(255, 255, 255, 255), surpresslightning = false, material = "", skin = 0, bodygroup = {} },  ["base"] = { type = "Model", model = "models/props_junk/PopCan01a.mdl", bone = "ValveBiped.Bip01_R_Hand", rel = "", pos = Vector(2.802, 1.407, -0.325), angle = Angle(0, 0, 0), size = Vector(0.5, 0.5, 0.5), color = Color(255, 255, 255, 0), surpresslightning = false, material = "", skin = 0, bodygroup = {} },  ["body"] = { type = "Model", model = "models/props_lab/tpplug.mdl", bone = "ValveBiped.Bip01_Spine4", rel = "base", pos = Vector(0, 0, -1.563), angle = Angle(90, 0, 2.043), size = Vector(0.4, 0.219, 0.219), color = Color(255, 255, 255, 255), surpresslightning = false, material = "models/props_c17/utility_poles001", skin = 0, bodygroup = {} },  ["needle"] = { type = "Model", model = "models/props_c17/signpole001.mdl", bone = "ValveBiped.Bip01_Spine4", rel = "base", pos = Vector(0, 0, -0.257), angle = Angle(0, 0, 0), size = Vector(0.071, 0.071, 0.071), color = Color(255, 255, 255, 255), surpresslightning = false, material = "", skin = 0, bodygroup = {} },  ["jar_normal"] = { type = "Model", model = "models/props_lab/jar01a.mdl", bone = "ValveBiped.Bip01_Spine4", rel = "base", pos = Vector(0.009, -0.095, -3.027), angle = Angle(0, 95.751, 0), size = Vector(0.266, 0.266, 0.266), color = Color(255, 255, 255, 255), surpresslightning = false, material = "models/props_combine/introomarea_glass", skin = 0, bodygroup = {} }  }   SWEP.WElements = {  ["jar_normal"] = { type = "Model", model = "models/props_lab/jar01a.mdl", bone = "ValveBiped.Bip01_R_Hand", rel = "base", pos = Vector(0.009, -0.095, -3.027), angle = Angle(0, 95.751, 0), size = Vector(0.266, 0.266, 0.266), color = Color(255, 255, 255, 255), surpresslightning = false, material = "models/props_combine/introomarea_glass", skin = 0, bodygroup = {} },  ["needle2"] = { type = "Model", model = "models/props_c17/trap_crush01a.mdl", bone = "ValveBiped.Bip01_R_Hand", rel = "base", pos = Vector(0, 0, 3.654), angle = Angle(130.039, 10.701, -5), size = Vector(0.018, 0.018, 0.018), color = Color(255, 255, 255, 255), surpresslightning = false, material = "models/props_c17/utility_poles001", skin = 0, bodygroup = {} },  ["liquid"] = { type = "Model", model = "models/props_lab/jar01a.mdl", bone = "ValveBiped.Bip01_R_Hand", rel = "base", pos = Vector(0.009, -0.095, -2.106), empty_pos = Vector(0.009, -0.095, -1.864), full_pos = Vector(0.009, -0.095, -3.027), angle = Angle(0, -73.293, 0), size = Vector(0.25, 0.25, 0.009), color = Color(20, 215, 20, 255), surpresslightning = true, material = "models/shiny", skin = 0, bodygroup = {} },  ["plug"] = { type = "Model", model = "models/props_lab/labpart.mdl", bone = "ValveBiped.Bip01_R_Hand", rel = "base", pos = Vector(-0, -0.242, -0.706), angle = Angle(0, 0, 97.511), size = Vector(0.204, 0.125, 0.204), color = Color(255, 255, 255, 255), surpresslightning = false, material = "", skin = 0, bodygroup = {} },  ["base"] = { type = "Model", model = "models/props_junk/PopCan01a.mdl", bone = "ValveBiped.Bip01_R_Hand", rel = "", pos = Vector(3.437, 1.167, -0.325), angle = Angle(0, 0, 0), size = Vector(0.5, 0.5, 0.5), color = Color(255, 255, 255, 0), surpresslightning = false, material = "", skin = 0, bodygroup = {} },  ["body"] = { type = "Model", model = "models/props_lab/tpplug.mdl", bone = "ValveBiped.Bip01_R_Hand", rel = "base", pos = Vector(0, 0, -1.563), angle = Angle(90, 0, 2.043), size = Vector(0.4, 0.219, 0.219), color = Color(255, 255, 255, 255), surpresslightning = false, material = "models/props_c17/utility_poles001", skin = 0, bodygroup = {} },  ["needle"] = { type = "Model", model = "models/props_c17/signpole001.mdl", bone = "ValveBiped.Bip01_R_Hand", rel = "base", pos = Vector(0, 0, -0.257), angle = Angle(0, 0, 0), size = Vector(0.071, 0.071, 0.071), color = Color(255, 255, 255, 255), surpresslightning = false, material = "", skin = 0, bodygroup = {} }  }  end  SWEP.Base = "weapon_zs_basemelee" SWEP.ViewModel = "models/weapons/c_arms_citizen.mdl" SWEP.WorldModel = "models/weapons/w_knife_t.mdl"  SWEP.UseHands = true  SWEP.HoldType = "melee"  SWEP.WalkSpeed = SPEED_FASTER    SWEP.MeleeDamage = 51 SWEP.MeleeRange = 60 SWEP.MeleeSize = 0.875 SWEP.Primary.Delay = 0.55  SWEP.Heal = 20 SWEP.HealRange = 56  SWEP.BuffDuration = 10  SWEP.HarvestDamage = 300 SWEP.HarvestRatio = 1  SWEP.DamageType = DMG_SLASH  SWEP.SwingSound = Sound( "weapons/slam/throw.wav" ) SWEP.HitSound = Sound( "weapons/knife/knife_hitwall1.wav" ) SWEP.HitSoundFlesh = Sound( "weapons/knife/knife_hit1.wav" ) SWEP.HitSoundFleshFull = Sound( "weapons/knife/knife_stab.wav" ) SWEP.HitSoundHeal = Sound( "weapons/crossbow/bolt_skewer1.wav" ) SWEP.NotReadySound = Sound( "buttons/combine_button2.wav" )  SWEP.AllowQualityWeapons = true  SWEP.Tier = 2  SWEP.DisplayOnlyGunStats = true  AccessorFuncDT(SWEP, "NextIdle", "Float", 1) AccessorFuncDT(SWEP, "Charge", "Float", 2) AccessorFuncDT(SWEP, "NextMeleeAttack", "Float", 3)  SWEP.StaminaUsage = 0.1  SWEP.FireModes = 2 SWEP.FireModeNames = {"Heal", "Self-Heal"}  GAMEMODE:SetPrimaryWeaponModifier(SWEP, WEAPON_MODIFIER_DAMAGE, 2) GAMEMODE:AttachWeaponModifier(SWEP, WEAPON_MODIFIER_HEALING, 3, 1) GAMEMODE:AttachWeaponModifier(SWEP, WEAPON_MODIFIER_BUFF_DURATION, 2) GAMEMODE:AttachWeaponModifier(SWEP, WEAPON_MODIFIER_HEALING_HARVEST_RATE, 0.4, 2)  GAMEMODE:AddNewRemantleBranch(SWEP, 1, "'Overdose' Medical Syringe", "Modified version of 'Harvester'. Injects blood armour instead of healing, as well as gives a strength boost.", function(wept)  if CLIENT then  wept.VElements["liquid"] = { type = "Model", model = "models/props_lab/jar01a.mdl", bone = "ValveBiped.Bip01_Spine4", rel = "base", pos = Vector(0.009, -0.095, -1.864), empty_pos = Vector(0.009, -0.095, -1.864), full_pos = Vector(0.009, -0.095, -3.027), angle = Angle(0, -73.293, 0), size = Vector(0.25, 0.25, 0.009), color = Color(255, 10, 10, 255), surpresslightning = true, material = "models/flesh", skin = 0, bodygroup = {} }  wept.WElements["liquid"] = { type = "Model", model = "models/props_lab/jar01a.mdl", bone = "ValveBiped.Bip01_R_Hand", rel = "base", pos = Vector(0.009, -0.095, -2.106), empty_pos = Vector(0.009, -0.095, -1.864), full_pos = Vector(0.009, -0.095, -3.027), angle = Angle(0, -73.293, 0), size = Vector(0.25, 0.25, 0.009), color = Color(255, 10, 10, 255), surpresslightning = true, material = "models/flesh", skin = 0, bodygroup = {} }  end      wept.HarvesterInject = function(self, owner, ent, trace)         local target = self:GetFireMode() == 0 and ent or owner          owner:BuffPlayer(target, "buff_strength", self.BuffDuration or 20, true, "Overdose Injection", true)         owner:BuffPlayer(target, "buff_speed", self.BuffDuration or 20, true)     end      function wept:HarvesterHeal(owner, ent)         local healed = owner:HealBloodArmor(self:GetFireMode() == 0 and ent or owner, self.Heal)          return healed     end      wept.HasMedicalAuraBlood = true end).CollectiveName = "Overdose"  local branch = GAMEMODE:AddNewRemantleBranch(SWEP, 2, "'Infuser' Chemical Extractor", "Can produce flasks and chemical or medical ammo from zombies it hits.", function(wept)  if CLIENT then  wept.VElements["liquid"] = { type = "Model", model = "models/props_lab/jar01a.mdl", bone = "ValveBiped.Bip01_Spine4", rel = "base", pos = Vector(0.009, -0.095, -1.864), empty_pos = Vector(0.009, -0.095, -1.864), full_pos = Vector(0.009, -0.095, -3.027), angle = Angle(0, -73.293, 0), size = Vector(0.25, 0.25, 0.009), color = Color(255, 255, 10, 255), surpresslightning = true, material = "models/shiny", skin = 0, bodygroup = {} }  wept.WElements["liquid"] = { type = "Model", model = "models/props_lab/jar01a.mdl", bone = "ValveBiped.Bip01_R_Hand", rel = "base", pos = Vector(0.009, -0.095, -2.106), empty_pos = Vector(0.009, -0.095, -1.864), full_pos = Vector(0.009, -0.095, -3.027), angle = Angle(0, -73.293, 0), size = Vector(0.25, 0.25, 0.009), color = Color(255, 255, 10, 255), surpresslightning = true, material = "models/shiny", skin = 0, bodygroup = {} }  end      wept.HasMedicalAura = false     wept.SecondaryAttack = function() end     wept.HarvestRatio = 0.75      wept.FireModeNames = {"Chemical", "Medical"}      function wept:AddCalculatedCharge( damage )         local desired = damage * self.HarvestRatio / self.HarvestDamage         self:AddCharge( desired )          if self:GetCharge() >= 1 then             self:SetCharge(0)              if SERVER then                 local owner = self:GetOwner()                 owner:RandomFlask()                 if self:GetFireMode() == 1 then                  owner:GiveAmmo(18, "Battery")                 else                  owner:GiveAmmo(15, "chemical")                 end             end         end     end      function wept:PlayFireModeSwitchSound(fm)  fm = tonumber(fm)  if CLIENT then  if fm == 1 then  surface.PlaySound("items/smallmedkit1.wav")  else  surface.PlaySound("ambient/levels/canals/toxic_slime_sizzle3.wav")  end  end  end end) branch.CollectiveName = "Infuser" branch.Colors = {Color(230, 230, 160), Color(180, 180, 110), Color(170, 170, 75), Color(160, 150, 40)}  function SWEP:OnUpgrade( old_wep )  if old_wep:GetCharge() > 0 then  self:SetCharge( old_wep:GetCharge() )  end end  function SWEP:AddCalculatedCharge( damage )  local desired = damage * self.HarvestRatio / self.HarvestDamage  self:AddCharge( desired ) end  function SWEP:AddCharge( amount )  self:SetCharge( math.Clamp( self:GetCharge() + amount, 0, 1 ) ) end  function SWEP:ResetCharge(done)  self:SetCharge( math.max(0, self:GetCharge() - done/20) ) end  function SWEP:ShouldDisplayMedicalAura()     return self:IsChargeReady() end  function SWEP:IsChargeReady()  return self:GetCharge() == 1 end  function SWEP:UpdateNextIdle()  local vm = self:GetOwner():GetViewModel()  self:SetNextIdle( CurTime() + vm:SequenceDuration() ) end  function SWEP:Deploy()  local vm = self:GetOwner():GetViewModel()  vm:SendViewModelMatchingSequence(vm:LookupSequence("fists_draw"))   gamemode.Call("WeaponDeployed", self:GetOwner(), self)  self:UpdateNextIdle()   return true end  function SWEP:Holster(wep)  if CurTime() >= self:GetNextPrimaryFire() then  self:OnRemove()  if CLIENT then  self:SCKHolster()  end   return true  end   return false end  function SWEP:PrimaryAttack(right)     if not self:CanPrimaryAttack() then return end   local owner = self:GetOwner()  local time = CurTime()   owner:SetAnimation(PLAYER_ATTACK1)   local anim = "fists_right"   local vm = self:GetOwner():GetViewModel()  vm:SendViewModelMatchingSequence( vm:LookupSequence( anim ) )   self:EmitSound( self.SwingSound )   self:UpdateNextIdle()   local armdelay = owner:GetMeleeSpeedMul()  local hitdelay = self.Primary.Delay / 3 * (owner.MeleeSwingDelayMul or 1) * armdelay  owner:GetViewModel():SetPlaybackRate(1 / armdelay)   self:SetNextMeleeAttack( time + hitdelay )   self:SetNextPrimaryFire( time + self.Primary.Delay * armdelay )  self:SetNextSecondaryFire( time + self.Primary.Delay * armdelay ) end    function SWEP:SecondaryAttack()  local owner = self:GetOwner()  local time = CurTime()   if not self:IsChargeReady() then  self:EmitSound( self.NotReadySound, 75, 140 )  self:SetNextPrimaryFire( time + self.Primary.Delay )  self:SetNextSecondaryFire( time + self.Primary.Delay )  return  end   local trtbl = owner:CompensatedPenetratingMeleeTrace(self.HealRange, 2, nil, nil, true)  local ent  local trace  for _, tr in pairs(trtbl) do  local test = tr.Entity  if test and test:IsValidLivingHuman() and (self.HasMedicalAuraBlood or gamemode.Call("PlayerCanBeHealed", test)) then  trace = tr  ent = test  break  end  end   if self:GetFireMode() == 0 and not ent then  self:EmitSound( self.NotReadySound, 75, 110 )  self:SetNextPrimaryFire( time + self.Primary.Delay )  self:SetNextSecondaryFire( time + self.Primary.Delay )  return  end   local done = self:HarvesterHeal(owner, ent)  if done > 0 then  owner:SetAnimation(PLAYER_ATTACK1)   local anim = "fists_right"   local vm = self:GetOwner():GetViewModel()  vm:SendViewModelMatchingSequence( vm:LookupSequence( anim ) )   self:EmitSound( self.SwingSound )   self:UpdateNextIdle()   local armdelay = owner:GetMeleeSpeedMul()  local hitdelay = self.Primary.Delay / 3 * (owner.MeleeSwingDelayMul or 1) * armdelay  owner:GetViewModel():SetPlaybackRate(1 / armdelay)   self:SetNextMeleeAttack( time + hitdelay )   self:SetNextPrimaryFire( time + self.Primary.Delay * armdelay )  self:SetNextSecondaryFire( time + self.Primary.Delay * armdelay )   self:EmitSound("items/medshot4.wav")  self:EmitSound( self.HitSoundHeal, 75, 120, 1, CHAN_WEAPON + 1)   if SERVER then             if self:GetFireMode() == 0 then                 util.Blood(trace.HitPos, 20, (trace.HitPos - owner:GetShootPos()):GetNormalized(), 20, true)             end              self:HarvesterInject(owner, ent, trace)      self:ResetCharge(done)  end  end end  function SWEP:HarvesterHeal(owner, ent)  local healed = owner:HealPlayer(self:GetFireMode() == 0 and ent or owner, self.Heal)      return healed end  function SWEP:HarvesterInject(owner, ent, trace)     local target = self:GetFireMode() == 0 and ent or owner      owner:BuffPlayer(target, "buff_defence", self.BuffDuration or 20, true, "Harvester Injection", true)     owner:BuffPlayer(target, "buff_speed", self.BuffDuration or 20, true) end  function SWEP:GenerateDamageInfo(damage, hitpos)  local dmginfo = DamageInfo()  dmginfo:SetAttacker(self:GetOwner())  dmginfo:SetInflictor(self)  dmginfo:SetDamageType(self.DamageType)  dmginfo:SetDamagePosition(hitpos)  dmginfo:SetDamage(damage)  return dmginfo end  function SWEP:DealDamage()  local owner = self:GetOwner()  local aimvector = owner:GetAimVector()   local time = CurTime()   local tr = owner:CompensatedMeleeTrace(self.MeleeRange * (owner.MeleeRangeMul or 1), 3)   local hitent = tr.Entity     if tr.Hit and not ( game.SinglePlayer() and CLIENT ) then  self:EmitSound( self.HitSound, 75, 140, 1, CHAN_WEAPON + 1)  end      local stamina_multi = 1     owner:AddDecimalStamina(-self.StaminaUsage * stamina_multi * owner:GetMeleeStaminaUseMul() * 1.7)   if self.OnMeleeHit and self:OnMeleeHit(hitent, hitflesh, tr) then  return  end   local armdelay = owner:GetMeleeSpeedMul()  local delay = self.Primary.Delay * (owner.UnarmedDelayMul or 1) * armdelay   self:SetNextPrimaryFire( time + delay )  self:SetNextSecondaryFire( time + delay )   if hitent:IsValid() then     local damagemultiplier = owner:GetTotalAdditiveModifier("MeleeDamageMultiplier")   local scrap_weapons = owner:IsSkillActive(SKILL_SCRAPWEAPONS)  local scrap_count = owner:GetAmmoCount("scrap")   damagemultiplier = damagemultiplier + (scrap_weapons and scrap_count >= 1 and 0.19 or 0)  damagemultiplier = damagemultiplier * (scrap_weapons and scrap_count <= 0 and 0.33 or 1)   local damage = self.MeleeDamage * damagemultiplier  local dmginfo = self:GenerateDamageInfo(damage, tr.HitPos)   local vel  if hitent:IsPlayer() then  self:PlayerHitUtil(owner, damage, hitent, dmginfo)   if scrap_weapons and owner:GetAmmoCount("scrap") >= 1 then  owner.ScrapUsage = (owner.ScrapUsage or 0) + self.Primary.Delay   if owner.ScrapUsage >= 2.6 then  owner.ScrapUsage = owner.ScrapUsage - 2.6  owner:RemoveAmmo(1, "scrap")  end  end   if SERVER then  hitent:SetLastHitGroup(tr.HitGroup)  if tr.HitGroup == HITGROUP_HEAD then  hitent:SetWasHitInHead()  end                  if hitent:IsValidLivingZombie() then      self:AddCalculatedCharge( dmginfo:GetDamage() )                 end  end              if self:IsChargeReady() then                 self:EmitSound( self.HitSoundFleshFull, 75, 120, 1, CHAN_WEAPON + 2)             else                 self:EmitSound( self.HitSoundFlesh, 75, 120, 1, CHAN_WEAPON + 2)             end   vel = hitent:GetVelocity()  else  if owner.MeleePowerAttackMul and owner.MeleePowerAttackMul > 1 then  self:SetPowerCombo(0)  end  end   if IsFirstTimePredicted() then  self:PostHitUtil(owner, hitent, dmginfo, tr, vel)  end   if SERVER and hitent:GetMoveType() == MOVETYPE_VPHYSICS then  local phys = hitent:GetPhysicsObject()  if phys and phys:IsValid() then  phys:ApplyForceOffset( aimvector * 2000, tr.HitPos )  hitent:SetPhysicsAttacker(owner)  end  end  end   if SERVER then  self:ServerMeleePostHitEntity(tr, hitent, damagemultiplier)  end end  function SWEP:Think()  local idletime = self:GetNextIdle()   if idletime > 0 and CurTime() >= idletime then  local vm = self:GetOwner():GetViewModel()  vm:SendViewModelMatchingSequence( vm:LookupSequence("fists_idle_01"))     self:UpdateNextIdle()  end   local meleetime = self:GetNextMeleeAttack()   if meleetime > 0 and CurTime() >= meleetime then  self:DealDamage()  self:SetNextMeleeAttack( 0 )  end end  if CLIENT then  local lerp_vector = LerpVector  local math_approach = math.Approach  function SWEP:ViewModelDrawn()  local charge = self:GetCharge() or 0  self.VisualCharge = self.VisualCharge or 0   if self.VElements and self.VElements["liquid"] then  if self.VisualCharge ~= charge then  self.VisualCharge = math_approach( self.VisualCharge, charge, RealFrameTime() * 1.3  )  end              local liquid = self.VElements["liquid"]   if liquid.pos and liquid.empty_pos and liquid.full_pos then  liquid.pos = lerp_vector( self.VisualCharge , liquid.empty_pos, liquid.full_pos )  end  if liquid.size then  liquid.size.z = 0.25 * self.VisualCharge  end   if self.VisualCharge == 0 and not liquid.hide then  liquid.hide = true  end   if self.VisualCharge ~= 0 and liquid.hide then  liquid.hide = nil  end  end   self:SCKViewModel()  end   function SWEP:DrawWorldModel()  local owner = self:GetOwner()  if owner:IsValid() and (owner.ShadowMan or owner.SpawnProtection) then return end   local charge = self:GetCharge() or 0   if self.WElements and self.WElements["liquid"] then             local liquid = self.WElements["liquid"]   if liquid.pos and liquid.empty_pos and liquid.full_pos then  liquid.pos = lerp_vector( charge, liquid.empty_pos, liquid.full_pos )  end  if liquid.size then  liquid.size.z = 0.25 * charge  end   if charge == 0 and not liquid.hide then  liquid.hide = true  end   if charge ~= 0 and liquid.hide then  liquid.hide = nil  end  end   self:SCKWorldModel()  end   local colWhite = Color(220, 220, 220, 230)     local texGradDown = surface.GetTextureID("VGUI/gradient_down")     local math_floor = math.floor     function SWEP:DrawHUD()         local wid, hei = 480, 16         local x, y = ScrW() - wid - 32, ScrH() - hei - 72         local texty = y - 4 - draw.GetFontHeight("ZSHUDFontSmall")         local screenscale = BetterScreenScale()          local charge = self:GetCharge() or 0         self.HUDVisualCharge = self.HUDVisualCharge or 0         local full = self.HUDVisualCharge >= 1          if self.HUDVisualCharge ~= charge then             self.HUDVisualCharge = math_approach( self.VisualCharge, charge, RealFrameTime() * 1.3  )         end          if self.HUDVisualCharge > 0 then             surface.SetDrawColor(5, 5, 5, 180)             surface.DrawRect(x, y, wid, hei)              surface.SetDrawColor(full and 50 or 255, full and 255 or 50, 50, 180)             surface.SetTexture(texGradDown)             surface.DrawTexturedRect(x, y, math.min(1, self.HUDVisualCharge) * wid, hei)              surface.SetDrawColor(full and 50 or 255, full and 255 or 50, 50, 180)             surface.DrawOutlinedRect(x, y, wid, hei)         end          draw.SimpleText(self.PrintName, "ZSHUDFontSmaller", x, texty, full and COLOR_GREEN or COLOR_DARKRED, TEXT_ALIGN_LEFT)          local nice_charge = math_floor( self.HUDVisualCharge * 100 )         if full then             draw.SimpleText(nice_charge.."%", "ZSHUDFontSmall", x + wid, texty, COLOR_GREEN, TEXT_ALIGN_RIGHT)         else             draw.SimpleText(nice_charge.."%", "ZSHUDFontSmall", x + wid, texty, COLOR_DARKRED, TEXT_ALIGN_RIGHT)         end          if GetConVar("crosshair"):GetInt() == 1 then             self:DrawCrosshairDot()         end           wid, hei = 180 * screenscale, 64 * screenscale      x, y = ScrW() - wid - screenscale * 128, ScrH() - hei - screenscale * 72         local fm = self:GetFireMode()      if self.FireModes > 1 then          local fmname = self.FireModeNames[fm + 1] or "-"          draw.SimpleTextBlurry(fmname, "ZSHUDFont", x + wid * 0.5, y + hei + 32 * screenscale, colWhite, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)      end     end end 