AddCSLuaFile()  SWEP.PrintName = "'Eternal' Double Shotgun" SWEP.Description = "A reliable weapon in a zombie apocalypse.\nCan fire both rounds at once for higher burst damage."  SWEP.Slot = 3 SWEP.SlotPos = 0  if CLIENT then     SWEP.ViewModelFlip = false     SWEP.ViewModelFOV = 67      SWEP.VElements = {         ["2+++++++++++"] = { type = "Model", model = "models/hunter/tubes/tubebend2x2x90.mdl", bone = "ValveBiped.Bip01_Spine4", rel = "1", pos = Vector(-0.755, -0.945, -19.591), angle = Angle(180, -90, 0), size = Vector(0.016, 0.016, 0.027), color = Color(255, 255, 255, 255), surpresslightning = false, material = "models/gibs/metalgibs/metal_gibs", skin = 0, bodygroup = {} },         ["3+"] = { type = "Model", model = "models/hunter/misc/shell2x2c.mdl", bone = "ValveBiped.Bip01_Spine4", rel = "break", pos = Vector(0, -0.301, -7.37), angle = Angle(-0.5, 90, 0), size = Vector(0.035, 0.028, 0.123), color = Color(165, 125, 100, 255), surpresslightning = false, material = "models/props_wasteland/wood_fence01a", skin = 0, bodygroup = {} },         ["break"] = { type = "Model", model = "", bone = "ValveBiped.Gun", rel = "hinge", pos = Vector(0, -0.23, 15.093), angle = Angle(0, 0, 0), size = Vector(0.5, 0.5, 0.5), color = Color(255, 255, 255, 255), surpresslightning = false, material = "", skin = 0, bodygroup = {} },         ["fake_hinge"] = { type = "Model", model = "models/props_junk/PopCan01a.mdl", bone = "Weapon_Controller", rel = "hinge", pos = Vector(0, 0, 0), angle = Angle(-90, 0, 0), size = Vector(0.308, 0.308, 0.435), color = Color(255, 255, 255, 255), surpresslightning = false, material = "models/gibs/metalgibs/metal_gibs", skin = 0, bodygroup = {} },         ["3+++"] = { type = "Model", model = "models/hunter/tubes/circle2x2c.mdl", bone = "ValveBiped.Bip01_Spine4", rel = "break", pos = Vector(0, -0.301, -14.176), angle = Angle(0, 90, 0), size = Vector(0.026, 0.028, 0.591), color = Color(255, 255, 255, 255), surpresslightning = false, material = "models/gibs/metalgibs/metal_gibs", skin = 0, bodygroup = {} },         ["shell_right"] = { type = "Model", model = "models/weapons/shotgun_shell.mdl", bone = "root", rel = "2+", pos = Vector(0.658, 0.018, 2.894), angle = Angle(90.955, 0, 0), size = Vector(0.884, 0.884, 0.884), color = Color(255, 255, 255, 255), surpresslightning = false, material = "", skin = 0, bodygroup = {} },         ["shell_right_ej"] = { type = "Model", model = "models/weapons/shotgun_shell.mdl", bone = "root", rel = "2+", pos = Vector(0.658, 0.018, 2.894), angle = Angle(90.955, 0, 0), size = Vector(0.884, 0.884, 0.884), color = Color(255, 255, 255, 255), surpresslightning = false, material = "", skin = 0, bodygroup = {} },         ["2++"] = { type = "Model", model = "models/props_phx/construct/wood/wood_boardx1.mdl", bone = "ValveBiped.Bip01_Spine4", rel = "break", pos = Vector(0, -1.423, -3.29), angle = Angle(90, -90, 0), size = Vector(0.556, 0.101, 0.097), color = Color(255, 255, 255, 255), surpresslightning = false, material = "models/gibs/metalgibs/metal_gibs", skin = 0, bodygroup = {} },         ["lock_hinge"] = { type = "Model", model = "models/props_junk/PopCan01a.mdl", bone = "Weapon_Controller", rel = "1", pos = Vector(0, -1.548, -21.966), angle = Angle(0, 0, -90), size = Vector(0.118, 0.118, 0.118), color = Color(255, 255, 255, 255), surpresslightning = false, material = "models/gibs/metalgibs/metal_gibs", skin = 0, bodygroup = {} },         ["2+++++++"] = { type = "Model", model = "models/hunter/tubes/tube1x1x2.mdl", bone = "ValveBiped.Bip01_Spine4", rel = "1", pos = Vector(-0.755, -0.945, -19.591), angle = Angle(0, 0, 0), size = Vector(0.032, 0.032, 0.028), color = Color(255, 255, 255, 255), surpresslightning = false, material = "models/gibs/metalgibs/metal_gibs", skin = 0, bodygroup = {} },         ["hinge"] = { type = "Model", model = "models/props_junk/PopCan01a.mdl", bone = "ValveBiped.Bip01_Spine4", rel = "weapon_base", pos = Vector(0, 0.234, -9.896), angle = Angle(0, 0, 0), size = Vector(0.009, 0.009, 0.009), color = Color(255, 255, 255, 255), surpresslightning = false, material = "", skin = 0, bodygroup = {} },         ["2+++++++++++++"] = { type = "Model", model = "models/props_phx/construct/wood/wood_boardx1.mdl", bone = "ValveBiped.Bip01_Spine4", rel = "1", pos = Vector(0, -0.134, -23.47), angle = Angle(90, -90, 0), size = Vector(0.045, 0.039, 0.495), color = Color(255, 255, 255, 255), surpresslightning = false, material = "models/gibs/metalgibs/metal_gibs", skin = 0, bodygroup = {} },         ["2"] = { type = "Model", model = "models/hunter/tubes/tube1x1x2.mdl", bone = "ValveBiped.Bip01_Spine4", rel = "break", pos = Vector(0.754, -0.945, -16.82), angle = Angle(0, 0, 0), size = Vector(0.032, 0.032, 0.28), color = Color(255, 255, 255, 255), surpresslightning = false, material = "models/gibs/metalgibs/metal_gibs", skin = 0, bodygroup = {} },         ["2+++++++++++++++++"] = { type = "Model", model = "models/hunter/tubes/tube4x4x025c.mdl", bone = "ValveBiped.Bip01_Spine4", rel = "1", pos = Vector(-0.362, -0.249, -22.799), angle = Angle(-178.749, -90, -90), size = Vector(0.009, 0.013, 0.043), color = Color(255, 255, 255, 255), surpresslightning = false, material = "models/gibs/metalgibs/metal_gibs", skin = 0, bodygroup = {} },         ["3"] = { type = "Model", model = "models/hunter/tubes/circle2x2c.mdl", bone = "ValveBiped.Bip01_Spine4", rel = "break", pos = Vector(0, -0.301, -10.688), angle = Angle(-0.5, 90, 0), size = Vector(0.035, 0.028, 2.177), color = Color(165, 125, 95, 255), surpresslightning = false, material = "models/props_wasteland/wood_fence01a", skin = 0, bodygroup = {} },         ["3++"] = { type = "Model", model = "models/hunter/tubes/circle2x2c.mdl", bone = "ValveBiped.Bip01_Spine4", rel = "1", pos = Vector(0, -0.301, -17.313), angle = Angle(0, 90, 0), size = Vector(0.026, 0.028, 1.452), color = Color(255, 255, 255, 255), surpresslightning = false, material = "models/gibs/metalgibs/metal_gibs", skin = 0, bodygroup = {} },         ["stock+"] = { type = "Model", model = "models/gibs/hgibs_spine.mdl", bone = "Weapon_Controller", rel = "1", pos = Vector(0.18, -0.16, -28.344), angle = Angle(-180, 0, 175.468), size = Vector(0.806, 0.579, 0.768), color = Color(165, 125, 95, 255), surpresslightning = false, material = "models/props_wasteland/wood_fence01a", skin = 0, bodygroup = {} },         ["1"] = { type = "Model", model = "models/props_c17/signpole001.mdl", bone = "ValveBiped.Gun", rel = "weapon_base", pos = Vector(0, 0, 5.204), angle = Angle(0, 0, 0), size = Vector(0.008, 0.008, 0.008), color = Color(255, 255, 255, 0), surpresslightning = false, material = "", skin = 0, bodygroup = {} },         ["weapon_base"] = { type = "Model", model = "", bone = "root", rel = "", pos = Vector(-0.188, 1.174, -16.909), angle = Angle(-180, 0, 0), size = Vector(0.5, 0.5, 0.5), color = Color(255, 255, 255, 255), surpresslightning = false, material = "", skin = 0, bodygroup = {} },         ["stock"] = { type = "Model", model = "models/gibs/hgibs_spine.mdl", bone = "Weapon_Controller", rel = "1", pos = Vector(-0.153, -0.16, -28.344), angle = Angle(-180, 0, 175.468), size = Vector(0.806, 0.579, 0.768), color = Color(165, 125, 95, 255), surpresslightning = false, material = "models/props_wasteland/wood_fence01a", skin = 0, bodygroup = {} },         ["2++++++"] = { type = "Model", model = "models/hunter/tubes/tube1x1x2.mdl", bone = "ValveBiped.Bip01_Spine4", rel = "1", pos = Vector(0.754, -0.945, -19.591), angle = Angle(0, 0, 0), size = Vector(0.032, 0.032, 0.028), color = Color(255, 255, 255, 255), surpresslightning = false, material = "models/gibs/metalgibs/metal_gibs", skin = 0, bodygroup = {} },         ["2++++++++++++++++++"] = { type = "Model", model = "models/hunter/tubes/tube4x4x05d.mdl", bone = "ValveBiped.Bip01_Spine4", rel = "1", pos = Vector(0, -0.06, -22.382), angle = Angle(148.22, 90, -89.837), size = Vector(0.008, 0.008, -0.01), color = Color(255, 255, 255, 255), surpresslightning = false, material = "models/gibs/metalgibs/metal_gibs", skin = 0, bodygroup = {} },         ["3+++++"] = { type = "Model", model = "models/hunter/misc/shell2x2c.mdl", bone = "ValveBiped.Bip01_Spine4", rel = "1", pos = Vector(0, -0.301, -19.479), angle = Angle(0, 90, 180), size = Vector(0.026, 0.028, 0.045), color = Color(255, 255, 255, 255), surpresslightning = false, material = "models/gibs/metalgibs/metal_gibs", skin = 0, bodygroup = {} },         ["lock"] = { type = "Model", model = "models/props_c17/TrapPropeller_Lever.mdl", bone = "Weapon_Controller", rel = "lock_hinge", pos = Vector(0, -0.438, 0.317), angle = Angle(0, 0, 0), size = Vector(0.195, 0.09, 0.118), color = Color(255, 255, 255, 255), surpresslightning = false, material = "models/gibs/metalgibs/metal_gibs", skin = 0, bodygroup = {} },         ["2++++++++++"] = { type = "Model", model = "models/hunter/tubes/tubebend2x2x90.mdl", bone = "ValveBiped.Bip01_Spine4", rel = "1", pos = Vector(0.754, -0.945, -19.591), angle = Angle(180, 90, 0), size = Vector(0.016, 0.016, 0.027), color = Color(255, 255, 255, 255), surpresslightning = false, material = "models/gibs/metalgibs/metal_gibs", skin = 0, bodygroup = {} },         ["stock++"] = { type = "Model", model = "models/gibs/hgibs_spine.mdl", bone = "Weapon_Controller", rel = "1", pos = Vector(-0.003, 0.762, -29.563), angle = Angle(-180, 0, -174.706), size = Vector(0.806, 0.541, 0.748), color = Color(165, 125, 95, 255), surpresslightning = false, material = "models/props_wasteland/wood_fence01a", skin = 0, bodygroup = {} },         ["2+++++"] = { type = "Model", model = "models/props_phx/construct/wood/wood_boardx1.mdl", bone = "ValveBiped.Bip01_Spine4", rel = "break", pos = Vector(0, -1.509, -14.157), angle = Angle(90, -90, 0), size = Vector(0.104, 0.09, 0.104), color = Color(255, 255, 255, 255), surpresslightning = false, material = "models/gibs/metalgibs/metal_gibs", skin = 0, bodygroup = {} },         ["2++++++++"] = { type = "Model", model = "models/props_phx/construct/wood/wood_boardx1.mdl", bone = "ValveBiped.Bip01_Spine4", rel = "1", pos = Vector(0, -1.509, -18.338), angle = Angle(90, -90, 0), size = Vector(0.059, 0.104, 0.104), color = Color(255, 255, 255, 255), surpresslightning = false, material = "models/gibs/metalgibs/metal_gibs", skin = 0, bodygroup = {} },         ["2++++++++++++"] = { type = "Model", model = "models/props_phx/construct/wood/wood_boardx1.mdl", bone = "ValveBiped.Bip01_Spine4", rel = "1", pos = Vector(0, -0.137, -19.851), angle = Angle(90, -90, 0), size = Vector(0.119, 0.189, 0.495), color = Color(255, 255, 255, 255), surpresslightning = false, material = "models/gibs/metalgibs/metal_gibs", skin = 0, bodygroup = {} },         ["shell_left"] = { type = "Model", model = "models/weapons/shotgun_shell.mdl", bone = "root", rel = "2", pos = Vector(0.658, 0.018, 2.894), angle = Angle(90.955, 0, 0), size = Vector(0.884, 0.884, 0.884), color = Color(255, 255, 255, 255), surpresslightning = false, material = "", skin = 0, bodygroup = {} },         ["shell_left_ej"] = { type = "Model", model = "models/weapons/shotgun_shell.mdl", bone = "root", rel = "2", pos = Vector(0.658, 0.018, 2.894), angle = Angle(90.955, 0, 0), size = Vector(0.884, 0.884, 0.884), color = Color(255, 255, 255, 255), surpresslightning = false, material = "", skin = 0, bodygroup = {} },         ["2+"] = { type = "Model", model = "models/hunter/tubes/tube1x1x2.mdl", bone = "ValveBiped.Bip01_Spine4", rel = "break", pos = Vector(-0.755, -0.945, -16.82), angle = Angle(0, 0, 0), size = Vector(0.032, 0.032, 0.28), color = Color(255, 255, 255, 255), surpresslightning = false, material = "models/gibs/metalgibs/metal_gibs", skin = 0, bodygroup = {} },         ["muzzle"] = { type = "Model", model = "models/props_junk/PopCan01a.mdl", bone = "root", rel = "break", pos = Vector(0, -1.03, 9.993), angle = Angle(0, 0, 0), size = Vector(0.5, 0.5, 0.5), color = Color(255, 255, 255, 0), surpresslightning = false, material = "", skin = 0, bodygroup = {} },          ["shell_extra"] = { type = "Model", model = "models/weapons/shotgun_shell.mdl", bone = "ValveBiped.Bip01_L_Hand", rel = "", pos = Vector(5.361, 1.302, -1.377), angle = Angle(6.383, -180, 0), size = Vector(0.883, 0.883, 0.883), color = Color(255, 255, 255, 255), surpresslightning = false, material = "", skin = 0, bodygroup = {}, temp = true },     }      SWEP.WElements = {         ["lock_hinge"] = { type = "Model", model = "models/props_junk/PopCan01a.mdl", bone = "ValveBiped.Bip01_R_Hand", rel = "1", pos = Vector(0, -1.548, -21.966), angle = Angle(0, 0, -90), size = Vector(0.118, 0.118, 0.118), color = Color(255, 255, 255, 255), surpresslightning = false, material = "models/gibs/metalgibs/metal_gibs", skin = 0, bodygroup = {} },         ["3+"] = { type = "Model", model = "models/hunter/misc/shell2x2c.mdl", bone = "ValveBiped.Bip01_R_Hand", rel = "break", pos = Vector(0, -0.301, -7.45), angle = Angle(-0.5, 90, 0), size = Vector(0.035, 0.028, 0.123), color = Color(165, 125, 100, 255), surpresslightning = false, material = "models/props_wasteland/wood_fence01a", skin = 0, bodygroup = {} },         ["break"] = { type = "Model", model = "", bone = "ValveBiped.Bip01_R_Hand", rel = "hinge", pos = Vector(0, -0.23, 15.093), angle = Angle(0, 0, 0), size = Vector(0.5, 0.5, 0.5), color = Color(255, 255, 255, 255), surpresslightning = false, material = "", skin = 0, bodygroup = {} },         ["fake_hinge"] = { type = "Model", model = "models/props_junk/PopCan01a.mdl", bone = "ValveBiped.Bip01_R_Hand", rel = "hinge", pos = Vector(0, 0, 0), angle = Angle(-90, 0, 0), size = Vector(0.308, 0.308, 0.435), color = Color(255, 255, 255, 255), surpresslightning = false, material = "models/gibs/metalgibs/metal_gibs", skin = 0, bodygroup = {} },         ["3+++"] = { type = "Model", model = "models/hunter/tubes/circle2x2c.mdl", bone = "ValveBiped.Bip01_R_Hand", rel = "break", pos = Vector(0, -0.301, -14.176), angle = Angle(0, 90, 0), size = Vector(0.026, 0.028, 0.591), color = Color(255, 255, 255, 255), surpresslightning = false, material = "models/gibs/metalgibs/metal_gibs", skin = 0, bodygroup = {} },         ["lock"] = { type = "Model", model = "models/props_c17/TrapPropeller_Lever.mdl", bone = "ValveBiped.Bip01_R_Hand", rel = "lock_hinge", pos = Vector(0, -0.438, 0.317), angle = Angle(0, 0, 0), size = Vector(0.195, 0.09, 0.118), color = Color(255, 255, 255, 255), surpresslightning = false, material = "models/gibs/metalgibs/metal_gibs", skin = 0, bodygroup = {} },         ["2+++++++++++++++++"] = { type = "Model", model = "models/hunter/tubes/tube4x4x025c.mdl", bone = "ValveBiped.Bip01_R_Hand", rel = "1", pos = Vector(-0.362, -0.249, -22.799), angle = Angle(-178.749, -90, -90), size = Vector(0.009, 0.013, 0.043), color = Color(255, 255, 255, 255), surpresslightning = false, material = "models/gibs/metalgibs/metal_gibs", skin = 0, bodygroup = {} },         ["2++"] = { type = "Model", model = "models/props_phx/construct/wood/wood_boardx1.mdl", bone = "ValveBiped.Bip01_R_Hand", rel = "break", pos = Vector(0, -1.423, -3.411), angle = Angle(90, -90, 0), size = Vector(0.354, 0.101, 0.097), color = Color(255, 255, 255, 255), surpresslightning = false, material = "models/gibs/metalgibs/metal_gibs", skin = 0, bodygroup = {} },         ["2+++++"] = { type = "Model", model = "models/props_phx/construct/wood/wood_boardx1.mdl", bone = "ValveBiped.Bip01_R_Hand", rel = "break", pos = Vector(0, -1.509, -14.157), angle = Angle(90, -90, 0), size = Vector(0.104, 0.09, 0.104), color = Color(255, 255, 255, 255), surpresslightning = false, material = "models/gibs/metalgibs/metal_gibs", skin = 0, bodygroup = {} },         ["2"] = { type = "Model", model = "models/hunter/tubes/tube1x1x2.mdl", bone = "ValveBiped.Bip01_R_Hand", rel = "break", pos = Vector(0.754, -0.945, -16.82), angle = Angle(0, 0, 0), size = Vector(0.032, 0.032, 0.23), color = Color(255, 255, 255, 255), surpresslightning = false, material = "models/gibs/metalgibs/metal_gibs", skin = 0, bodygroup = {} },         ["1"] = { type = "Model", model = "models/props_c17/signpole001.mdl", bone = "ValveBiped.Bip01_R_Hand", rel = "weapon_base", pos = Vector(0, 0, 5.204), angle = Angle(0, 0, 0), size = Vector(0.008, 0.008, 0.008), color = Color(255, 255, 255, 0), surpresslightning = false, material = "", skin = 0, bodygroup = {} },         ["3"] = { type = "Model", model = "models/hunter/tubes/circle2x2c.mdl", bone = "ValveBiped.Bip01_R_Hand", rel = "break", pos = Vector(0, -0.301, -10.688), angle = Angle(-0.5, 90, 0), size = Vector(0.035, 0.028, 2.177), color = Color(165, 125, 95, 255), surpresslightning = false, material = "models/props_wasteland/wood_fence01a", skin = 0, bodygroup = {} },         ["3++"] = { type = "Model", model = "models/hunter/tubes/circle2x2c.mdl", bone = "ValveBiped.Bip01_R_Hand", rel = "1", pos = Vector(0, -0.301, -17.313), angle = Angle(0, 90, 0), size = Vector(0.026, 0.028, 1.452), color = Color(255, 255, 255, 255), surpresslightning = false, material = "models/gibs/metalgibs/metal_gibs", skin = 0, bodygroup = {} },         ["stock+"] = { type = "Model", model = "models/gibs/hgibs_spine.mdl", bone = "ValveBiped.Bip01_R_Hand", rel = "1", pos = Vector(0.18, -0.16, -28.344), angle = Angle(-180, 0, 175.468), size = Vector(0.806, 0.579, 0.768), color = Color(165, 125, 95, 255), surpresslightning = false, material = "models/props_wasteland/wood_fence01a", skin = 0, bodygroup = {} },         ["hinge"] = { type = "Model", model = "models/props_junk/PopCan01a.mdl", bone = "ValveBiped.Bip01_R_Hand", rel = "weapon_base", pos = Vector(0, 0.234, -9.896), angle = Angle(0, 0, 0), size = Vector(0.009, 0.009, 0.009), color = Color(255, 255, 255, 255), surpresslightning = false, material = "", skin = 0, bodygroup = {} },         ["2+++++++++++"] = { type = "Model", model = "models/hunter/tubes/tubebend2x2x90.mdl", bone = "ValveBiped.Bip01_R_Hand", rel = "1", pos = Vector(-0.755, -0.945, -19.591), angle = Angle(180, -90, 0), size = Vector(0.016, 0.016, 0.027), color = Color(255, 255, 255, 255), surpresslightning = false, material = "models/gibs/metalgibs/metal_gibs", skin = 0, bodygroup = {} },         ["weapon_base"] = { type = "Model", model = "", bone = "ValveBiped.Bip01_R_Hand", rel = "", pos = Vector(23.197, 1.35, -6.52), angle = Angle(0, -90, -105.63), size = Vector(0.5, 0.5, 0.5), color = Color(255, 255, 255, 255), surpresslightning = false, material = "", skin = 0, bodygroup = {} },         ["2++++++"] = { type = "Model", model = "models/hunter/tubes/tube1x1x2.mdl", bone = "ValveBiped.Bip01_R_Hand", rel = "1", pos = Vector(0.754, -0.945, -19.591), angle = Angle(0, 0, 0), size = Vector(0.032, 0.032, 0.028), color = Color(255, 255, 255, 255), surpresslightning = false, material = "models/gibs/metalgibs/metal_gibs", skin = 0, bodygroup = {} },         ["2++++++++++++++++++"] = { type = "Model", model = "models/hunter/tubes/tube4x4x05d.mdl", bone = "ValveBiped.Bip01_R_Hand", rel = "1", pos = Vector(0, -0.06, -22.382), angle = Angle(148.22, 90, -89.837), size = Vector(0.008, 0.008, -0.01), color = Color(255, 255, 255, 255), surpresslightning = false, material = "models/gibs/metalgibs/metal_gibs", skin = 0, bodygroup = {} },         ["stock"] = { type = "Model", model = "models/gibs/hgibs_spine.mdl", bone = "ValveBiped.Bip01_R_Hand", rel = "1", pos = Vector(-0.153, -0.16, -28.344), angle = Angle(-180, 0, 175.468), size = Vector(0.806, 0.579, 0.768), color = Color(165, 125, 95, 255), surpresslightning = false, material = "models/props_wasteland/wood_fence01a", skin = 0, bodygroup = {} },         ["3+++++"] = { type = "Model", model = "models/hunter/misc/shell2x2c.mdl", bone = "ValveBiped.Bip01_R_Hand", rel = "1", pos = Vector(0, -0.301, -19.479), angle = Angle(0, 90, 180), size = Vector(0.026, 0.028, 0.045), color = Color(255, 255, 255, 255), surpresslightning = false, material = "models/gibs/metalgibs/metal_gibs", skin = 0, bodygroup = {} },         ["2++++++++++"] = { type = "Model", model = "models/hunter/tubes/tubebend2x2x90.mdl", bone = "ValveBiped.Bip01_R_Hand", rel = "1", pos = Vector(0.754, -0.945, -19.591), angle = Angle(180, 90, 0), size = Vector(0.016, 0.016, 0.027), color = Color(255, 255, 255, 255), surpresslightning = false, material = "models/gibs/metalgibs/metal_gibs", skin = 0, bodygroup = {} },         ["stock++"] = { type = "Model", model = "models/gibs/hgibs_spine.mdl", bone = "ValveBiped.Bip01_R_Hand", rel = "1", pos = Vector(-0.003, 0.762, -29.563), angle = Angle(-180, 0, -174.706), size = Vector(0.806, 0.541, 0.748), color = Color(165, 125, 95, 255), surpresslightning = false, material = "models/props_wasteland/wood_fence01a", skin = 0, bodygroup = {} },         ["2+++++++++++++"] = { type = "Model", model = "models/props_phx/construct/wood/wood_boardx1.mdl", bone = "ValveBiped.Bip01_R_Hand", rel = "1", pos = Vector(0, -0.134, -23.47), angle = Angle(90, -90, 0), size = Vector(0.045, 0.039, 0.495), color = Color(255, 255, 255, 255), surpresslightning = false, material = "models/gibs/metalgibs/metal_gibs", skin = 0, bodygroup = {} },         ["2++++++++"] = { type = "Model", model = "models/props_phx/construct/wood/wood_boardx1.mdl", bone = "ValveBiped.Bip01_R_Hand", rel = "1", pos = Vector(0, -1.509, -18.338), angle = Angle(90, -90, 0), size = Vector(0.059, 0.104, 0.104), color = Color(255, 255, 255, 255), surpresslightning = false, material = "models/gibs/metalgibs/metal_gibs", skin = 0, bodygroup = {} },         ["2++++++++++++"] = { type = "Model", model = "models/props_phx/construct/wood/wood_boardx1.mdl", bone = "ValveBiped.Bip01_R_Hand", rel = "1", pos = Vector(0, -0.137, -19.851), angle = Angle(90, -90, 0), size = Vector(0.119, 0.189, 0.495), color = Color(255, 255, 255, 255), surpresslightning = false, material = "models/gibs/metalgibs/metal_gibs", skin = 0, bodygroup = {} },         ["2+++++++"] = { type = "Model", model = "models/hunter/tubes/tube1x1x2.mdl", bone = "ValveBiped.Bip01_R_Hand", rel = "1", pos = Vector(-0.755, -0.945, -19.591), angle = Angle(0, 0, 0), size = Vector(0.032, 0.032, 0.028), color = Color(255, 255, 255, 255), surpresslightning = false, material = "models/gibs/metalgibs/metal_gibs", skin = 0, bodygroup = {} },         ["2+"] = { type = "Model", model = "models/hunter/tubes/tube1x1x2.mdl", bone = "ValveBiped.Bip01_R_Hand", rel = "break", pos = Vector(-0.755, -0.945, -16.82), angle = Angle(0, 0, 0), size = Vector(0.032, 0.032, 0.23), color = Color(255, 255, 255, 255), surpresslightning = false, material = "models/gibs/metalgibs/metal_gibs", skin = 0, bodygroup = {} }     }       SWEP.ViewModelBoneMods = {         ["ValveBiped.Bip01_R_Finger42"] = { scale = Vector(1, 1, 1), pos = Vector(0, 0, 0), angle = Angle(0, 17.488, 0) },         ["ValveBiped.Bip01_R_Finger32"] = { scale = Vector(1, 1, 1), pos = Vector(0, 0, 0), angle = Angle(0, 18.513, 0) },         ["ValveBiped.Bip01_R_Finger22"] = { scale = Vector(1, 1, 1), pos = Vector(0, 0, 0), angle = Angle(0, 34.485, 0) },         ["ValveBiped.Bip01_L_Clavicle"] = { scale = Vector(1, 1, 1), pos = Vector(-1.65, 2.423, 0.637), angle = Angle(0, 0, 0) },         ["ValveBiped.Bip01_R_Finger12"] = { scale = Vector(1, 1, 1), pos = Vector(0, 0, 0), angle = Angle(0, 13.687, 0) },          ["ValveBiped.Bip01_L_Finger01"] = { scale = Vector(1, 1, 1), pos = Vector(0, 0, 0), angle = Angle(0, 0, 0), angle_reload = Angle(0, 30.614, 0) },         ["ValveBiped.Bip01_L_Finger02"] = { scale = Vector(1, 1, 1), pos = Vector(0, 0, 0), angle = Angle(0, 0, 0), angle_reload = Angle(0, 59.408, 0) },         ["ValveBiped.Bip01_L_Finger1"] = { scale = Vector(1, 1, 1), pos = Vector(0, 0, 0), angle = Angle(0, 0, 0), angle_reload = Angle(0, -40.614, 0) },         ["ValveBiped.Bip01_L_Finger11"] = { scale = Vector(1, 1, 1), pos = Vector(0, 0, 0), angle = Angle(0, 0, 0), angle_reload = Angle(0, -40.614, 0) },         ["ValveBiped.Bip01_L_Finger12"] = { scale = Vector(1, 1, 1), pos = Vector(0, 0, 0), angle = Angle(0, 0, 0), angle_reload = Angle(0, -40.614, 0) },         ["ValveBiped.Bip01_L_Forearm"] = { scale = Vector(1, 1, 1), pos = Vector(0, 0, 0), angle = Angle(0, 0, 0), angle_reload = Angle(8.161, 6.723, 15.286) },         ["ValveBiped.Bip01_L_UpperArm"] = { scale = Vector(1, 1, 1), pos = Vector(0, 0, 0), pos_reload = Vector(-3.204, 4.237, 3.52), angle = Angle(0, 0, 0), angle_reload = Angle(-9.327, -11.531, 15.85) },         ["ValveBiped.Bip01_L_Hand"] = { scale = Vector(1, 1, 1), pos = Vector(0, 0, 0), angle = Angle(0, 0, 0), angle_reload = Angle(3.936, -1.608, -52.186) },     }      for k, v in pairs( SWEP.VElements ) do         if v and string.find( k, "shell" ) then             SWEP.VElements[ k ].def_pos = Vector( v.pos.x, v.pos.y, v.pos.z )             SWEP.VElements[ k ].def_angle = Angle( v.angle.p, v.angle.y, v.angle.r )             if string.find( k, "_ej" ) or string.find( k, "shell_extra" ) then                 SWEP.VElements[ k ].hide = true             else                 SWEP.VElements[ k ].hide = false             end         end     end      for i=1, 12 do         SWEP.VElements["shell_extra"..i] = { type = "Model", model = "models/weapons/shotgun_shell.mdl", bone = "ValveBiped.Bip01_L_Hand", rel = "shell_extra", pos = VectorRand(), angle = VectorRand():Angle(), size = Vector(0.883, 0.883, 0.883), color = Color(255, 255, 255, 255), surpresslightning = false, material = "", skin = 0, bodygroup = {}, temp = true, hide = true }     end      SWEP.HUD3DBone = "root"     SWEP.HUD3DPos = Vector(-2.458, -0.018, -1.619)     SWEP.HUD3DAng = Angle(0, 0, 0)     SWEP.HUD3DScale = 0.015      SWEP.ReloadPos = Vector(-4.68, -3.964, -3.161)     SWEP.ReloadAng = Vector(23.819, 0, -13.283) end  SWEP.ShowViewModel = false SWEP.ShowWorldModel = false  SWEP.Base = "weapon_zs_baseshotgun" local BaseClass = baseclass.Get("weapon_zs_baseshotgun")  SWEP.HoldType = "shotgun"  SWEP.ViewModel = "models/weapons/x_annabelle.mdl" SWEP.WorldModel = "models/weapons/w_shotgun.mdl" SWEP.UseHands = true  SWEP.CSMuzzleFlashes = false  SWEP.Primary.Sound = Sound("weapons/zs_doublebarrel/single_fire.ogg") SWEP.Primary.SoundDouble = Sound("weapons/zs_doublebarrel/double_fire.ogg") SWEP.Primary.Damage = 14.2 SWEP.Primary.NumShots = 8 SWEP.Primary.Delay = 0.4 SWEP.Primary.ClipSize = 2 SWEP.Primary.Automatic = false SWEP.Primary.Ammo = "buckshot" GAMEMODE:SetupDefaultClip(SWEP.Primary)  SWEP.ReloadSound = Sound("weapons/zs_doublebarrel/breakOpen.ogg") SWEP.ReloadFinishSound = Sound("weapons/zs_doublebarrel/breakClose.ogg") SWEP.ReloadPlugSound = Sound("weapons/zs_doublebarrel/shell_in.ogg")  SWEP.ConeMax = 7.1 SWEP.ConeMin = 6.7 SWEP.Recoil = 4  SWEP.WalkSpeed = SPEED_SLOWER SWEP.ReloadSpeed = 0.7 SWEP.ReloadDelay = 0.39  SWEP.FireAnimSpeed = 0.65  SWEP.Tier = 4  SWEP.DryFireSound = Sound("weapons/shotgun/shotgun_empty.wav")  SWEP.AmmoTrinketOverride = 2  SWEP.DamageScaling = 1.15  SWEP.GibThreshold = 10.5  SWEP.SpreadPattern = {     {0, 0.5},     {90, 0.25},     {180, 0.5},     {270, 0.25},     {45, 0.65},     {45 + 90, 0.65},     {45 + 180, 0.65},     {45 + 270, 0.65},     {0, 0.85},     {90, 0.4},     {180, 0.85},     {270, 0.4},     {45, 0.35},     {45 + 90, 0.35},     {45 + 180, 0.35},     {45 + 270, 0.35} }  GAMEMODE:AttachWeaponModifier(SWEP, WEAPON_MODIFIER_MAX_SPREAD, -0.8, 1) GAMEMODE:AttachWeaponModifier(SWEP, WEAPON_MODIFIER_MIN_SPREAD, -0.7, 1) GAMEMODE:AttachWeaponModifier(SWEP, WEAPON_MODIFIER_RELOAD_SPEED, 0.055, 1) GAMEMODE:AddNewRemantleBranch(SWEP, 1, "'Eternal' Slug Gun", "Single accurate slug round, less total damage", function(wept)     wept.Primary.Damage = wept.Primary.Damage * 5.65     wept.Primary.NumShots = 1     wept.ConeMin = wept.ConeMin * 0.24     wept.ConeMax = wept.ConeMax * 0.35     wept.AmmoTrinketOverride = nil     wept.ResistanceAmmoAs = "357"     wept.GibThreshold = nil      wept.SpreadPattern = nil end).CollectiveName = "Slug"  SWEP.ReloadStartActivity = ACT_SHOTGUN_RELOAD_START SWEP.ReloadActivity = ACT_VM_RELOAD  local math_approach = math.Approach local math_random = math.random  function SWEP:StartReloading()     local delay = self:GetReloadDelay()     self:SetDTFloat(3, CurTime() + delay)     self:SetDTBool(2, true)       self:SetNextPrimaryFire(CurTime() + math.max(self.Primary.Delay, delay))      self:GetOwner():DoReloadEvent()      if self.ReloadStartActivity then         self:SendWeaponAnim(self.ReloadStartActivity)                   self:SetNextPlugSound(CurTime() + delay * 0.9)         self:SetNextStateChange(CurTime() + delay * 0.8)     end      if CLIENT then         self:DoShellEjection()          if self:Clip1() == 1 and math_random( 1000 ) == 1 then             self.Wtf = true         end      end      self:EmitSound(self.ReloadSound) end  function SWEP.BulletCallback(attacker, tr, dmginfo)  local ent = tr.Entity   if SERVER and ent and ent:IsValidLivingZombie() then  dmginfo:SetDamageForce(attacker:GetUp() * 7000 + attacker:GetForward() * 25000)  end end  function SWEP:StopReloading()     self:SetDTFloat(3, 0)     self:SetDTBool(2, false)     self:SetNextPrimaryFire(CurTime() + self.Primary.Delay * 1.8)     self:SetNextStateChange(CurTime())      if self:Clip1() > 0 then         self:EmitSound(self.ReloadFinishSound)         self:SendWeaponAnim(ACT_SHOTGUN_RELOAD_FINISH)               end end  function SWEP:Think()     if self:ShouldDoReload() then         self:DoReload()     end      if self:GetNextPlugSound() ~= 0 and CurTime() > self:GetNextPlugSound() then         if self:Clip1() ~= 2 then             self:EmitSound(self.ReloadPlugSound)         end         self:SetNextPlugSound(0)     end      if self:GetNextStateChange() ~= 0 and CurTime() > self:GetNextStateChange() then         self:SetSawnoffState((self:GetSawnoffState() + 1) % 2)         self:SetNextStateChange(0)     end      self:NextThink(CurTime())     return true end  function SWEP:DoReload()     if not self:CanReload() then         self:StopReloading()         return     end      local delay = self:GetReloadDelay()     if self.ReloadActivity then         self:SendWeaponAnim(self.ReloadActivity)         self:ProcessReloadAnim()         self:SetNextPlugSound(CurTime() + delay * 0.9)     end                        local am = math.min( 2 - self:Clip1(), self:GetOwner():GetAmmoCount(self.Primary.Ammo) )      if CLIENT then         self:DoShellInsertion( am == 2 )     end      self:GetOwner():RemoveAmmo( am, self.Primary.Ammo, false)     self:SetClip1(self:Clip1() + am)      self:SetDTBool(2, false)     self:SetDTFloat(3, CurTime() + delay)      self:SetNextPrimaryFire(CurTime() + math.max(self.Primary.Delay, delay)) end  function SWEP:CanPrimaryAttack()     if self:GetOwner():IsHolding() or self:GetOwner():GetBarricadeGhosting() then return false end      if self:Clip1() <= 0 then         self:EmitSound("weapons/shotgun/shotgun_empty.wav")         self:SetNextPrimaryFire(CurTime() + 0.25)          return false     end      return self:GetNextPrimaryFire() <= CurTime() end  function SWEP:GetCone()     return BaseClass.GetCone(self) * (self.RequiredClip == 2 and 1 or 0.85) end  function SWEP:PrimaryAttack()     if not self:CanPrimaryAttack() then return end     self.BaseClass.PrimaryAttack(self)      if CLIENT and IsFirstTimePredicted() and not GAMEMODE:UseOverTheShoulder() and self.VElements and self.VElements["muzzle"] then         local e = EffectData()             e:SetOrigin( self.VElements["muzzle"].modelEnt:GetPos() )             e:SetAngles( self.Owner:GetAimVector():Angle() )             e:SetScale( self.RequiredClip == 2 and 1.5 or 1 )         util.Effect( "MuzzleEffect", e )     end end  function SWEP:SecondaryAttack()     if not self:CanPrimaryAttack() then return end      local multiplier = self:Clip1()      self.Primary.NumShots = self.Primary.NumShots * multiplier     self.RequiredClip = multiplier     self.OldEmitFireSound = self.EmitFireSound     self.EmitFireSound = self.EmitFireSoundDouble     self.Recoil = self.Recoil * 2.2      self:PrimaryAttack()      self.Recoil = self.Recoil / 2.2     self.Primary.NumShots = self.Primary.NumShots / multiplier     self.RequiredClip = 1     self.EmitFireSound = self.OldEmitFireSound end  function SWEP:EmitFireSound()     self:EmitSound(self.Primary.SoundDouble, 75, math.random(122, 126), 0.3, CHAN_WEAPON + 20)     self:EmitSound(self.Primary.Sound, 75, math.random(122, 126), 1, CHAN_WEAPON + 21)     self:EmitSound("weapons/zs_dds/zs_dd.ogg", 75, math.random(115, 120), 0.4, CHAN_WEAPON + 1) end  function SWEP:EmitFireSoundDouble()     if self:Clip1() == 2 then         self:EmitSound(self.Primary.SoundDouble, 75, math.random(90, 96), 0.7, CHAN_WEAPON + 20)         self:EmitSound("weapons/zs_dds/zs_dd.ogg", 75, math.random(99, 102), 0.3, CHAN_WEAPON + 1)     else         self:OldEmitFireSound()     end end  function SWEP:GetNextPlugSound()     return self:GetDTFloat(10) end  function SWEP:SetNextPlugSound(nexttime)     self:SetDTFloat(10, nexttime) end  function SWEP:GetNextStateChange()     return self:GetDTFloat(11) end  function SWEP:SetNextStateChange(nexttime)     self:SetDTFloat(11, nexttime) end  function SWEP:GetSawnoffState()     return self:GetDTInt(10) end  function SWEP:SetSawnoffState(state)     self:SetDTInt(10, state) end  if CLIENT then  local lerp_vector = LerpVector local lerp_angle = LerpAngle local vec_right = Vector( 0, 1, 0 ) local vec_up = vector_up      function SWEP:DoShellEjection()         self.ShellEjectTime = CurTime() + 0.3          if not self.ShellEjectionTable then             self.ShellEjectionTable = {}         end          self.ShellEjectionTable[1] = { pos = VectorRand() * math_random( -6, 6 ), ang = VectorRand():Angle() * math_random( -2, 2 ) }         self.ShellEjectionTable[2] = { pos = VectorRand() * math_random( -6, 6 ), ang = VectorRand():Angle() * math_random( -2, 2 ) }      end      function SWEP:DoShellInsertion( both )         if both or self:Clip1() == 0 then             self.ShellInsertTimeL = CurTime() + 0.3         end         if both or self:Clip1() == 1 then             self.ShellInsertTimeR = CurTime() + 0.3         end     end      local ghostlerp = 0     local reloadlerp = 0     function SWEP:CalcViewModelView(vm, oldpos, oldang, pos, ang)         if self:GetOwner():GetBarricadeGhosting() or self:GetSawnoffState() == 1 then             ghostlerp = math.min(1, ghostlerp + FrameTime() * 0.4)         elseif ghostlerp > 0 then             ghostlerp = math.max(0, ghostlerp - FrameTime() * 5)         end          if self:IsReloading() then             reloadlerp = math.min(1, reloadlerp + FrameTime() * 2)         elseif reloadlerp > 0 then             reloadlerp = math.max(0, reloadlerp - FrameTime() * 3)         end          self.ReloadLerp = reloadlerp          if reloadlerp > 0 then             local Offset = self.ReloadPos             local Ang = self.ReloadAng             if Offset and Ang then                 ang = Angle(ang.p, ang.y, ang.r)                 ang:RotateAroundAxis(ang:Right(), Ang.x * reloadlerp)                 ang:RotateAroundAxis(ang:Up(), Ang.y * reloadlerp)                 ang:RotateAroundAxis(ang:Forward(), Ang.z * reloadlerp)                  pos = pos + Offset.x * reloadlerp * ang:Right() + Offset.y * reloadlerp * ang:Forward() + Offset.z * reloadlerp * ang:Up()             end         end          if ghostlerp > 0 then             ang:RotateAroundAxis(ang:Right(), -10 * ghostlerp)         end          return pos, ang     end      function SWEP:ViewModelDrawn()          if self.VElements then                             self.ShellEjectTime = self.ShellEjectTime or 0             self.ShellInsertTimeL = self.ShellInsertTimeL or 0             self.ShellInsertTimeR = self.ShellInsertTimeR or 0              local shell_l, shell_r = self.VElements["shell_left"], self.VElements["shell_right"]             local shell_l_ej, shell_r_ej = self.VElements["shell_left_ej"], self.VElements["shell_right_ej"]              local shell_delta_ej = 0             local shell_delta_l = 0             local shell_delta_r = 0              local shell_delta2_l = 0             local shell_delta2_r = 0              if self.ShellEjectTime ~= 0 and self.ShellEjectionTable then                  if self.ShellEjectTime >= CurTime() then                     shell_delta_ej = math.Clamp( 1 - ( self.ShellEjectTime - CurTime() ) / 0.3, 0, 1 )                     shell_delta_ej = shell_delta_ej ^ 1.5                      shell_r_ej.pos = lerp_vector( shell_delta_ej, shell_r_ej.def_pos, shell_r_ej.def_pos + vec_up * -25 + vec_right * ( shell_delta_ej * 20 ) + self.ShellEjectionTable[2].pos * shell_delta_ej )                     shell_r_ej.angle = lerp_angle( shell_delta_ej, shell_r_ej.def_angle, shell_r_ej.def_angle + self.ShellEjectionTable[2].ang * shell_delta_ej )                     shell_r_ej.hide = false                     shell_r.hide = true                      if self:Clip1() == 0 then                         shell_l_ej.pos = lerp_vector( shell_delta_ej, shell_l_ej.def_pos, shell_l_ej.def_pos + vec_up * -22 + vec_right * ( shell_delta_ej * 20 ) + self.ShellEjectionTable[1].pos * shell_delta_ej )                         shell_l_ej.angle = lerp_angle( shell_delta_ej, shell_l_ej.def_angle, shell_l_ej.def_angle + self.ShellEjectionTable[1].ang * shell_delta_ej )                         shell_l_ej.hide = false                         shell_l.hide = true                     end                  else                     self.ShellEjectTime = 0                      shell_l_ej.hide = true                     shell_r_ej.hide = true                 end             end               if self.ShellInsertTimeL ~= 0 then                 if self.ShellInsertTimeL >= CurTime() then                     shell_delta_l = math.Clamp( 1 - ( self.ShellInsertTimeL - CurTime() ) / 0.3, 0, 1 )                     shell_delta2_l = shell_delta_l                     shell_delta_l = shell_delta_l ^ 1.5                      shell_l.pos = lerp_vector( shell_delta_l, shell_l.def_pos + vec_up * -2.2, shell_l.def_pos )                      if shell_delta_l >= 0.1 then                         shell_l.hide = false                     end                  else                     self.ShellInsertTimeL = 0                 end             end              if self.ShellInsertTimeR ~= 0 then                 if self.ShellInsertTimeR >= CurTime() then                     shell_delta_r = math.Clamp( 1 - ( self.ShellInsertTimeR - CurTime() ) / 0.3, 0, 1 )                     shell_delta2_r = shell_delta_r                     shell_delta_r = shell_delta_r ^ 1.5                      shell_r.pos = lerp_vector( shell_delta_r, shell_r.def_pos + vec_up * -2.2, shell_r.def_pos )                      if shell_delta_r >= 0.1 then                         shell_r.hide = false                          if self.Wtf then                             local e = EffectData()                             for k, v in pairs( self.VElements ) do                                 if v and v.temp then                                     if v.modelEnt then                                         e:SetOrigin( v.modelEnt:GetPos() )                                         e:SetAngles( v.modelEnt:GetAngles() )                                         e:SetEntity( self )                                         util.Effect( "ShotgunShellEject", e )                                     end                                     v.hide = true                                 end                             end                             self.Wtf = false                         end                      end                 else                     self.ShellInsertTimeR = 0                 end             end              if self.Wtf then                 for k, v in pairs( self.VElements ) do                     if v and v.temp then                         v.hide = false                     end                 end             end               local ang = self.VElements["hinge"].angle             ang.roll = math_approach(ang.roll, self:IsReloading() and 55 or 0, RealFrameTime() * 200)              ang = self.VElements["lock_hinge"].angle             ang.pitch = math_approach(ang.pitch, self:IsReloading() and 45 or 0, RealFrameTime() * 200)              if self.ReloadLerp and self.ViewModelBoneMods then                 for k, v in pairs( self.ViewModelBoneMods ) do                     if v and v.pos_reload then                         v.pos = v.pos_reload * self.ReloadLerp                     end                     if v and v.angle_reload then                         v.angle = v.angle_reload * self.ReloadLerp                     end                 end             end              if self.ViewModelBoneMods then                 local arm = self.ViewModelBoneMods["ValveBiped.Bip01_L_UpperArm"]                  if shell_delta2_l > 0 then                      if shell_delta2_l >= 0.7 then                         shell_delta2_l = 1 - shell_delta2_l                     end                      shell_delta2_l = math.Clamp( shell_delta2_l * 2, 0, 1 )                      arm.angle.y = arm.angle.y + 3.5 * shell_delta2_l                  end                  if shell_delta2_r > 0 then                      if shell_delta2_r >= 0.7 then                         shell_delta2_r = 1 - shell_delta2_r                     end                      shell_delta2_r = math.Clamp( shell_delta2_r * 2, 0, 1 )                      arm.angle.y = arm.angle.y + 3.5 * shell_delta2_r                     arm.pos.y = arm.pos.y - 3.2 * shell_delta2_r                  end              end          end          self:SCKViewModel()      end    end 