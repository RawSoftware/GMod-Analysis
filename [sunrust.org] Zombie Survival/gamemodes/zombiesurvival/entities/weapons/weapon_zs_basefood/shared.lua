SWEP.Base = "weapon_zs_basemelee"  SWEP.PrintName = "Food" SWEP.Slot = 4 SWEP.SlotPos = 0  SWEP.ViewModel = "models/weapons/c_grenade.mdl" SWEP.WorldModel = "models/weapons/w_crowbar.mdl" SWEP.UseHands = true  SWEP.HoldType = "slam" SWEP.SwingHoldType = "camera"  SWEP.Primary.ClipSize = 1 SWEP.Primary.Automatic = false SWEP.Primary.Ammo = "watermelon" SWEP.Primary.Delay = 1 SWEP.Primary.DefaultClip = 1  SWEP.FoodHealth = 15 SWEP.FoodEatTime = 4 SWEP.EatViewAngles = Angle(80, 0, 15) SWEP.EatViewOffset = Vector(-8, -40, 0)  SWEP.AmmoIfHas = true SWEP.NoPickupIfHas = true SWEP.NoMagazine = true  SWEP.DroppedColorModulation = Color(1, 0, 1)  SWEP.NeedToPlayEatSound = true SWEP.SugarRushFood = false  SWEP.WalkSpeed = SPEED_NORMAL  AccessorFuncDT(SWEP, "EatEndTime", "Float", 0) AccessorFuncDT(SWEP, "EatStartTime", "Float", 1)  SWEP.Weight = 1  function SWEP:CanEat()  local owner = self:GetOwner()   if owner:GetStatus("debuff_sickness") or owner:GetStatus("debuff_waste") then return false end   if owner:IsSkillActive(SKILL_SUGARRUSH) or owner:IsSkillActive(SKILL_VAPORS) then  return true  end   if owner:IsSkillActive(SKILL_GLUTTON) then  return owner:GetBloodArmor() < owner:GetBloodArmorMax() + (40 * owner.MaxBloodArmorMul)  end   return owner:Health() < owner:GetMaxHealth() end  function SWEP:PrimaryAttack()  if self:GetEatEndTime() == 0 and self:CanEat() then  self:SetEatStartTime(CurTime())  self:SetEatEndTime(CurTime() + self:GetFoodEatTime())  end end  function SWEP:SecondaryAttack()  if not self:CanPrimaryAttack() then return end  self:SetNextPrimaryFire(CurTime() + self.Primary.Delay)   if CLIENT and IsFirstTimePredicted() then  MySelf:ConCommand("zsgiveweapon", lockon)  end end  function SWEP:Reload()  if not self:CanPrimaryAttack() then return end  self:SetNextPrimaryFire(CurTime() + self.Primary.Delay)   local owner = self:GetOwner()   if owner:HasInventoryItem("trinket_processor") then  owner:EmitSound("weapons/bugbait/bugbait_squeeze1.wav", 65, 150)   if SERVER then             local medical_ammo = self.FoodHealth * 2 * (owner.FoodProcessMul or 1)  owner:GiveAmmo(medical_ammo, "Battery")              net.Start("zs_ammopickup")                 net.WriteUInt(medical_ammo, 16)                 net.WriteString("battery")             net.Send(owner)              owner:RemoveAmmo(99, self.Primary.Ammo)  owner:StripWeapon(self:GetClass())  end  end end  function SWEP:Think()  local owner = self:GetOwner()  local vapors = owner:IsSkillActive(SKILL_VAPORS)  local glutton = owner:IsSkillActive(SKILL_GLUTTON)   self.HasMedicalAura = vapors  self.HasMedicalAuraBlood = vapors and glutton      local eat_end = self:GetEatEndTime()  if eat_end > 0 then  local time = CurTime()   if time <= eat_end and math.cos(12 * math.pi * (time - self:GetEatStartTime()) / self:GetFoodEatTime()) < 0 then    if self.NeedToPlayEatSound then  self.NeedToPlayEatSound = false  local snd  if self.FoodIsLiquid then  snd = "zombiesurvival/drink"..math.random(3)..".ogg"  else  snd = "zombiesurvival/eat1.ogg"  end  self:EmitSound(snd, 60, math.random(90, 110))  end  else  self.NeedToPlayEatSound = true  end          local cant_finish = owner:GetStatus("debuff_sickness") or owner:GetStatus("debuff_waste")  if time >= eat_end and not cant_finish then  self:SetEatEndTime(0)   if SERVER then  self:Eat()   return  end  end   if not owner:IsValid() then return end   if glutton or owner:IsSkillActive(SKILL_SUGARRUSH) or vapors then return end   if owner:Health() >= owner:GetMaxHealth() then  self:SetEatEndTime(0)  end  end end  function SWEP:Holster()  self:SetEatStartTime(0)  self:SetEatEndTime(0)   return true end  function SWEP:Deploy()  gamemode.Call("WeaponDeployed", self:GetOwner(), self)  return true end  function SWEP:GetFoodEatTime()  return self.FoodEatTime * (self:GetOwner():IsValid() and self:GetOwner().FoodEatTimeMul or 1) end 