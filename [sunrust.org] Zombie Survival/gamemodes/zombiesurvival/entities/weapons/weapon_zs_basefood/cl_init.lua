include("shared.lua")  SWEP.ViewModelFOV = 60 SWEP.ViewModelFlip = false  SWEP.ShowViewModel = false SWEP.ShowWorldModel = false  function SWEP:GetViewModelPosition(pos, ang)  local eattime = self:GetEatEndTime()  if eattime == 0 then return end   local delta = math.Clamp((CurTime() - self:GetEatStartTime()) / self:GetFoodEatTime(), 0, 1)  if delta > 0 then  local lerp = math.sin(6 * math.pi * delta)  lerp = math.abs(lerp)   local Offset = self.EatViewOffset   if self.EatViewAngles then  ang = Angle(ang.p, ang.y, ang.r)  ang:RotateAroundAxis(ang:Right(), self.EatViewAngles.x * lerp)  ang:RotateAroundAxis(ang:Up(), self.EatViewAngles.y * lerp)  ang:RotateAroundAxis(ang:Forward(), self.EatViewAngles.z * lerp)  end   pos = pos + Offset.x * lerp * ang:Right() + Offset.y * lerp * ang:Forward() + Offset.z * lerp * ang:Up()  end   return pos, ang end  function SWEP:DrawHUD()     if GetConVar("crosshair"):GetInt() ~= 1 then return end     self:DrawCrosshairDot()      if GAMEMODE.CooldownRingDisplayFood then         self:DrawCooldowns()     end end  local x = ScrW() * 0.5 local y = ScrH() * 0.5 local ringStart local ringLength local ringSize = 0 local ringSpacing = 0 local ringValDistance local cooldown local cooldownMaximum local color function SWEP:DrawCooldowns()     local screenscale = BetterScreenScale()      ringSize = 4 * GAMEMODE.CooldownRingSize     ringSpacing = 1 + GAMEMODE.CooldownRingSpacing     ringValDistance = (ringSpacing * (ringSize + (50 + ringSize))) * screenscale            ringStart = (ringSpacing * (19 + GAMEMODE.CooldownRingSize)) * screenscale     ringLength = (ringSpacing * (21 + ringSize)) * screenscale     cooldown = self:GetSwingEnd() - CurTime()     cooldownMaximum = self:GetFoodEatTime()     color = GAMEMODE.CooldownRingPrimaryColor      if cooldown ~= 0 and cooldownMaximum ~= 0 and cooldown ~= math.huge and cooldownMaximum ~= math.huge then         self:DrawCooldownRing(x, y, ringStart, ringLength, cooldown, cooldownMaximum, color, ringValDistance * -1 )     end     ringSpacing = ringSpacing * ringSpacing      ringStart = (ringSpacing * (23 + (4 * GAMEMODE.CooldownRingSize))) * screenscale     ringLength = (ringSpacing * (ringSize + (24 + ringSize))) * screenscale     cooldown = self:GetNextPrimaryFire() - CurTime()     cooldownMaximum = self.Primary.Delay     color = GAMEMODE.CooldownRingSecondaryColor      if cooldown ~= 0 and cooldownMaximum ~= 0 and cooldown ~= math.huge and cooldownMaximum ~= math.huge then         self:DrawCooldownRing(x, y, ringStart, ringLength, cooldown, cooldownMaximum, color, ringValDistance )     end end