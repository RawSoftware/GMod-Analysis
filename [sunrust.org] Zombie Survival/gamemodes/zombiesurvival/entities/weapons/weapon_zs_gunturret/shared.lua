SWEP.ViewModel = "models/weapons/v_pistol.mdl" SWEP.WorldModel = "models/Combine_turrets/Floor_turret.mdl"  SWEP.PrintName = "Gun Turret" SWEP.Description = "This automated turret requires constant upkeep of SMG ammo to be useful."  SWEP.AmmoIfHas = true  SWEP.Primary.ClipSize = 1 SWEP.Primary.DefaultClip = 1 SWEP.Primary.Automatic = true SWEP.Primary.Ammo = "thumper" SWEP.Primary.Delay = 2 SWEP.Primary.Damage = 10.8 SWEP.Primary.NumShots = 1  SWEP.Secondary.ClipSize = -1 SWEP.Secondary.DefaultClip = -1 SWEP.Secondary.Automatic = false SWEP.Secondary.Ammo = "none"  SWEP.MaxStock = 5  SWEP.WalkSpeed = SPEED_NORMAL SWEP.FullWalkSpeed = SPEED_SLOWEST  SWEP.GhostStatus = "ghost_gunturret" SWEP.DeployClass = "prop_gunturret" SWEP.Channel = "turret"  SWEP.TurretAmmoType = "smg1" SWEP.TurretAmmoStartAmount = 250  SWEP.TurretFireRate = 0.11 SWEP.TurretSpread = 2  SWEP.NoDeploySpeedChange = true SWEP.AllowQualityWeapons = true  GAMEMODE:AttachWeaponModifier(SWEP, WEAPON_MODIFIER_TURRET_SPREAD, -0.4) GAMEMODE:AttachWeaponModifier(SWEP, WEAPON_MODIFIER_TURRET_DELAY, -0.007, 1) GAMEMODE:AddNewRemantleBranch(SWEP, 1, "Rifle Turret", "Long range turret that uses rifle ammo. Slow fire rate.", function(wept)     wept.Primary.Damage = wept.Primary.Damage * 4.1     wept.TurretAmmoType = "357"     wept.TurretFireRate = wept.TurretFireRate * 14     wept.LockTime = 1.8     wept.TurretSpread = wept.TurretSpread * 0.1     wept.NoLoopSound = true     wept.TurretAmmoStartAmount = 100      wept.TurretFireSound = function(self)         self:EmitSound(")weapons/scout/scout_fire-1.wav")     end      wept.TurretFunc = function(self, ent)         ent:SetDTInt(10, 1)          ent.OverkillFactor = 0.5         ent.ResistanceAmmoAs = "357"     end      GAMEMODE:AddNewDeployableFunction("prop_gunturret", 1, {         Initialize = function(self)             if CLIENT then                 local ent = ClientsideModel("models/weapons/w_snip_scout.mdl")                 if ent:IsValid() then                     ent:SetParent(self)                     ent:SetOwner(self)                     ent:SetLocalPos(vector_origin)                     ent:SetLocalAngles(angle_zero)                     ent:Spawn()                     self.GunAttachment = ent                 end             end              self.MaxAmmo = 200             self.SearchDistance = 1024         end,         DrawTranslucent = function(self)             local nodrawattachs = self:TransAlphaToMe() < 0.4              local atch = self.GunAttachment             if atch and atch:IsValid() then                 local ang = self:GetGunAngles()                  atch:SetPos(self:ShootPos() + ang:Forward() * -2)                 atch:SetAngles(ang)                  atch:SetNoDraw(nodrawattachs or self:GetObjectOwner() == MySelf and self:GetManualControl())             end         end,         OnRemove = function(self)             if self.GunAttachment and self.GunAttachment:IsValid() then                 self.GunAttachment:Remove()             end              self.ScanningSound:Stop()             self.ShootingSound:Stop()         end,     })     end).CollectiveName = "Rifle" branch = GAMEMODE:AddNewRemantleBranch(SWEP, 2, "Buckshot Turret", "Short ranged turret uses shotgun ammo.", function(wept)     wept.Primary.Damage = wept.Primary.Damage * (8.1/12)     wept.Primary.NumShots = 7     wept.TurretAmmoType = "buckshot"     wept.TurretFireRate = wept.TurretFireRate * 6.5     wept.LockTime = 0.9     wept.TurretSpread = wept.TurretSpread * 2     wept.NoLoopSound = true     wept.TurretAmmoStartAmount = 100      wept.TurretFireSound = function(self)         self:EmitSound("weapons/shotgun/shotgun_fire6.wav")     end      wept.TurretFunc = function(self, ent)         ent:SetDTInt(10, 2)     end      GAMEMODE:AddNewDeployableFunction("prop_gunturret", 2, {         Initialize = function(self)             if CLIENT then                 local ent = ClientsideModel("models/weapons/w_shotgun.mdl")                 if ent:IsValid() then                     ent:SetParent(self)                     ent:SetOwner(self)                     ent:SetLocalPos(vector_origin)                     ent:SetLocalAngles(angle_zero)                     ent:Spawn()                     self.GunAttachment = ent                 end             end              self.MaxAmmo = 200             self.SearchDistance = 384         end,         DrawTranslucent = function(self)             local nodrawattachs = self:TransAlphaToMe() < 0.4              local atch = self.GunAttachment             if atch and atch:IsValid() then                 local ang = self:GetGunAngles()                 ang:RotateAroundAxis(ang:Up(), 180)                  atch:SetPos(self:ShootPos() + ang:Forward() * -8)                 atch:SetAngles(ang)                  atch:SetNoDraw(nodrawattachs or self:GetObjectOwner() == MySelf and self:GetManualControl())             end         end,         OnRemove = function(self)             if self.GunAttachment and self.GunAttachment:IsValid() then                 self.GunAttachment:Remove()             end              self.ScanningSound:Stop()             self.ShootingSound:Stop()         end,     }) end) branch.CollectiveName   = "Buckshot" branch.Killicon         = "weapon_zs_gunturret_buckshot"  function SWEP:Initialize()     self:SetWeaponHoldType("slam")     GAMEMODE:DoChangeDeploySpeed(self)     self:HideViewAndWorldModel()      self.ResupplyAmmoType = self.TurretAmmoType end  function SWEP:SetReplicatedAmmo(count)     self:SetDTInt(0, count) end  function SWEP:GetReplicatedAmmo()     return self:GetDTInt(0) end  function SWEP:GetWalkSpeed()     if self:GetPrimaryAmmoCount() > 0 then         return self.FullWalkSpeed     end end  function SWEP:SecondaryAttack() end  function SWEP:Reload() end  function SWEP:CanPrimaryAttack()     if self:GetOwner():IsHolding() or self:GetOwner():GetBarricadeGhosting() then return false end      if self:GetPrimaryAmmoCount() <= 0 then         self:SetNextPrimaryFire(CurTime() + self.Primary.Delay)         return false     end      return true end  function SWEP:Think()     if self.IdleAnimation and self.IdleAnimation <= CurTime() then         self.IdleAnimation = nil         self:SendWeaponAnim(ACT_VM_IDLE)     end      if SERVER then         local count = self:GetPrimaryAmmoCount()         if count ~= self:GetReplicatedAmmo() then             self:SetReplicatedAmmo(count)             self:GetOwner():ResetSpeed()         end     end end  function SWEP:Deploy()     gamemode.Call("WeaponDeployed", self:GetOwner(), self)      self.IdleAnimation = CurTime() + self:SequenceDuration()      return true end  function SWEP:Holster()     return true end  util.PrecacheModel("models/Combine_turrets/Floor_turret.mdl") 