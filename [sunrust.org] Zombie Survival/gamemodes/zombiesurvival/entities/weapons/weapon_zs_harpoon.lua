AddCSLuaFile()  SWEP.PrintName = "Harpoon" SWEP.Description = "The harpoon has a very long range for a melee weapon. The harpoon can be thrown to impale into zombies, dealing damage over time."  if CLIENT then  SWEP.ViewModelFOV = 55   SWEP.ShowViewModel = false  SWEP.ShowWorldModel = false  SWEP.VElements = {      ["harpoonv"] = { type = "Model", model = "models/props_junk/harpoon002a.mdl", bone = "ValveBiped.Bip01_R_Hand", rel = "", pos = Vector(2.596, 0.518, -6.753), angle = Angle(94.675, 115.713, 47.922), size = Vector(0.885, 0.885, 0.885), color = Color(255, 255, 255, 255), surpresslightning = false, material = "", skin = 0, bodygroup = {} }  }   SWEP.WElements = {  ["harpoonw"] = { type = "Model", model = "models/props_junk/harpoon002a.mdl", bone = "ValveBiped.Bip01_R_Hand", rel = "", pos = Vector(3.2, 1.363, -18), angle = Angle(-90, 0, 0), size = Vector(1, 1, 1), color = Color(255, 255, 255, 255), surpresslightning = false, material = "", skin = 0, bodygroup = {} }  }   SWEP.ViewModelBoneMods = {  ["ValveBiped.Bip01_R_UpperArm"] = { scale = Vector(1, 1, 1), pos = Vector(11, -5.021, -9.494), angle = Angle(27.888, -48.536, -16), def_pos = Vector(11, -5.021, -9.494), def_angle = Angle(27.888, -48.536, -16), swing_pos = Vector(11, -5.021, 17.106), swing_angle = Angle(35.266, -49.447, -16), hit_pos = Vector(10.751, -4.038, -30), hit_angle = Angle(14.663, -45.346, -21.809)},  ["ValveBiped.Bip01_R_Hand"] = { scale = Vector(1, 1, 1), pos = Vector(0, 0, 0), angle = Angle(-7.778, -7.778, 65.555), def_angle = Angle(-7.778, -7.778, 65.555), hit_angle = Angle(-8.879, 5.46, 57.911) }  } end  SWEP.Base = "weapon_zs_basemelee"  SWEP.HoldType = "knife"  SWEP.DamageType = DMG_SLASH  SWEP.ViewModel = "models/weapons/cstrike/c_knife_t.mdl" SWEP.WorldModel = "models/weapons/w_crowbar.mdl" SWEP.UseHands = true  SWEP.MeleeDamage = 61 SWEP.MeleeRange = 94 SWEP.MeleeSize = 0.8  SWEP.Primary.Delay = 1.4  SWEP.Tier = 2  SWEP.WalkSpeed = SPEED_SLOWER  SWEP.SwingRotation = Angle(0, -10, 0) SWEP.SwingOffset = Vector(20, -40, -0)  SWEP.SwingTime = 0.6 SWEP.SwingHoldType = "slam"  SWEP.Stability = 50 SWEP.BlockReduction = 0.6  SWEP.BlockRotation = Angle(-64, 40, -40) SWEP.BlockOffset = Vector(7, -12, 6)  SWEP.HitAnim = false   SWEP.MissAnim = false    SWEP.SwingRotation = Angle(0, 0, 0)   SWEP.SwingOffset = Vector(0, 0, 0)    SWEP.AllowQualityWeapons = true  SWEP.FireModes = 2 SWEP.FireModeNames = {"Throw", "Block"}  SWEP.StaminaUsage = 0.2  GAMEMODE:AttachWeaponModifier(SWEP, WEAPON_MODIFIER_MELEE_RANGE, 3, 1) GAMEMODE:AttachWeaponModifier(SWEP, WEAPON_MODIFIER_FIRE_DELAY, -0.15, 1) GAMEMODE:AttachWeaponModifier(SWEP, WEAPON_MODIFIER_STAMINA_USAGE, -0.006)  function SWEP:PlaySwingSound()  self:EmitSound("weapons/iceaxe/iceaxe_swing1.wav", 75, math.random(65, 70)) end  function SWEP:PlayHitSound()  self:EmitSound("physics/metal/metal_sheet_impact_bullet"..math.random(2)..".wav", 70, math.random(90, 95)) end  function SWEP:PlayHitFleshSound()  self:EmitSound("weapons/knife/knife_hit"..math.random(4)..".wav", 80, math.random(80, 85)) end  function SWEP:SecondaryAttack()  if not self:CanPrimaryAttack() or self:GetFireMode() == 1 then return end  local owner = self:GetOwner()  local tr = owner:CompensatedMeleeTrace(45, 0.25)  if tr.Hit then return end  self:SetNextPrimaryFire(CurTime() + self.Primary.Delay)   self:SendWeaponAnim(ACT_VM_MISSCENTER)  owner:DoAnimationEvent(ACT_HL2MP_GESTURE_RANGE_ATTACK_GRENADE)   self.NextDeploy = CurTime() + 0.75   if SERVER then  local ent = ents.Create("projectile_harpoon")  if ent:IsValid() then  ent:SetPos(owner:GetShootPos())  ent:SetAngles(owner:EyeAngles())  ent:SetOwner(owner)  ent.ProjDamage = self.MeleeDamage * (owner.ProjectileDamageMul or 1)  ent.BaseWeapon = self:GetClass()  ent:Spawn()  ent.Team = owner:Team()  local phys = ent:GetPhysicsObject()  if phys:IsValid() then  phys:Wake()  phys:SetVelocityInstantaneous(self:GetOwner():GetAimVector() * 900 * (owner.ObjectThrowStrengthMul or 1))  end  end   owner:StripWeapon(self:GetClass())  end end    function SWEP:DoMeleeAttackAnim()  self:GetOwner():DoAttackEvent()  if CLIENT then  self.AttackAnimDuration = 0.02  self.AttackAnim = CurTime() + self.AttackAnimDuration  end end  function SWEP:PlayFireModeSwitchSound(fm)  fm = tonumber(fm)  if CLIENT then  if fm == 1 then  surface.PlaySound("physics/metal/metal_box_impact_hard"..math.random(3)..".wav")  else  surface.PlaySound("weapons/iceaxe/iceaxe_swing1.wav")  end  end end    if CLIENT then local lerp_vector = LerpVector local lerp_angle = LerpAngle function SWEP:ViewModelDrawn()   if self.ViewModelBoneMods and self.ViewModelBoneMods["ValveBiped.Bip01_R_UpperArm"] and self.ViewModelBoneMods["ValveBiped.Bip01_R_Hand"] then   local owner = self:GetOwner()  local armdelay = owner:GetMeleeSpeedMul()  local swingtime = self.SwingTime * (owner.MeleeSwingDelayMul or 1) * armdelay  local swingend = self:GetSwingEnd()   local windstart = self:GetWindStart()  local windend = windstart + self.Primary.Delay * 0.5   self.AttackAnim = self.AttackAnim or 0  self.AttackAnimDuration = self.AttackAnimDuration or 0.02   self.AttackAnimRecovery = self.AttackAnimRecovery or 0   local tbl = self.ViewModelBoneMods["ValveBiped.Bip01_R_UpperArm"]  local tbl2 = self.ViewModelBoneMods["ValveBiped.Bip01_R_Hand"]   if self:IsSwinging() or self:IsWinding() then   if self:IsWinding() then  local delta = math.Clamp( 1 - ( windend - CurTime() ) / (self.Primary.Delay * 0.5), 0, 1 )   delta = delta ^ 0.5       self.ViewModelBoneMods["ValveBiped.Bip01_R_UpperArm"].pos = lerp_vector( delta, tbl.def_pos, ( tbl.swing_pos + tbl.def_pos ) / 2 )  self.ViewModelBoneMods["ValveBiped.Bip01_R_UpperArm"].angle = lerp_angle( delta, tbl.def_angle, ( tbl.swing_angle + tbl.def_angle ) / 2 )  else  local delta = math.Clamp( 1 - ( swingend - CurTime() ) / swingtime, 0, 1 )   delta = delta ^ 0.5      if self:IsHeavy() then  self.ViewModelBoneMods["ValveBiped.Bip01_R_UpperArm"].pos = lerp_vector( delta, ( tbl.swing_pos + tbl.def_pos ) / 2, tbl.swing_pos )  self.ViewModelBoneMods["ValveBiped.Bip01_R_UpperArm"].angle = lerp_angle( delta, ( tbl.swing_angle + tbl.def_angle ) / 2, tbl.swing_angle )  else  self.ViewModelBoneMods["ValveBiped.Bip01_R_UpperArm"].pos = lerp_vector( delta, tbl.def_pos, tbl.swing_pos )  self.ViewModelBoneMods["ValveBiped.Bip01_R_UpperArm"].angle = lerp_angle( delta, tbl.def_angle, tbl.swing_angle )  end  end  else  if self.AttackAnim >= CurTime() then  local delta = math.Clamp( 1 - ( self.AttackAnim - CurTime() ) / self.AttackAnimDuration, 0, 1 )   delta = math.Clamp( delta * 2.3, 0, 1 )   self.ViewModelBoneMods["ValveBiped.Bip01_R_UpperArm"].pos = lerp_vector( delta, tbl.swing_pos, tbl.hit_pos )  self.ViewModelBoneMods["ValveBiped.Bip01_R_UpperArm"].angle = lerp_angle( delta, tbl.swing_angle, tbl.hit_angle )   self.ViewModelBoneMods["ValveBiped.Bip01_R_Hand"].angle = lerp_angle( delta, tbl2.def_angle, tbl2.hit_angle )  else  if self.AttackAnim ~= 0 then  self.AttackAnim = 0  self.AttackAnimRecovery = CurTime() + 0.1  end  end   if self.AttackAnimRecovery >= CurTime() then  local delta = math.Clamp( 1 - ( self.AttackAnimRecovery - CurTime() ) / 0.1, 0, 1 )   self.ViewModelBoneMods["ValveBiped.Bip01_R_UpperArm"].pos = lerp_vector( delta, tbl.hit_pos, tbl.def_pos )  self.ViewModelBoneMods["ValveBiped.Bip01_R_UpperArm"].angle = lerp_angle( delta, tbl.hit_angle, tbl.def_angle )   self.ViewModelBoneMods["ValveBiped.Bip01_R_Hand"].angle = lerp_angle( delta, tbl2.hit_angle, tbl2.def_angle )  else  self.AttackAnimRecovery = 0  end   if self.AttackAnim == 0 and self.AttackAnimRecovery == 0 then  self.ViewModelBoneMods["ValveBiped.Bip01_R_UpperArm"].pos = tbl.def_pos  self.ViewModelBoneMods["ValveBiped.Bip01_R_UpperArm"].angle = tbl.def_angle   self.ViewModelBoneMods["ValveBiped.Bip01_R_Hand"].angle = tbl2.def_angle  end   end  end   self:SCKViewModel() end  end