SWEP.PrintName = "'Convalescence' Medical Rifle" SWEP.Description = "Fires fast-moving medical darts which can heal at a range. Darts can also inflict damage to zombies as well as reduce their damage output." SWEP.Slot = 4 SWEP.SlotPos = 0  SWEP.Base = "weapon_zs_baseproj" local BaseClass = baseclass.Get("weapon_zs_baseproj")  SWEP.HoldType = "ar2"  SWEP.ViewModel = "models/weapons/cstrike/c_snip_scout.mdl" SWEP.WorldModel = "models/weapons/w_snip_scout.mdl" SWEP.UseHands = true  SWEP.CSMuzzleFlashes = false  SWEP.ReloadSound = Sound("weapons/pistol/pistol_reload1.wav")  SWEP.Primary.Delay = 1.25 SWEP.Primary.ClipSize = 64 SWEP.Primary.DefaultClip = 120 SWEP.Primary.Ammo = "Battery"  SWEP.RequiredClip = 8 SWEP.Primary.Damage = 75 SWEP.ReloadSpeed = 1  SWEP.WalkSpeed = SPEED_SLOW  SWEP.ConeMax = 0 SWEP.ConeMin = 0  SWEP.FireAnimSpeed = 1.4  SWEP.BuffDuration = 5  SWEP.Tier = 2  SWEP.AllowQualityWeapons = true  SWEP.Heal = 9 SWEP.HasMedicalAura = true  GAMEMODE:AttachWeaponModifier(SWEP, WEAPON_MODIFIER_BUFF_DURATION, 3, 1) GAMEMODE:AttachWeaponModifier(SWEP, WEAPON_MODIFIER_HEALING, 0.9, 1) GAMEMODE:AttachWeaponModifier(SWEP, WEAPON_MODIFIER_CLIP_USAGE, -1) GAMEMODE:AddNewRemantleBranch(SWEP, 1, "'Invigorator' Strength Rifle", "Strength boost instead of defence, softens zombies", function(wept)     if SERVER then         wept.EntModify = function(self, ent)             local owner = self:GetOwner()              ent:SetDTBool(0, true)             ent:SetSeeked(self:GetSeekedPlayer() or nil)             ent.Heal = wept.Heal * (owner.MedDartEffMul or 1)             ent.BuffDuration = wept.BuffDuration              local valid_seeked = IsValid(self:GetSeekedPlayer())             self.Primary.ProjVelocity = valid_seeked and 600 or 2000         end     else         for k,v in pairs(wept.VElements) do             v.color = Color(215, 100, 75, 255)         end     end end).CollectiveName = "Strength"  function SWEP:EmitFireSound()     self:EmitSound("weapons/ar2/npc_ar2_altfire.wav", 70, math.random(137, 143), 0.85)     self:EmitSound("weapons/ar2/fire1.wav", 70, math.random(105, 115), 0.85, CHAN_WEAPON + 20)     self:EmitSound("items/smallmedkit1.wav", 70, math.random(165, 170), 0.65, CHAN_WEAPON + 21) end  function SWEP:GetFireDelay()     local owner = self:GetOwner()     return self.Primary.Delay * (owner.MedgunFireDelayMul or 1) end  function SWEP:GetReloadSpeedMultiplier()     local owner = self:GetOwner()     return BaseClass.GetReloadSpeedMultiplier(self) * (owner.MedgunReloadSpeedMul or 1)   end  function SWEP:CanSecondaryAttack()     if self:GetOwner():IsHolding() or self:GetOwner():GetBarricadeGhosting() or self:GetReloadFinish() > 0 then return false end      return self:GetNextSecondaryFire() <= CurTime() end  function SWEP:SecondaryAttack()     if not self:CanSecondaryAttack() then return end      self:SetNextSecondaryFire(CurTime() + 0.25)      local owner = self:GetOwner()     if owner:IsSkillActive(SKILL_RASHTARGETING) then return end      local trtbl = owner:CompensatedPenetratingMeleeTrace(1024, 2, nil, nil, true)     local targetent, lowest_hp = nil, 999999     for _, tr in pairs(trtbl) do         local test = tr.Entity         if test and test:IsValidLivingHuman() and test:Health() < lowest_hp then             targetent = test             lowest_hp = test:Health()         end     end      if CLIENT then         self:EmitSound(targetent and "npc/scanner/combat_scan4.wav" or "npc/scanner/scanner_scan5.wav", 65, locked and 75 or 250)     end     self:SetSeekedPlayer(targetent) end  function SWEP:SetSeekedPlayer(ent)     self:SetDTEntity(6, ent) end  function SWEP:GetSeekedPlayer()     return self:GetDTEntity(6) end