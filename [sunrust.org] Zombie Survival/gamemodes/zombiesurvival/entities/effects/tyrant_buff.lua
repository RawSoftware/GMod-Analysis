EFFECT.LifeTime = 3 EFFECT.Offsets = {}  local vec_up = vector_up  function EFFECT:Init(data)   self.Pos = data:GetOrigin()    self.DieTime = RealTime() + self.LifeTime    self:SetModel( "models/props_wasteland/rockcliff01k.mdl" )  self:SetModelScale( 0.3, 0 )  self:SetMaterial("!sigil_blue")       sound.Play("physics/glass/glass_largesheet_break"..math.random(3)..".wav", self.Pos, 70, math.random( 60, 70 ) )    for i=1, 15 do   local vec_r = VectorRand() * math.random( 40, 70 )  vec_r.z = 0  local ang_r = VectorRand():Angle()  ang_r.p = math.random( -20, 20 )  ang_r.y = math.random( -20, 20 )  ang_r.y = math.random( -90, 90 )  self.Offsets[ i ] = { vec = vec_r, ang = ang_r, scale = math.Rand(0.1, 0.6), off = math.random( 0, 20 ) }      for k = 1, math.random(5) do  local emitter = ParticleEmitter(self.Pos + vec_r, true)  emitter:SetNearClip(24, 32)   local particle = emitter:Add( math.random(3) == 3 and "effects/blueflare1" or "effects/fleck_glass"..math.random(3), self.Pos + vec_r + VectorRand()*math.random( 3, 20 ))  particle:SetVelocity( vec_up * math.random( 700, 1200 ) + VectorRand() * math.random( 500, 700 ) )  particle:SetDieTime(math.Rand(1, 3))  particle:SetStartSize(math.Rand(3,6))  particle:SetEndSize( particle:GetStartSize())  particle:SetStartAlpha(240)  particle:SetEndAlpha(0)  particle:SetRoll(math.Rand(0, 360))  particle:SetRollDelta(math.Rand(-90, 90))  particle:SetColor(60, 164, 255)  particle:SetAirResistance(400)  particle:SetGravity( vec_up * -600 )  particle:SetCollide(true)    emitter:Finish() emitter = nil collectgarbage("step", 64)  end    end     self:SetRenderBounds( Vector( -50, -50, -50 ), Vector( 60, 60, 60 ) )  end  function EFFECT:Think()  return RealTime() < self.DieTime end  local render_SetMaterial = render.SetMaterial local render_DrawSprite = render.DrawSprite  local colGlow = Color(60, 164, 255) local matGlow = Material("effects/blueflare1")  function EFFECT:Render()    if self.Pos and self.Offsets then    local origin = self.Pos    local delta = math.Clamp( ( self.DieTime - RealTime() ) / self.LifeTime, 0, 1 )  local reverse_delta = 1 - delta    for i=1, 15 do    if self.Offsets[ i ] then    local tbl = self.Offsets[ i ]    self:SetupBones()    local new_vec = tbl.vec  new_vec.z = -30 * delta ^ 50 + tbl.off    self:SetPos( origin + new_vec )  self:SetAngles( tbl.ang )  self:SetModelScale( tbl.scale * ( 1 - delta ^ 50 )  )    render.SetBlend( delta <= 0.1 and ( delta/0.1 ) or 1 )  self:DrawModel()  render.SetBlend(1)    colGlow.a = delta <= 0.1 and ( delta/0.1 ) * 255 or 255    render_SetMaterial(matGlow)  render_DrawSprite(origin + new_vec, 60 * ( 1 - delta ^ 50 ), 60 * ( 1 - delta ^ 50 ), colGlow)    end    end   end   end