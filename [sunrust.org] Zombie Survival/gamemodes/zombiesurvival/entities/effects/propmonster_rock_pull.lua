local hole_mdl = Model( "models/props_debris/destroyedceiling01d.mdl" )  local grnd_trace = { mask = MASK_SOLID_BRUSHONLY } local grnd_offset = -7   local model_material = CreateMaterial( "propmonster_hole", "VertexLitGeneric", { ["$basetexture"] = "", ["$model"] = 1 } )   function EFFECT:Init(data)  local pos = data:GetOrigin()  local ang = data:GetAngles()  local norm = vector_up  ang.p = 0   self:SetModel( hole_mdl )  self:SetModelScale( 0.95, 0 )   ang:RotateAroundAxis( ang:Up(), 180 )  ang:RotateAroundAxis( ang:Right(), 180 )   grnd_trace.start = pos + vector_up * 15  grnd_trace.endpos = grnd_trace.start - vector_up * 300   local tr = util.TraceLine( grnd_trace )  local apply_mat = false   if tr and tr.Hit and tr.HitWorld and tr.HitNormal then  local norm_ang = tr.HitNormal:Angle()  ang = norm_ang  ang:RotateAroundAxis( ang:Right(), 90 )   norm = tr.HitNormal   util.Decal( "Scorch", tr.HitPos + tr.HitNormal, tr.HitPos - tr.HitNormal )   if tr.HitTexture and string.find( tr.HitTexture, "/" ) then  model_material:SetTexture( "$basetexture", Material( tr.HitTexture ):GetTexture("$basetexture") )  self:SetMaterial( "!propmonster_hole" )  apply_mat = true  end  end   self:SetAngles( ang )  self:SetPos( tr.HitPos - ang:Up() * grnd_offset )   self.RenPos1 = Vector( self:GetPos().x, self:GetPos().y, self:GetPos().z )  self.RenPos1 = self.RenPos1 + ang:Right() * 11 + ang:Forward() * -11   self.RenPos2 = Vector( self:GetPos().x, self:GetPos().y, self:GetPos().z )  self.RenPos2 = self.RenPos2 + ang:Right() * -11 + ang:Forward() * 11   self.RenAngles1 = Angle( ang.p, ang.y, ang.r )  ang:RotateAroundAxis( ang:Up(), 180 )  self.RenAngles2 = Angle( ang.p, ang.y, ang.r )   self:SetRenderBounds( Vector( -50, -50, -50 ), Vector( 60, 60, 60 ) )       pos = self:GetPos() + ang:Up() * grnd_offset * 2   sound.Play("physics/wood/wood_crate_break4.wav", pos, 77, math.Rand(35, 45))  sound.Play("physics/concrete/concrete_break2.wav", pos, 77, math.Rand(110, 120))   local maxbound = Vector(3, 3, 3)  local minbound = maxbound * -1  for i=1, 6 do  local dir = norm  local ent = ClientsideModel("models/props_junk/Rock001a.mdl", RENDERGROUP_OPAQUE)  if ent:IsValid() then  ent:SetModelScale(math.Rand(0.7, 2), 0)  ent:SetPos(pos + dir * 10)  ent:PhysicsInitBox(minbound, maxbound)  ent:SetCollisionBounds(minbound, maxbound)   if apply_mat then  ent:SetMaterial( "!propmonster_hole" )  end   local phys = ent:GetPhysicsObject()  if phys:IsValid() then  phys:Wake()  phys:SetMaterial("rock")  phys:ApplyForceCenter(dir * math.Rand(400, 800))  end   SafeRemoveEntityDelayed(ent, math.Rand(6, 10))  end  end   local emitter = ParticleEmitter(pos)  emitter:SetNearClip(24, 32)   local particle   for i=1, 12 do  particle = emitter:Add("particles/smokey", pos)  particle:SetVelocity(norm * 28 + VectorRand() * 72)  particle:SetDieTime(math.Rand(3.5, 4.5))  particle:SetStartAlpha(110)  particle:SetEndAlpha(0)  particle:SetStartSize(math.Rand( 60, 100 ))  particle:SetEndSize(0)  particle:SetRollDelta(math.Rand(-2.5, 2.5))  particle:SetRoll(math.Rand(0, 360))  particle:SetColor(80, 80, 80)  end   emitter:Finish() emitter = nil collectgarbage("step", 64)   self.SpawnDuration = 0.2  self.SpawnTime = CurTime() + self.SpawnDuration  self.DieTime = CurTime() + 4 end  function EFFECT:Think()  return self.DieTime and self.DieTime >= CurTime() end  local add_vec = Vector( 0, 0, 30 ) local add_ang = Angle( 25, 0, 25 ) function EFFECT:Render()   if self.RenPos1 and self.RenPos2 and self.RenAngles1 and self.RenAngles2 then   local draw_delta = math.Clamp( self.DieTime - CurTime(), 0, 1  )   local delta = math.Clamp( ( self.SpawnTime - CurTime() ) / self.SpawnDuration, 0, 1  )    local delta2 = 1 - delta  delta = delta ^ 10    local n = -1 * self:GetUp()  local p = n:Dot( self:GetPos() - self:GetUp() * 3 )   local old_clip = render.EnableClipping( true )  render.PushCustomClipPlane( n, p )   render.SetBlend( draw_delta )   self:SetupBones()  self:SetPos( self.RenPos1 - delta * add_vec )  self:SetAngles( self.RenAngles1 + delta * add_ang - add_ang / 5 )  self:DrawModel()   self:SetupBones()  self:SetPos( self.RenPos2 - delta * add_vec )  self:SetAngles( self.RenAngles2 + delta * add_ang - add_ang / 5 )  self:DrawModel()   render.SetBlend( 1 )   render.PopCustomClipPlane()  render.EnableClipping( old_clip )   end  end