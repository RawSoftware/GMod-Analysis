EFFECT.LifeTime = 0.5 EFFECT.Offsets = {}  function EFFECT:Init(data)    self.Ent = data:GetEntity()    self.DieTime = RealTime() + self.LifeTime    self:SetModel( "models/props_wasteland/rockgranite03a.mdl" )  self:SetModelScale( 0.3, 0 )  self:SetMaterial("!sigil_blue")    if self.Ent and self.Ent:IsValid() then  self:SetParent( self.Ent )  self:SetRenderBounds( self.Ent:OBBMins(), self.Ent:OBBMaxs() )   self.Ent:EmitSound( "physics/concrete/concrete_break"..math.random(2,3)..".wav", 70, math.random( 130, 150 ) )  end    for i=1, 7 do   local vec_r = VectorRand() * math.random( 10, 30 )  vec_r.z = math.random( -25, 20 )  self.Offsets[ i ] = { vec =  vec_r, ang = VectorRand():Angle(), scale = math.Rand(0.5, 0.8) }  end  end   function EFFECT:Think()  return RealTime() < self.DieTime end  local vec_up = vector_up function EFFECT:Render()    if self.Ent and self.Ent:IsValid() and self.Offsets then    local origin = self.Ent:LocalToWorld( self.Ent:OBBCenter() )    local delta = math.Clamp( ( self.DieTime - RealTime() ) / self.LifeTime, 0, 1 )  local reverse_delta = 1 - delta    for i=1, 7 do    if self.Offsets[ i ] then    local tbl = self.Offsets[ i ]    self:SetupBones()    local new_vec = tbl.vec * ( 1 - delta ^ 10 )  new_vec.z = tbl.vec.z    self:SetPos( origin + new_vec )  self:SetAngles( tbl.ang )  self:SetModelScale( tbl.scale * math.Clamp( delta ^ 0.1, 0.3, 1 ) )     render.SetBlend( delta <= 0.1 and ( delta/0.4 ) or 1 )  self:DrawModel()  render.SetBlend(1)  end    end    end   end